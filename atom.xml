<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>myblog</title>
  
  <subtitle>Desire is the starting point of all achievement</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ylovex.cn/"/>
  <updated>2019-06-30T01:42:36.666Z</updated>
  <id>http://ylovex.cn/</id>
  
  <author>
    <name>Yang Peng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LMS算法</title>
    <link href="http://ylovex.cn/2019/06/29/LMS%E7%AE%97%E6%B3%95/"/>
    <id>http://ylovex.cn/2019/06/29/LMS算法/</id>
    <published>2019-06-29T12:07:05.000Z</published>
    <updated>2019-06-30T01:42:36.666Z</updated>
    
    <content type="html"><![CDATA[<p>自适应滤波就是利用前一时刻获得的滤波器参数来自动调节现时刻的滤波器参数，以适应信号和噪声随时间变化的统计特性，从而实现最优滤波。</p><p><img src="2019629001.jpg" alt="jpg"></p><p>主输入端接收带噪信号，参考端为噪声信号，其中参考信号vi是与主输入端中信号s无关但与vo相关的噪声信号，利用量输入信号的相关性和有用信号与噪声的独立性，使参考信号尽可能逼近主输入端中的vo并相减从而抵消掉主输入端中的噪声干扰，最终得到有用信号。</p><p><strong>算法代码：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">function [yn,w,en,itr]=LMSALG(xn,dn,M,mu,itr)</span><br><span class="line">% LMS(Least Mean Squre)算法</span><br><span class="line">% 输入参数:</span><br><span class="line">%     xn   输入的信号序列      (列向量) </span><br><span class="line">%     dn   所期望的响应序列    (列向量) </span><br><span class="line">%     M    滤波器的阶数        (标量)  </span><br><span class="line">%     mu   收敛因子(步长)      (标量)     要求大于0,小于xn的相关矩阵最大特征值的倒数      </span><br><span class="line">%     itr  迭代次数            (标量)     默认为xn的长度,M &lt; itr &lt;= length(xn) </span><br><span class="line">% 输出参数:  </span><br><span class="line">%     w    滤波器的权值矩阵     (矩阵) </span><br><span class="line">%          大小为M*itr,  </span><br><span class="line">%     en   误差序列(itr*1)    (列向量)   </span><br><span class="line">%     yn   实际输出序列         (列向量)</span><br><span class="line"></span><br><span class="line">% 确定迭代次数，若输入迭代次数itr，则设置为itr；若没有该参数，则设置为输入信号长度</span><br><span class="line">% 参数个数必须为4个或5个</span><br><span class="line">if nargin == 4    %  4个时递归迭代的次数为xn的长度</span><br><span class="line">    itr = length(xn);</span><br><span class="line">elseif nargin == 5     %  5个时需满足 M &lt; itr &lt; length(xn)     </span><br><span class="line">    if itr &gt; length(xn) || itr &lt; M          </span><br><span class="line">        error(&apos;迭代次数过大或过小!&apos;);     </span><br><span class="line">    end</span><br><span class="line">else</span><br><span class="line">    error(&apos;请检查输入参数的个数!&apos;); </span><br><span class="line">end  % 初始化参数</span><br><span class="line"></span><br><span class="line">en = zeros(itr,1);     % 误差序列,en(k)表示第k次迭代时预期输出与实际输入的误差</span><br><span class="line">w  = zeros(itr,M);     % 每一行代表一个加权参量,每一列代表-次迭代,初始为0</span><br><span class="line">% w权系数取为矩阵主要是为了判断该算法的收敛性</span><br><span class="line">xn_r=xn&apos;; %%%%参考行向量</span><br><span class="line">dn_r=dn&apos;; %%%%nmr行向量</span><br><span class="line">% 迭代计算</span><br><span class="line">for kitr = M:itr    % 第k次迭代</span><br><span class="line">    x = xn(kitr:-1:kitr-M+1);    % 滤波器M个抽头的输入</span><br><span class="line">    y = w(kitr-1,:)*x;    % 滤波器的输出 </span><br><span class="line">    en(kitr) = dn(kitr) - y;     % 第k次迭代的误差</span><br><span class="line">    % 滤波器权值计算的迭代式</span><br><span class="line">    w(kitr,:) = w(kitr-1,:) + 2*mu*en(kitr)*x&apos;;%%xn(kitr-M+1:kitr)&apos;;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">%%%方法一、直接使用filter函数来进行滤波处理</span><br><span class="line">CancellationData = filter(w(end,:),1,xn_r);  % 直接使用filter函数来进行滤波处理</span><br><span class="line">yn = dn_r-CancellationData;</span><br><span class="line">yn = yn(M+1:end);% 去掉与滤波系数长度对应的前N个点</span><br><span class="line">yn=yn&apos;; %%输出行向量</span><br><span class="line"></span><br><span class="line">% % 求最优时滤波器的输出序列</span><br><span class="line">% yn = zeros(size(xn)); </span><br><span class="line">% for kitr = M:length(xn)</span><br><span class="line">%     x = xn(kitr:-1:kitr-M+1);</span><br><span class="line">%     yn(kitr) = dn(kitr) - w(end,:)*x;   % w(:,end)为最后一次迭代生成的滤波器系数</span><br><span class="line">% end</span><br><span class="line">% yn = yn(M:end);  % 前面M个数据没有经过滤波处理，所以设置成inf，绘图时不显示</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;自适应滤波就是利用前一时刻获得的滤波器参数来自动调节现时刻的滤波器参数，以适应信号和噪声随时间变化的统计特性，从而实现最优滤波。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;2019629001.jpg&quot; alt=&quot;jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;主输入端接收带噪信号，参考端为噪声信号，其
      
    
    </summary>
    
      <category term="信号处理" scheme="http://ylovex.cn/categories/%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86/"/>
    
    
      <category term="lms" scheme="http://ylovex.cn/tags/lms/"/>
    
  </entry>
  
  <entry>
    <title>Java List面经</title>
    <link href="http://ylovex.cn/2019/06/28/java-list%E9%9D%A2%E7%BB%8F/"/>
    <id>http://ylovex.cn/2019/06/28/java-list面经/</id>
    <published>2019-06-28T13:54:41.000Z</published>
    <updated>2019-06-30T03:42:56.160Z</updated>
    
    <content type="html"><![CDATA[<h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p>List是一个接口，继承于Collenction接口，它代表着有序的队列。</p><p>​     ps：java.util.Collection是一个集合接口，它提供了对集合对象进行基本操作的通用接口方法；javautil.Collections是一个包装类，它包含各种有关集合操作的静态多态方法，该类不能实例化，服务于Collection框架。</p><p>ArrayList：底层是用数组实现。</p><p>LinkedList：底层是通过双向链表实现。</p><p>Vector：通过数组实现，线程安全。</p><h3 id="ArrayList扩容"><a href="#ArrayList扩容" class="headerlink" title="ArrayList扩容"></a>ArrayList扩容</h3><p>默认初始容量为10.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Default initial capacity.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">transient</span> Object[] elementData; <span class="comment">// non-private to simplify nested class access</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br></pre></td></tr></table></figure><p>扩容，默认为1.5倍方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// overflow-conscious code</span></span><br><span class="line">        <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">        <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            newCapacity = minCapacity;</span><br><span class="line">        <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">            newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">        <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">        elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="ArrayList和LinkedList"><a href="#ArrayList和LinkedList" class="headerlink" title="ArrayList和LinkedList"></a>ArrayList和LinkedList</h3><p>ArrayList是实现了基于动态数组的数据结构，LinkedList是基于链表结构。</p><p>对于随机访问的get和set方法，ArrayList要优于LinkedList，因为LinkedList要移动指针。</p><p>对于新增和删除操作add和remove，LinkedList比较占优势，因为ArrayList要移动数据。</p><p>对ArrayList和LinkedList而言，在列表末尾增加一个元素所花的开销都是固定的。对 ArrayList而言，主要是在内部数组中增加一项，指向所添加的元素，偶尔可能会导致对数组重新进行分配；而对LinkedList而言，这个开销是 统一的，分配一个内部Entry对象。</p><p>在ArrayList集合中添加或者删除一个元素时，当前的列表所所有的元素都会被移动。而LinkedList集合中添加或者删除一个元素的开销是固定的。</p><p>LinkedList集合不支持高效的随机随机访问（RandomAccess），因为可能产生二次项的行为。</p><p>ArrayList的空间浪费主要体现在在list列表的结尾预留一定的容量空间，而LinkedList的空间花费则体现在它的每一个元素都需要消耗相当的空间。</p><h3 id="Arrays-asList-方法"><a href="#Arrays-asList-方法" class="headerlink" title="Arrays.asList()方法"></a>Arrays.asList()方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int[] a = &#123;1,2,3,4&#125;;</span><br><span class="line">        List a_list = Arrays.asList(a);</span><br><span class="line">        System.out.println(a_list.size());//size=1</span><br><span class="line">        Integer[] b = &#123;1,2,3,4&#125;;</span><br><span class="line">        List b_list = Arrays.asList(b);</span><br><span class="line">        System.out.println(b_list.size());//size=4</span><br></pre></td></tr></table></figure><p>Arrays.asList方法返回的是List，通过Arrays类的一个内部类实现，内部用的数组就是传入的数组，没有拷贝，也不会动态改变大小，所以对数组的修改也会反应到List中，对List调用add/remove方法会抛出异常。</p><p>使用ArrayList方法实现为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;(Arrays.asList(a));</span><br></pre></td></tr></table></figure><h3 id="ArrayList线程不安全"><a href="#ArrayList线程不安全" class="headerlink" title="ArrayList线程不安全"></a>ArrayList线程不安全</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public boolean add(E e) &#123;</span><br><span class="line">        ensureCapacityInternal(size + 1);  // Increments modCount!!</span><br><span class="line">        elementData[size++] = e;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>因为ArrayList本身不是线程安全的，通过Collections.synchronizedList可以将其包装成一个线程安全的List。</p><h3 id="Vector和ArrayList"><a href="#Vector和ArrayList" class="headerlink" title="Vector和ArrayList"></a>Vector和ArrayList</h3><p>vector是线程（Thread）同步（Synchronized）的，所以它也是线程安全的，而Arraylist是线程异步（ASynchronized）的，是不安全的。如果不考虑到线程的安全因素，一般用Arraylist效率比较高。</p><p>如果集合中的元素的数目大于目前集合数组的长度时，vector增长率为目前数组长度的100%,而arraylist增长率为目前数组长度的50%.如过在集合中使用数据量比较大的数据，用vector有一定的优势。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;List&quot;&gt;&lt;a href=&quot;#List&quot; class=&quot;headerlink&quot; title=&quot;List&quot;&gt;&lt;/a&gt;List&lt;/h3&gt;&lt;p&gt;List是一个接口，继承于Collenction接口，它代表着有序的队列。&lt;/p&gt;
&lt;p&gt;​     ps：java.uti
      
    
    </summary>
    
      <category term="Java" scheme="http://ylovex.cn/categories/Java/"/>
    
    
      <category term="Java" scheme="http://ylovex.cn/tags/Java/"/>
    
      <category term="List" scheme="http://ylovex.cn/tags/List/"/>
    
  </entry>
  
  <entry>
    <title>Java Set面经</title>
    <link href="http://ylovex.cn/2019/06/28/java-set%E9%9D%A2%E7%BB%8F/"/>
    <id>http://ylovex.cn/2019/06/28/java-set面经/</id>
    <published>2019-06-28T13:54:41.000Z</published>
    <updated>2019-06-30T03:59:59.928Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Set种类"><a href="#Set种类" class="headerlink" title="Set种类"></a>Set种类</h3><p>Set接口的特性，Set接口继承了Collection接口，Set集合中不能包含重复的元素，每个元素必须是唯一的，你只要将元素加入set中，重复的元素会自动移除。</p><p>Java中提供了HashSet、TreeSet、LinkedHashSet三种常用的Set实现。</p><h3 id="HashSet实现"><a href="#HashSet实现" class="headerlink" title="HashSet实现"></a>HashSet实现</h3><p>HashSet底层通过HashMap实现。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">private transient HashMap&lt;E,Object&gt; map;</span><br><span class="line"></span><br><span class="line">    // Dummy value to associate with an Object in the backing Map</span><br><span class="line">    private static final Object PRESENT = new Object();</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Constructs a new, empty set; the backing &lt;tt&gt;HashMap&lt;/tt&gt; instance has</span><br><span class="line">     * default initial capacity (16) and load factor (0.75).</span><br><span class="line">     */</span><br><span class="line">    public HashSet() &#123;</span><br><span class="line">        map = new HashMap&lt;&gt;();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>HashSet存储元素是无序的，元素的哈希码进行存储的，HashSet根据每个存储对象的哈希码值（调用hashCode方法获得），用固定的算法算出它的存储索引，把存储对象存放在一个叫做散列表的相应位置中，如果对应的位置没有其它元素，就只需要直接存入；如果该位置已经有元素了，就会将新对象跟该位置的所有对象进行比较（调用equals（）方法），以查看容器中是否已经存在该对象，若不存在，就存放该对象，若已经存在，就直接使用该对象。</p><p>HashSet的存储结构是个链表数组，每一个数组元素就是一个链表，类似这种数据结构称为散列表。数组用于存储元素，该存储元素对应的数组下标是调用hashCode方法返回的存储元素的哈希码。当后加入元素的哈希码与已经加入的元素哈希码相同时，HashSet就会创建一个链表，将相同哈希码的元素存入一个链表，并将该链表的头指针存储到哈希码对应的数组元素中。</p><h3 id="HashSet和TreeSet"><a href="#HashSet和TreeSet" class="headerlink" title="HashSet和TreeSet"></a>HashSet和TreeSet</h3><p>HashSet底层数据结构是哈希表，TreeSet底层数据结构是红黑树。</p><p>TreeSet保证元素的排序方式：</p><ol><li>自然排序(这种排序方式可以理解成元素本身具备比较性)让元素所属的类实现Comparable接口。</li><li>比较器排序(这种排序可以理解成集合类具备比较性)让集合构造方法接收Comparator的实现类对象，实现方式可以用匿名类来实现。</li></ol><h3 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h3><p>是HashSet子类，LinkedHashSet集合也是根据元素hashCode值来决定元素存储位置，但它同时使用链表维护元素的次序，这样使的元素看起来是以插入的顺序保存的。也就是说当遍历LinkedHashSet集合里的元素时，HashSet将会按元素的添加顺序来访问集合里的元素。</p><p>LinkedHashSet需要维护元素的插入顺序，因此性能略低于HashSet的性能，但是在迭代访问Set里的全部元素时，将有很好的性能，因为它以列表来维护内部顺序。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Set种类&quot;&gt;&lt;a href=&quot;#Set种类&quot; class=&quot;headerlink&quot; title=&quot;Set种类&quot;&gt;&lt;/a&gt;Set种类&lt;/h3&gt;&lt;p&gt;Set接口的特性，Set接口继承了Collection接口，Set集合中不能包含重复的元素，每个元素必须是唯一的，你
      
    
    </summary>
    
      <category term="Java" scheme="http://ylovex.cn/categories/Java/"/>
    
    
      <category term="Java" scheme="http://ylovex.cn/tags/Java/"/>
    
      <category term="Set" scheme="http://ylovex.cn/tags/Set/"/>
    
  </entry>
  
  <entry>
    <title>Java Map面经</title>
    <link href="http://ylovex.cn/2019/06/28/java-map%E9%9D%A2%E7%BB%8F/"/>
    <id>http://ylovex.cn/2019/06/28/java-map面经/</id>
    <published>2019-06-28T13:54:41.000Z</published>
    <updated>2019-06-30T09:04:29.908Z</updated>
    
    <content type="html"><![CDATA[<h3 id="HashMap实现原理"><a href="#HashMap实现原理" class="headerlink" title="HashMap实现原理"></a>HashMap实现原理</h3><p><img src="20196301206.png" alt="hashmap"></p><p>参考<a href="https://www.cnblogs.com/chengxiao/p/6059914.html" target="_blank" rel="noopener">https://www.cnblogs.com/chengxiao/p/6059914.html</a></p><p>Entry内部结构为：</p><p><img src="20196301211.png" alt="entry"></p><ol><li>HashMap由数组+链表组成的，数组是HashMap的主体，链表则是主要为了解决哈希冲突而存在的，即链地址法。HashMap的主干是一个Entry数组。Entry是HashMap的基本组成单元，每一个Entry包含一个key-value键值对和一个hash值和一个指向下一个Entry的next指针。</li><li>如果定位到的数组位置不含链表（当前entry的next指向null）,那么对于查找，添加等操作很快，仅需一次寻址即</li><li>如果定位到的数组包含链表，对于添加操作，其时间复杂度依然为O(1)，操作是创建新节点，把该新节点插入到链表中的头部，该新节点的next指针指向原来的头结点 ，即需要简单改变引用链即可，而对于查找操作来讲，此时就需要遍历链表，然后通过key对象的equals方法逐一比对查找。</li><li>所以，性能考虑，HashMap中的链表出现越少，性能才会越好。</li><li>当发生哈希冲突并且size大于阈值的时候，需要进行数组扩容，扩容时，需要新建一个长度为之前数组2倍的新的数组，然后将当前的Entry数组中的元素全部传输过去，扩容后的新数组长度为之前的2倍，所以扩容相对来说是个耗资源的操作</li><li>如果key为null，就会插入到table[0]的位置也就是数组头。如果key=null，则hash值直接赋0</li><li>存key时，如果链中存在该key，则用传入的value覆盖掉旧的value，同时把旧的value返回：这就是为什么HashMap不能有两个相同的key的原因。</li><li>计算hash值之后，如何通过hash值均匀的存到数组里？当然是取模，但取模消耗大，因此HashMap用的&amp;运算符（按位与操作）来实现的：hashCode &amp; (length-1)。</li><li>这里就隐含了为什么数组长度length一定要是2的n次方。当length不是2的n次方的时候，length-1的二进制最后一位肯定是0，在&amp;操作时，一个为0，无论另一个为1还是0，最终&amp;操作结果都是0，这就造成了结果的二进制的最后一位都是0，这就导致了所有数据都存储在2的倍数位上，所以说，所以说当length = 2^n时，不同的hash值发生碰撞的概率比较小，这样就会使得数据在table数组中分布较均匀，查询速度也较快。</li></ol><p>存储过程：</p><ol><li><p>传入key和value，判断key是否为null，如果为null，则调用putForNullKey，以null作为key存储到哈希表中； </p><p> 　　2.  然后计算key的hash值，根据hash值搜索在哈希表table中的索引位置，若当前索引位置不为null，则对该位置的Entry链表进行遍历，如果链中存在该key，则用传入的value覆盖掉旧的value，同时把旧的value返回，结束；<br>   　　3.  否则调用addEntry，用key-value创建一个新的节点，并把该节点插入到该索引对应的链表的头部</p></li></ol><p>读取过程：</p><ol><li>调用hash（key）求得key的hash值，然后调用indexFor（hash）求得hash值对应的table的索引位置，然后遍历索引位置的链表，如果存在key，则把key对应的Entry返回，否则返回null。</li></ol><h3 id="JDK1-8前后HashMap区别"><a href="#JDK1-8前后HashMap区别" class="headerlink" title="JDK1.8前后HashMap区别"></a>JDK1.8前后HashMap区别</h3><ol><li>在JDK1.8以前版本中，HashMap的实现是数组+链表，它的缺点是即使哈希函数选择的再好，也很难达到元素百分百均匀分布，而且当HashMap中有大量元素都存到同一个桶中时，这个桶会有一个很长的链表，此时遍历的时间复杂度就是O(n)，当然这是最糟糕的情况。</li><li>在JDK1.8及以后的版本中引入了红黑树结构，HashMap的实现就变成了数组+链表或数组+红黑树。添加元素时，若桶中链表个数超过8，链表会转换成红黑树；删除元素、扩容时，若桶中结构为红黑树并且树中元素个数较少时会进行修剪或直接还原成链表结构，以提高后续操作性能；遍历、查找时，由于使用红黑树结构，红黑树遍历的时间复杂度为 O(logn)，所以性能得到提升。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">        <span class="keyword">final</span> K key;</span><br><span class="line">        V value;</span><br><span class="line">        Node&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">        Node(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">            <span class="keyword">this</span>.hash = hash;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">getKey</span><span class="params">()</span>        </span>&#123; <span class="keyword">return</span> key; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">getValue</span><span class="params">()</span>      </span>&#123; <span class="keyword">return</span> value; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> key + <span class="string">"="</span> + value; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">setValue</span><span class="params">(V newValue)</span> </span>&#123;</span><br><span class="line">            V oldValue = value;</span><br><span class="line">            value = newValue;</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (o == <span class="keyword">this</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Map.Entry) &#123;</span><br><span class="line">                Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</span><br><span class="line">                <span class="keyword">if</span> (Objects.equals(key, e.getKey()) &amp;&amp;</span><br><span class="line">                    Objects.equals(value, e.getValue()))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="HashMap扩容"><a href="#HashMap扩容" class="headerlink" title="HashMap扩容"></a>HashMap扩容</h3><p>HashMap扩容可以分为三种情况：</p><ol><li><p>使用默认构造方法初始化HashMap。HashMap在一开始初始化的时候会返回一个空的table，并且thershold为0。因此第一次扩容的容量为默认值DEFAULT_INITIAL_CAPACITY也就是16。同时threshold = DEFAULT_INITIAL_CAPACITY * DEFAULT_LOAD_FACTOR = 12。</p></li><li><p>指定初始容量的构造方法初始化HashMap。初始容量会等于threshold，接着threshold = 当前的容量（threshold） * DEFAULT_LOAD_FACTOR。</p></li><li><p>HashMap不是第一次扩容。如果HashMap已经扩容过的话，那么每次table的容量以及threshold量为原有的两倍。</p></li></ol><p>HashMap是先插入数据再进行扩容的，但是如果是刚刚初始化容器的时候是先扩容再插入数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">final Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">        int oldCap = (oldTab == null) ? 0 : oldTab.length;</span><br><span class="line">        int oldThr = threshold;</span><br><span class="line">        int newCap, newThr = 0;</span><br><span class="line">        if (oldCap &gt; 0) &#123;</span><br><span class="line">            if (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">                threshold = Integer.MAX_VALUE;</span><br><span class="line">                return oldTab;</span><br><span class="line">            &#125;</span><br><span class="line">            else if ((newCap = oldCap &lt;&lt; 1) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                     oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">                newThr = oldThr &lt;&lt; 1; // double threshold</span><br><span class="line">        &#125;</span><br><span class="line">        else if (oldThr &gt; 0) // initial capacity was placed in threshold</span><br><span class="line">            newCap = oldThr;</span><br><span class="line">        else &#123;               // zero initial threshold signifies using defaults</span><br><span class="line">            newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">            newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">        &#125;</span><br><span class="line">        if (newThr == 0) &#123;</span><br><span class="line">            float ft = (float)newCap * loadFactor;</span><br><span class="line">            newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (float)MAXIMUM_CAPACITY ?</span><br><span class="line">                      (int)ft : Integer.MAX_VALUE);</span><br><span class="line">        &#125;</span><br><span class="line">        threshold = newThr;</span><br><span class="line">        @SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span><br><span class="line">            Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])new Node[newCap];</span><br><span class="line">        table = newTab;</span><br><span class="line">        if (oldTab != null) &#123;</span><br><span class="line">            for (int j = 0; j &lt; oldCap; ++j) &#123;</span><br><span class="line">                Node&lt;K,V&gt; e;</span><br><span class="line">                if ((e = oldTab[j]) != null) &#123;</span><br><span class="line">                    oldTab[j] = null;</span><br><span class="line">                    if (e.next == null)</span><br><span class="line">                        newTab[e.hash &amp; (newCap - 1)] = e;</span><br><span class="line">                    else if (e instanceof TreeNode)</span><br><span class="line">                        ((TreeNode&lt;K,V&gt;)e).split(this, newTab, j, oldCap);</span><br><span class="line">                    else &#123; // preserve order</span><br><span class="line">                        Node&lt;K,V&gt; loHead = null, loTail = null;</span><br><span class="line">                        Node&lt;K,V&gt; hiHead = null, hiTail = null;</span><br><span class="line">                        Node&lt;K,V&gt; next;</span><br><span class="line">                        do &#123;</span><br><span class="line">                            next = e.next;</span><br><span class="line">                            if ((e.hash &amp; oldCap) == 0) &#123;</span><br><span class="line">                                if (loTail == null)</span><br><span class="line">                                    loHead = e;</span><br><span class="line">                                else</span><br><span class="line">                                    loTail.next = e;</span><br><span class="line">                                loTail = e;</span><br><span class="line">                            &#125;</span><br><span class="line">                            else &#123;</span><br><span class="line">                                if (hiTail == null)</span><br><span class="line">                                    hiHead = e;</span><br><span class="line">                                else</span><br><span class="line">                                    hiTail.next = e;</span><br><span class="line">                                hiTail = e;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; while ((e = next) != null);</span><br><span class="line">                        if (loTail != null) &#123;</span><br><span class="line">                            loTail.next = null;</span><br><span class="line">                            newTab[j] = loHead;</span><br><span class="line">                        &#125;</span><br><span class="line">                        if (hiTail != null) &#123;</span><br><span class="line">                            hiTail.next = null;</span><br><span class="line">                            newTab[j + oldCap] = hiHead;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return newTab;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>参考<a href="https://blog.csdn.net/pange1991/article/details/82347284" target="_blank" rel="noopener">https://blog.csdn.net/pange1991/article/details/82347284</a></p><h3 id="HashMap多线程问题"><a href="#HashMap多线程问题" class="headerlink" title="HashMap多线程问题"></a>HashMap多线程问题</h3><p>HashMap在多线程情况下出现死循环主要是在1.7情况下面，存在多线程时候应该使用ConcurrentHashMap。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">void resize(int newCapacity) &#123;</span><br><span class="line">        Entry[] oldTable = table;</span><br><span class="line">        int oldCapacity = oldTable.length;</span><br><span class="line">        if (oldCapacity == MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Entry[] newTable = new Entry[newCapacity];</span><br><span class="line">        transfer(newTable, initHashSeedAsNeeded(newCapacity));</span><br><span class="line">        table = newTable;</span><br><span class="line">        threshold = (int)Math.min(newCapacity * loadFactor, MAXIMUM_CAPACITY + 1);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">void transfer(Entry[] newTable, boolean rehash) &#123;</span><br><span class="line">        int newCapacity = newTable.length;</span><br><span class="line">        for (Entry&lt;K,V&gt; e : table) &#123;</span><br><span class="line">            while(null != e) &#123;</span><br><span class="line">                Entry&lt;K,V&gt; next = e.next;</span><br><span class="line">                //循环取出原数组中每一个链表，e本身也是一个链表的节点，同时包含下一个节点的连接,</span><br><span class="line">                //此处e表示第一个节点，next表示链表的下一个节点</span><br><span class="line">                if (rehash) &#123;</span><br><span class="line">                    e.hash = null == e.key ? 0 : hash(e.key);</span><br><span class="line">                &#125;</span><br><span class="line">                int i = indexFor(e.hash, newCapacity);</span><br><span class="line">               //计算在新数组中的存储位置</span><br><span class="line">                e.next = newTable[i];</span><br><span class="line">                //将原数组链表的第一个元素的next指向新数组，若新数组中已经存在元素，</span><br><span class="line">                //则这个元素为第一个元素，next属性为原节点地址</span><br><span class="line">                newTable[i] = e;</span><br><span class="line">                //将新数组的头节点指向e，此时e(原数组中的第一个元素)已经成功的转移到了新数据中</span><br><span class="line">                e = next;</span><br><span class="line">                //继续处理原数组中剩下的节点</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>参考<a href="https://www.jianshu.com/p/1ff9f3dee207" target="_blank" rel="noopener">https://www.jianshu.com/p/1ff9f3dee207</a></p><h3 id="HashMap和HashTable"><a href="#HashMap和HashTable" class="headerlink" title="HashMap和HashTable"></a>HashMap和HashTable</h3><ol><li>Hashtable 中的方法是同步的，而HashMap中的方法在缺省情况下是非同步的。 </li><li>Hashtable中，key和value都不允许出现null值。在HashMap中，null可以作为键，这样的键只有一个；可以有一个或多个键所对应的值为null。</li><li>并发性不如ConcurrentHashMap，因为ConcurrentHashMap引入了分段锁。Hashtable不建议在新代码中使用，不需要线程安全的场合可以用HashMap替换，需要线程安全的场合可以用ConcurrentHashMap替换。</li></ol><h3 id="HashTable和synchronizedMap和ConcurrentHashMap"><a href="#HashTable和synchronizedMap和ConcurrentHashMap" class="headerlink" title="HashTable和synchronizedMap和ConcurrentHashMap"></a>HashTable和synchronizedMap和ConcurrentHashMap</h3><p>HashTable、synchronizedMap效率低下</p><ol><li><p>现在基本不用HashTable。HashTable容器使用synchronized来保证线程安全，但是锁的是整个hash表，当一个线程使用 put 方法时，另一个线程不但不可以使用 put 方法，连 get 方法都不可以。</p></li><li><p>synchronizedMap比HashTable强一分钱，synchronizedMap提供一个不同步的基类和一个同步的包装。允许需要同步的用户可以拥有同步，而不需要同步的用户则不必为同步付出代价，get方法与HashTable一样锁住整个hash表，区别是get()和put()之类的简单操作可以在不需要额外同步的情况下安全地完成。但多个操作组成的操作序列却可能导致数据争用，总之就是不好用。</p></li></ol><p>ConcurrentHashMap效率高，因为用了分段锁（JDK8之前），16个</p><ol><li>HashTable容器在竞争激烈的并发环境下表现出效率低下的原因是所有访问HashTable的线程都必须竞争同一把锁</li><li>那假如容器里有多把锁，每一把锁用于锁容器其中一部分数据，那么当多线程访问容器里不同数据段的数据时，线程间就不会存在锁竞争，从而可以有效的提高并发访问效率</li><li>这就是 ConcurrentHashMap所使用的锁分段技术，首先将数据分成一段一段的存储，默认分成16个段，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段数据的时候，其他段的数据也能被其他线程访问。</li><li>上面说到的16个线程指的是写线程，而读操作大部分时候都不需要用到锁。只有在size等操作时才需要锁住整个hash表。</li></ol><h3 id="ConcurrentHashMap-JDK1-8"><a href="#ConcurrentHashMap-JDK1-8" class="headerlink" title="ConcurrentHashMap JDK1.8"></a>ConcurrentHashMap JDK1.8</h3><p>基本结构：Node&lt;K,V&gt;数组+链表（红黑树）的结构。</p><ol><li>而对于锁的粒度，调整为对每个数组元素加锁（Node），即没有分段锁了，而是Node锁，粒度更小。</li><li>使用CAS操作来确保Node的一些操作的原子性，这种方式代替了锁。</li><li>ConcurrentHashMap在线程安全的基础上提供了更好的写并发能力，但同时降低了读一致性。ConcurrentHashMap的get操作上面并没有加锁。所以在多线程操作的过程中，并不能完全的保证一致性。这里和1.7当中类似，是弱一致性的体现。</li><li>代码中使用synchronized而不是ReentrantLock，说明JDK8中synchronized有了足够的优化。</li><li>然后是定位节点的hash算法被简化了，这样带来的弊端是Hash冲突会加剧。</li><li>因此在链表节点数量大于8时，会将链表转化为红黑树进行存储。这样一来，查询的时间复杂度就会由原先的O(n)变为O(logN)。</li><li>ConcurrentHashMap的设计与实现非常精巧，大量的利用了volatile，final，CAS等lock-free技术来减少锁竞争对于性能的影响。</li><li>HashEntry中的value以及next都被volatile修饰，这样在多线程读写过程中能够保持它们的可见性。</li></ol><h3 id="HashMap读取与写入"><a href="#HashMap读取与写入" class="headerlink" title="HashMap读取与写入"></a>HashMap读取与写入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public V get(Object key) &#123;</span><br><span class="line">        Node&lt;K,V&gt; e;</span><br><span class="line">        return (e = getNode(hash(key), key)) == null ? null : e.value;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">final Node&lt;K,V&gt; getNode(int hash, Object key) &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; int n; K k;</span><br><span class="line">        if ((tab = table) != null &amp;&amp; (n = tab.length) &gt; 0 &amp;&amp;</span><br><span class="line">            (first = tab[(n - 1) &amp; hash]) != null) &#123;</span><br><span class="line">            if (first.hash == hash &amp;&amp; // always check first node</span><br><span class="line">                ((k = first.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class="line">                return first;</span><br><span class="line">            if ((e = first.next) != null) &#123;</span><br><span class="line">                if (first instanceof TreeNode)</span><br><span class="line">                    return ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">                do &#123;</span><br><span class="line">                    if (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class="line">                        return e;</span><br><span class="line">                &#125; while ((e = e.next) != null);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">        <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            n = (tab = resize()).length;</span><br><span class="line">        <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">            tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;K,V&gt; e; K k;</span><br><span class="line">            <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">                ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                e = p;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                        <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                            treeifyBin(tab, hash);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    p = e;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">                V oldValue = e.value;</span><br><span class="line">                <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                    e.value = value;</span><br><span class="line">                afterNodeAccess(e);</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ++modCount;</span><br><span class="line">        <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">            resize();</span><br><span class="line">        afterNodeInsertion(evict);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;HashMap实现原理&quot;&gt;&lt;a href=&quot;#HashMap实现原理&quot; class=&quot;headerlink&quot; title=&quot;HashMap实现原理&quot;&gt;&lt;/a&gt;HashMap实现原理&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;20196301206.png&quot; alt=&quot;ha
      
    
    </summary>
    
      <category term="Java" scheme="http://ylovex.cn/categories/Java/"/>
    
    
      <category term="Java" scheme="http://ylovex.cn/tags/Java/"/>
    
      <category term="Map" scheme="http://ylovex.cn/tags/Map/"/>
    
  </entry>
  
  <entry>
    <title>Java 基础知识</title>
    <link href="http://ylovex.cn/2019/06/28/java-%E5%9F%BA%E7%A1%80/"/>
    <id>http://ylovex.cn/2019/06/28/java-基础/</id>
    <published>2019-06-28T13:43:41.000Z</published>
    <updated>2019-06-29T14:40:40.335Z</updated>
    
    <content type="html"><![CDATA[<h3 id="面向对象和面向过程"><a href="#面向对象和面向过程" class="headerlink" title="面向对象和面向过程"></a>面向对象和面向过程</h3><ol><li>面向过程：是一种是事件为中心的编程思想。就是分析出解决问题所需的步骤，然后用函数把这写步骤实现，并按顺序调用。</li><li>面向对象：是以“对象”为中心的编程思想。</li><li>面向对象三大特性：封装、继承、多态。因为一切皆对象，所以一切都需要“封装”成类。“继承”让我们设计相似的东西的时候更方便，而“多态”让我们使用类似的东西的时候可以不用去思考它们微弱的不同。我们关心的不是过程，而是接口，而接口来自对象，故名为面向对象。</li></ol><h3 id="封装、继承、多态"><a href="#封装、继承、多态" class="headerlink" title="封装、继承、多态"></a>封装、继承、多态</h3><ol><li>封装：通过隐藏类的内部实现机制，对外界提供已经定义好的接口进行访问。对外界而言它的内部细节是隐藏的，暴露给外界的只是它的访问方法。</li><li>继承：是从已有的类得到继承信息创建新的类的过程，继承可以表示为is-a关系，让我们设计相似的东西的时候更加的方便。</li><li>多态：可以分为方法重载和方法重写两种方式，方法重载是在编译时的多态性（也就是前绑定），方法可以根据不同参数类型进行不同的调用，方法名字一致；方法重写是运行时多态（也称为后绑定），实现方法重写：1.方法重写，子类继承父类并重写父类方法；2.用父类型引用来引用子类型对象，实现调用同样的方法会根据子类对象的不同表示出不一样的行为。</li></ol><h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><ol><li><p>Java的反射机制允许我们动态的调用某个对象的方法、构造函数、获取某个对象的属性等；</p></li><li><p>无需在编码的时候确定调用的对象</p></li><li><p>实现方式：</p><ol><li><p>先获取这个类的class实例，比如:Class&lt;?&gt; myClass =Class.<strong>forName</strong>(“myClassName”);</p></li><li><p>然后通过这个类实例获得一个类对象，比如：Object myClassObject = myClass.newInstance();</p></li><li><p>然后调用Class类的对象的<strong>getMethod</strong>获取method对象;</p></li><li><p>获取method对象后调用method.<strong>invoke</strong>方法获取这个类的field、method、construct等，在这一步中，JVM默认如果调用次数小于15次，会调用native方法实现反射，累积调用大于15次之后，会由java代码创建出字节码来实现反射。</p></li></ol></li></ol><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><h5 id="实现了Collection接口的集合类："><a href="#实现了Collection接口的集合类：" class="headerlink" title="实现了Collection接口的集合类："></a>实现了Collection接口的集合类：</h5><ol><li><p>Collection&lt;–List&lt;–Vector</p></li><li><p>Collection&lt;–List&lt;–ArrayList</p></li><li><p>Collection&lt;–List&lt;–LinkedList</p></li><li><p>Collection&lt;–Set&lt;–HashSet </p></li><li><p>Collection&lt;–Set&lt;–HashSet&lt;–LinkedHashSet</p></li><li><p>Collection&lt;–Set&lt;–SortedSet&lt;–TreeSet</p></li></ol><h5 id="实现了Map接口，和Collection接口没关系，但都属于集合类的一部分："><a href="#实现了Map接口，和Collection接口没关系，但都属于集合类的一部分：" class="headerlink" title="实现了Map接口，和Collection接口没关系，但都属于集合类的一部分："></a>实现了Map接口，和Collection接口没关系，但都属于集合类的一部分：</h5><ol><li><p>HashMap</p></li><li><p>HashTable</p></li><li><p>LinkedHashMap</p></li><li><p>TreeMap</p></li><li><p>SynchronizedMap</p></li><li><p>ConcurrentHashMap</p></li><li></li></ol><h3 id="final和static"><a href="#final和static" class="headerlink" title="final和static"></a>final和static</h3><h5 id="被final声明的对象即表示“我不想这个对象再被改变”，因此："><a href="#被final声明的对象即表示“我不想这个对象再被改变”，因此：" class="headerlink" title="被final声明的对象即表示“我不想这个对象再被改变”，因此："></a>被final声明的对象即表示“我不想这个对象再被改变”，因此：</h5><ol><li>被final声明的方法：这个方法不可以被子类重写</li><li>被final声明的类：这个类不能被继承</li><li>被final声明的变量：引用不能改变，常和static关键字一起使用作为常量<br>final关键字的好处：</li><li>final关键字提高了性能。JVM和Java应用都会缓存final变量。</li><li>final变量可以安全的在多线程环境下进行共享，而不需要额外的同步开销。</li><li>使用final关键字，JVM会对方法、变量及类进行优化。</li></ol><h5 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h5><ol><li>final关键字提高了性能。JVM和Java应用都会缓存final变量。</li><li>final变量可以安全的在多线程环境下进行共享，而不需要额外的同步开销。</li><li>使用final关键字，JVM会对方法、变量及类进行优化。</li></ol><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ol><li><p>boolean byte char ：都是一个字节</p></li><li><p>short int long float double ：int是4个字节，负2的31次方到正2的31次方减1</p></li><li><p>String Enum Array</p></li><li><p>Object</p><p>ps：负数使用补码表示</p><p>Primitive type:  int,long,float…</p><p>Object: Integer,Long,Float,String…</p><p>Primitive type:</p><ol><li>值类型</li><li>用a==b判断相等</li></ol><p>Object：</p><ol><li>引用类型</li><li>用a==b判断是否为同一个Object</li><li>用a.equals(b),或者Obeject.equals(a,b)判断是否相等</li><li>两个Object如果不是同一个Object，即使值相等用==判断也是false</li></ol></li></ol><h3 id="数组和链表"><a href="#数组和链表" class="headerlink" title="数组和链表"></a>数组和链表</h3><h6 id="基于空间的考虑："><a href="#基于空间的考虑：" class="headerlink" title="基于空间的考虑："></a>基于空间的考虑：</h6><ol><li>数组的存储空间是静态，连续分布的，初始化的过大造成空间浪费，过小又将使空间溢出机会增多。而链表的存储空间是动态分布的，只要内存空间尚有空闲，就不会产生溢出；链表中每个节点出了数据域外，还有链域（指向下一个节点），这样空间利用率就会变高。</li><li>数组从栈中分配空间，对于程序员方便快速，但是自由度小。链表从堆中分配空间，自由度大但是申请管理比较麻烦。</li><li>数组中的数据在内存中按顺序存储的，而链表是随机存储的。</li></ol><h6 id="基于时间的考虑："><a href="#基于时间的考虑：" class="headerlink" title="基于时间的考虑："></a>基于时间的考虑：</h6><ol><li>数组查询快，插入与删除慢，单链表查询慢，插入与删除快。细说的话：数组中任意节点都可以在O（1）内直接存储访问，而链表中的节点，需从头指针顺着链表扫描才能获取到；而链表任意位置进行插入和删除，都只需要修改指针，而数组中插入删除节点，平均要移动一半的节点。</li></ol><h3 id="访问控制符"><a href="#访问控制符" class="headerlink" title="访问控制符"></a>访问控制符</h3><table><thead><tr><th></th><th>public</th><th>protected</th><th>defailt</th><th>private</th></tr></thead><tbody><tr><td>同一个类</td><td>True</td><td>True</td><td>True</td><td>True</td></tr><tr><td>同一个包</td><td>True</td><td>True</td><td>True</td><td>False</td></tr><tr><td>子父类</td><td>True</td><td>True</td><td>False</td><td>False</td></tr><tr><td>不同包</td><td>True</td><td>False</td><td>False</td><td>False</td></tr></tbody></table><h3 id="接口与抽象类"><a href="#接口与抽象类" class="headerlink" title="接口与抽象类"></a>接口与抽象类</h3><p>抽象类就是比普通类多了一些抽象方法而已，其他部分和普通类完全一样；而接口是特殊的抽象类。<br>作用上看：</p><ol><li><p>接口与抽象类结构有点像，但功能完全不同</p></li><li><p>接口是强调合约、约束关系，即你要与我合作，必须实现我的功能；抽象类没这个功能</p></li></ol><p>语法上看：</p><ol><li>都不能被实例化</li><li>接口是特殊的抽象类</li><li>接口不能有实现，Java8中可以有添加default关键字的默认实现和静态方法实现。</li><li>接口中的成员变量必须是public static final修饰（编译器默认会添加上），因此是常量</li><li>一个类可以实现多个接口但只能继承一个抽象类</li></ol><p>什么是接口？</p><ol><li>从表现来说：定义了很多函数，但是这些函数都没有实现，这就是接口。从作用来说：起到一个合约规范的作用。我要告诉你和我打交道的东西有什么约束</li><li>接口中的方法只能用public和abstract修饰或者不修饰</li><li>接口中的属性默认都是public static final，因此是常量</li></ol><h3 id="equal与"><a href="#equal与" class="headerlink" title="equal与=="></a>equal与==</h3><p>对于字符串变量：</p><p>==：比较两个对象在内存中的首地址</p><p>equals：比较字符串中所包含的内容是否相同</p><p>对于非字符串变量：</p><p>==和equals都是比较对象在堆内存中的首地址。</p><h3 id="装箱及拆箱"><a href="#装箱及拆箱" class="headerlink" title="装箱及拆箱"></a>装箱及拆箱</h3><p>Integer i = 10; //装箱</p><p>int n = i ;//拆箱</p><p>装箱就是自动将基本数据类型转换为包装器类型。</p><p>拆箱就是自动将包装器类型转换为基本数据类型。</p><h3 id="hashCode方法及作用"><a href="#hashCode方法及作用" class="headerlink" title="hashCode方法及作用"></a>hashCode方法及作用</h3><p>Java中的hashCode方法就是根据一定的规则将与对象相关的信息（比如对象的存储地址，对象的 字段等）映射成一个数值，这个数值称作为散列值。</p><p>1、在Java集合中有两类，一类是List，一类是Set。他们之间的区别就在于List集合中的元素是有序的，且可以重复，而Set集合中元素是无序不可重复的。对于List好处理，但是对于Set而言我们要如何来保证元素不重复呢？通过迭代来equals()是否相等。数据量小还可以接受，当我们的数据量大的时候效率可想而知<br>2、当集合要添加新的对象时，先调用这个对象的 hashCode方法，得到对应的hashcode值，实际上在HashMap的具体实现中会用一个table保存已经存进去的对象的hashcode 值，如果table中没有该hashcode值，它就可以直接存进去，不用再进行任何比较了；如果存在该hashcode值， 就调用它的equals方法与新元素进行比较，相同的话就不存了，不相同就散列其它的地址<br>3、所以hashCode在上面扮演的角色为快速寻域（寻找某个对象在集合中区域位置）</p><p>在重写equals方法的同时，必须重写hashCode方法。为什么这么说呢？<br>1、让equals方法和hashCode方法始终在逻辑上保持一致性<br>2、即让equals认为相等的两个对象，这两个对象同时调用hashCode方法，返回的值也是一样的</p><h3 id="Java8新特性"><a href="#Java8新特性" class="headerlink" title="Java8新特性"></a>Java8新特性</h3><p>Lambda 表达式 − Lambda允许把函数作为一个方法的参数（函数作为参数传递进方法中。</p><p>方法引用 − 方法引用提供了非常有用的语法，可以直接引用已有Java类或对象（实例）的方法或构造器。与lambda联合使用，方法引用可以使语言的构造更紧凑简洁，减少冗余代码。</p><p>默认方法 − 默认方法就是一个在接口里面有了一个实现的方法。</p><p>新工具 − 新的编译工具，如：Nashorn引擎 jjs、 类依赖分析器jdeps。</p><p>Stream API −新添加的Stream API（java.util.stream） 把真正的函数式编程风格引入到Java中。</p><p>Date Time API − 加强对日期与时间的处理。</p><p>Optional 类 − Optional 类已经成为 Java 8 类库的一部分，用来解决空指针异常。</p><p>Nashorn, JavaScript 引擎 − Java 8提供了一个新的Nashorn javascript引擎，它允许我们在JVM上运行特定的javascript应用。</p><h3 id="Java-NIO框架对比"><a href="#Java-NIO框架对比" class="headerlink" title="Java NIO框架对比"></a>Java NIO框架对比</h3><p>Mina</p><p>Mina(Multipurpose Infrastructure for Network Applications) 是 Apache 组织一个较新的项目，它为开发高性能和高可用性的网络应用程序提供了非常便利的框架。当前发行的 Mina 版本2.04支持基于 Java NIO 技术的 TCP/UDP 应用程序开发、串口通讯程序，Mina 所支持的功能也在进一步的扩展中。</p><p>Netty</p><p>Netty是一款异步的事件驱动的网络应用框架和工具，用于快速开发可维护的高性能、高扩展性协议服务器和客户端。也就是说，Netty是一个NIO客户端/服务器框架，支持快速、简单地开发网络应用，如协议服务器和客户端。它极大简化了网络编程，如TCP和UDP套接字服务器。</p><p>Grizzly</p><p>Grizzly是一种应用程序框架，专门解决编写成千上万用户访问服务器时候产生的各种问题。使用JAVA NIO作为基础，并隐藏其编程的复杂性。容易使用的高性能的API。带来非阻塞socketd到协议处理层。利用高性能的缓冲和缓冲管理使用高性能的线程池。</p><p>xSocket</p><p>xSocket是一个轻量级的基于nio的服务器框架用于开发高性能、可扩展、多线程的服务器。该框架封装了线程处理、异步读/写等方面。（只是对Java的NIO做了最简单的封装，以便于开发使用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;面向对象和面向过程&quot;&gt;&lt;a href=&quot;#面向对象和面向过程&quot; class=&quot;headerlink&quot; title=&quot;面向对象和面向过程&quot;&gt;&lt;/a&gt;面向对象和面向过程&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;面向过程：是一种是事件为中心的编程思想。就是分析出解决问题所需的步骤，然
      
    
    </summary>
    
      <category term="Java" scheme="http://ylovex.cn/categories/Java/"/>
    
    
      <category term="Java" scheme="http://ylovex.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>my first blog</title>
    <link href="http://ylovex.cn/2019/06/28/my-first-blog/"/>
    <id>http://ylovex.cn/2019/06/28/my-first-blog/</id>
    <published>2019-06-28T13:41:41.000Z</published>
    <updated>2019-06-29T14:47:25.595Z</updated>
    
    <content type="html"><![CDATA[<p>Desire is the starting point of all achievement</p><p>渴望是所有成就的原点。</p><p>love xy </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Desire is the starting point of all achievement&lt;/p&gt;
&lt;p&gt;渴望是所有成就的原点。&lt;/p&gt;
&lt;p&gt;love xy &lt;/p&gt;

      
    
    </summary>
    
      <category term="生活" scheme="http://ylovex.cn/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="Life" scheme="http://ylovex.cn/tags/Life/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://ylovex.cn/2019/06/28/hello-world/"/>
    <id>http://ylovex.cn/2019/06/28/hello-world/</id>
    <published>2019-06-28T05:32:33.400Z</published>
    <updated>2019-06-28T05:32:33.400Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
