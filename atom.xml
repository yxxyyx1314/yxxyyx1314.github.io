<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>myblog</title>
  
  <subtitle>Desire is the starting point of all achievement</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ylovex.cn/"/>
  <updated>2019-07-05T22:57:39.962Z</updated>
  <id>http://ylovex.cn/</id>
  
  <author>
    <name>Yang Peng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Redis设计与实现笔记三</title>
    <link href="http://ylovex.cn/2019/07/05/Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E7%AC%94%E8%AE%B0%E4%B8%89/"/>
    <id>http://ylovex.cn/2019/07/05/Redis设计与实现笔记三/</id>
    <published>2019-07-04T22:55:12.000Z</published>
    <updated>2019-07-05T22:57:39.962Z</updated>
    
    <content type="html"><![CDATA[<h3 id="字典："><a href="#字典：" class="headerlink" title="字典："></a>字典：</h3><p>又称符号表、关联数组、映射，是一种保存键值对的抽象数据结构。</p><p>Redis的字典使用哈希表作为底层实现，一个哈希表里面可以有多个哈希表节点，一个哈希表节点就保存了字典中的一个键值对。</p><h4 id="哈希表："><a href="#哈希表：" class="headerlink" title="哈希表："></a>哈希表：</h4><p>由dict.h/dictht结构定义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">typedef struct dictht&#123;</span><br><span class="line">    //哈希表数组</span><br><span class="line">    dictEntry **table;</span><br><span class="line">    //哈希表大小</span><br><span class="line">    unsigned long size;</span><br><span class="line">    //哈希表大小掩码，用于计算索引值</span><br><span class="line">    //总是等于size-1</span><br><span class="line">    unsigned long sizemask;</span><br><span class="line">    //该哈希表已有节点数量</span><br><span class="line">    unsigned long user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>table属性是一个数组，数组中的每个元素都是一个指向dict.h/dictEntry结构的指针，每个dictEntry结构保存一个键值对。size属性记录了哈希表的大小，也即是table数组的大小，而used属性则记录了哈希表目前已有节点的数量，sizemask属性的值总是等于size-1，这个属性和哈希值一起决定一个键应该被放在table数组的哪个索引上面。</p><h4 id="哈希表节点："><a href="#哈希表节点：" class="headerlink" title="哈希表节点："></a>哈希表节点：</h4><p>使用dictEntry结构，每个dictEntry结构都保存一个键值对。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">typedef struct dictEntry&#123;</span><br><span class="line">    //键</span><br><span class="line">    void *key;</span><br><span class="line">    //值</span><br><span class="line">    union&#123;</span><br><span class="line">        void *val;</span><br><span class="line">        uint64_t u64;</span><br><span class="line">        unt64_t s64;</span><br><span class="line">    &#125;v;</span><br><span class="line">    //指向下个哈希表节点，形成链表</span><br><span class="line">    strcut dictEntry *next;</span><br><span class="line">&#125;dictEntry;</span><br></pre></td></tr></table></figure><p>key属性保存键，v属性保存值，可以是指针、uint64_t、uint64_t。</p><p>next属性指向另一个哈希表节点指针，解决哈希冲突。</p><p><img src="201907050731.png" alt="201907050731"></p><h4 id="字典：-1"><a href="#字典：-1" class="headerlink" title="字典："></a>字典：</h4><p>由dict.h/dict结构表示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">typedef struct dict&#123;</span><br><span class="line">    //类型特定函数</span><br><span class="line">    sictType *type;</span><br><span class="line">    //私有数据</span><br><span class="line">    void *privtata;</span><br><span class="line">    //哈希表</span><br><span class="line">    dictht ht[2];</span><br><span class="line">    //rehash索引</span><br><span class="line">    //当rehash不在进行时，值为-1</span><br><span class="line">    int trehashidx;/*rehashing not in progress if rehashidx==-1 */</span><br><span class="line">&#125;dict;</span><br></pre></td></tr></table></figure><p>type属性和privdata属性是针对不同的类型的键值对，为创建多态字典而设置的：</p><p>type属性是一个指向dictType结构的指针，每个dictType结构保存了一簇用于操作特定类型键值对的函数，Redis会为用途不同的字典设置不同的类型特定函数。</p><p>privdata属性则保存了需要传给那些类型特定函数的可选参数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">typedef struct dictType&#123;</span><br><span class="line">    //计算哈希值的函数</span><br><span class="line">    unsigned int (*hashFunction)(const void *key);</span><br><span class="line">    //复制键的函数</span><br><span class="line">    void *(*keyDup)(void *privdata,const void *key);</span><br><span class="line">    //复制值的函数</span><br><span class="line">    void *(*valDup)(void *privdata,const void *obj);</span><br><span class="line">    //对比键的函数</span><br><span class="line">    int (*keyCompare)(void *privdata,const void *key1.const void *key2);</span><br><span class="line">    //销毁键的函数</span><br><span class="line">    void (*keyDestructor)(void *prevdata,void *key);</span><br><span class="line">    //销毁值的函数</span><br><span class="line">    void (*valDestructor)(void *prevdata,void *obj);</span><br><span class="line">&#125;dictType；</span><br></pre></td></tr></table></figure><p>ht属性是一个包含两项的数组，数组的每一项都是一个dictht哈希表，一般，字典只使用ht[0]，ht[1]用于对ht[0]rehash。</p><p><img src="201907050732.png" alt="201907050732"></p><h3 id="哈希算法："><a href="#哈希算法：" class="headerlink" title="哈希算法："></a>哈希算法：</h3><p>Redis计算哈希值和索引值方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//使用字典设置的哈希函数，计算键key的哈希值</span><br><span class="line">hash = dict-&gt;type-&gt;hashFunction(key);</span><br><span class="line">//使用哈希值的sizemask属性和哈希值，计算索引</span><br><span class="line">//根据情况不同，ht[x]可以是hx[0]或者ht[1]</span><br><span class="line">index = hash &amp; dict-&gt;ht[x].sizemask;</span><br></pre></td></tr></table></figure><h3 id="解决键冲突："><a href="#解决键冲突：" class="headerlink" title="解决键冲突："></a>解决键冲突：</h3><p>当有两个或者以上数量的键被分配到哈希表数组的同一个索引上面的时候，产生了冲突。</p><p>使用链地址法来解决键冲突，每个哈希表节点都有一个next指针，多个哈希表节点可以用next指针构成一个单向链表，被分配到同一个索引上的多个节点可以用这个单向链表连接起来，从而解决键冲突。</p><p>新节点总是添加到链表的表头位置（复杂度为O(1)）</p><h3 id="rehash"><a href="#rehash" class="headerlink" title="rehash:"></a>rehash:</h3><p>扩展和收缩哈希表通过rehash（重新散列）完成</p><ol><li><p>为字典的ht[1]哈希表分配空间，这个哈希表的空间大小取决于要执行的操作，以及ht[0]当前包含的键值对数量（也即是ht[0].used属性值）</p><p>如果执行的是扩展操作，那么ht[1]的大小为第一个大于等于ht[0].used*2的2^n值</p><p>如果执行的收缩，那么ht[1]的大小是第一个大于等于ht[0].used的2^n值</p></li><li><p>将保存在ht[0]中的所有键值对rehash到ht[1]上面：rehash指的是重新计算键的哈希值和索引值，然后将键值对放在ht[1]哈希表指定位置</p></li><li><p>当ht[0]包含所有键值对都迁移到ht[1]后，释放ht[0]，将ht[1]设置为ht[0]，并在ht[1]新建一个空白哈希表，为下一次rehash做准备。</p></li></ol><h3 id="哈希表的扩展与收缩："><a href="#哈希表的扩展与收缩：" class="headerlink" title="哈希表的扩展与收缩："></a>哈希表的扩展与收缩：</h3><p>哈希表的负载因子=哈希表已保存节点数量/哈希表大小</p><h3 id="渐进式rehash"><a href="#渐进式rehash" class="headerlink" title="渐进式rehash"></a>渐进式rehash</h3><p>为了避免rehash对服务器性能造成影响，服务器不是一次性将ht[0]里面的所有键值对全部rehash到ht[1],二十分多次、渐进式地将ht[0]里面的键值对慢慢rehash。</p><p>在渐进式rehash进行期间，字典的删除、查找、更新等操作会在两个哈希表进行</p><p>渐进式rehash期间，新添加到字典的键值对一律会保存到ht[1]中</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;字典：&quot;&gt;&lt;a href=&quot;#字典：&quot; class=&quot;headerlink&quot; title=&quot;字典：&quot;&gt;&lt;/a&gt;字典：&lt;/h3&gt;&lt;p&gt;又称符号表、关联数组、映射，是一种保存键值对的抽象数据结构。&lt;/p&gt;
&lt;p&gt;Redis的字典使用哈希表作为底层实现，一个哈希表里面可
      
    
    </summary>
    
      <category term="Redis" scheme="http://ylovex.cn/categories/Redis/"/>
    
    
      <category term="Redis" scheme="http://ylovex.cn/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis设计与实现笔记二</title>
    <link href="http://ylovex.cn/2019/07/03/Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E7%AC%94%E8%AE%B0%E4%BA%8C/"/>
    <id>http://ylovex.cn/2019/07/03/Redis设计与实现笔记二/</id>
    <published>2019-07-03T04:52:07.000Z</published>
    <updated>2019-07-04T05:33:37.376Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链表："><a href="#链表：" class="headerlink" title="链表："></a>链表：</h3><h4 id="链表和链表节点的实现："><a href="#链表和链表节点的实现：" class="headerlink" title="链表和链表节点的实现："></a>链表和链表节点的实现：</h4><p>链表节点使用一个adlist.h/listNode结构表示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">typedef struct listNode&#123;</span><br><span class="line">    //前置节点</span><br><span class="line">    struct listNode *prev;</span><br><span class="line">    //后置节点</span><br><span class="line">    struct listNode *next;</span><br><span class="line">    //节点的值</span><br><span class="line">    void *value;</span><br><span class="line">&#125;listNode;</span><br></pre></td></tr></table></figure><p>多个listNode可以通过prev和next指针组成双端链表。</p><p><img src="201907020905.png" alt="201907020905"></p><p>使用adlist.h/list来持有链表。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">typedef struct list&#123;</span><br><span class="line">    //表头节点</span><br><span class="line">    listNode *head;</span><br><span class="line">    //表尾节点</span><br><span class="line">    listNode *tail;</span><br><span class="line">    //链表所包含的节点数量</span><br><span class="line">    unsigned long len;</span><br><span class="line">    //节点值复制函数</span><br><span class="line">    void *(*dup)(void *ptr);</span><br><span class="line">    //节点值释放函数</span><br><span class="line">    void *(*free)(void *ptr);</span><br><span class="line">    //节点值对比函数</span><br><span class="line">    int (*match)(void *pre , void *key);</span><br><span class="line">&#125;list;</span><br></pre></td></tr></table></figure><p><img src="201907020916.png" alt="201907020916"></p><p>上图是一个由list结构和三个listNode结构组成的链表。</p><h4 id="Redis链表实现特性"><a href="#Redis链表实现特性" class="headerlink" title="Redis链表实现特性:"></a>Redis链表实现特性:</h4><ol><li>双端：链表节点带有prev和next指针，获取某个节点的前置和后置复杂度都是O(1)</li><li>无环：表头节点的prev和表尾的next都指向NULL，对链表访问都以NULL为终点</li><li>带表头指针和表尾指针：通过list结构的head指针和tail指针，程序获取链表的表头节点和表尾节点都是O(1)</li><li>带链表长度计数器：获取链表中节点数量的复杂度为O(1)</li><li>多态：链表节点使用void* 指针来保存节点值，并且可以通过list结构的dup、free、match三个属性为节点值设置类型特定函数，所以链表可以用于保存各种不同类型的值。 </li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;链表：&quot;&gt;&lt;a href=&quot;#链表：&quot; class=&quot;headerlink&quot; title=&quot;链表：&quot;&gt;&lt;/a&gt;链表：&lt;/h3&gt;&lt;h4 id=&quot;链表和链表节点的实现：&quot;&gt;&lt;a href=&quot;#链表和链表节点的实现：&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="Redis" scheme="http://ylovex.cn/categories/Redis/"/>
    
    
      <category term="Redis" scheme="http://ylovex.cn/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis设计与实现笔记一</title>
    <link href="http://ylovex.cn/2019/07/01/Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E7%AC%94%E8%AE%B0%E4%B8%80/"/>
    <id>http://ylovex.cn/2019/07/01/Redis设计与实现笔记一/</id>
    <published>2019-07-01T13:33:42.000Z</published>
    <updated>2019-07-04T05:33:28.102Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简单动态字符串："><a href="#简单动态字符串：" class="headerlink" title="简单动态字符串："></a>简单动态字符串：</h3><p>Redis并没有直接使用C语音传统的字符串（以空字符串结尾的字符数组），而是构建了一种名为简单动态字符串（simple dynamic string ， SDS）的抽象类型。</p><p>每个sds.h/sdshdr结构表示一个SDS值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">struct sdshdr&#123;</span><br><span class="line">    //记录buf数组中已使用字节的数量</span><br><span class="line">    //等于SDS所保存字符串的长度</span><br><span class="line">    int len;</span><br><span class="line">    </span><br><span class="line">    //记录buf数组中未使用字节的数量</span><br><span class="line">    int free;</span><br><span class="line">    </span><br><span class="line">    //字节数组，用于保存字符串</span><br><span class="line">    char buf[];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>下图展示了一个SDS示例：</p><p><img src="1561985098307.png" alt="1561985098307"></p><p>其中：</p><ol><li>free属性的值为0，表示这个SDS没有分配任何未使用的空间</li><li>len属性的值为5，表示这个SDS保存一个5字节长的字符串</li><li>buf属性是一个char类型的数组，最后以空字符‘\0’。</li></ol><p>SDS遵循C字符串以空字符结尾的惯例，保存的空字符的1字节不计算在SDS的len属性中，并且为空字符分配额外的1字节空间，以及添加空字符到字符末尾等操作都是SDS自动完成，对使用者完成透明，遵循空字符结尾可以重用一部分C字符串函数库里面的函数。</p><h4 id="SDS优点："><a href="#SDS优点：" class="headerlink" title="SDS优点："></a>SDS优点：</h4><h5 id="常数复杂度获取字符串的长度："><a href="#常数复杂度获取字符串的长度：" class="headerlink" title="常数复杂度获取字符串的长度："></a>常数复杂度获取字符串的长度：</h5><p>通过使用SDS而不是C字符串，Redis将获取字符串长度所需要的复杂度从O(n)降低到了O(1)。</p><h5 id="杜绝缓冲区溢出："><a href="#杜绝缓冲区溢出：" class="headerlink" title="杜绝缓冲区溢出："></a>杜绝缓冲区溢出：</h5><p>当SDS API需要对SDS进行修改时候，API会先检查SDS空间是否满足修改所需的要求，如果不满足的话，API会自动将SDS空间扩展至执行修改所需的大小，然后才执行实际的修改操作。</p><h5 id="减少修改字符串时候带来的内存重分配次数："><a href="#减少修改字符串时候带来的内存重分配次数：" class="headerlink" title="减少修改字符串时候带来的内存重分配次数："></a>减少修改字符串时候带来的内存重分配次数：</h5><p>对于一个包含N个字符的C字符串，这个C字符串的底层实现总是一个N+1个字符长的数组（额外的一个字符空间用于保存空字符），因为C字符串的长度和底层数组的长度之间存在这种关联，所以每次增长或者缩短一个C字符串，程序都总要对保存这个C字符串的数组进行一个内存重分配操作：</p><ol><li>如果程序执行的是增长字符串操作，比如拼接（append），那么在执行这个操作之前，程序需要先通过内存重分配来扩展底层数组的空间大小—如果忘了这一步就会产生缓冲区溢出。</li><li>如果程序执行的就是缩短字符串操作，比如截断（trim），那么在执行这个操作之后，程序需要通过内存重分配来释放字符串不再使用的那部分空间—如果忘了这步就会产生内存泄漏。</li></ol><p>为了避免C字符串这种缺陷，SDS通过未使用空间解除了字符串长度和底层数组长度的关联，在SDS中，buf数组的长度不一定是字符数量加一，数组里面可以包含未使用的字节，而这个未使用的字节由SDS的free属性记录。</p><p>通过未使用空间，SDS实现了空间预分配和惰性空间释放两种优化策略。</p><h6 id="空间预分配："><a href="#空间预分配：" class="headerlink" title="空间预分配："></a>空间预分配：</h6><p>空间预分配用于优化SDS字符串增长操作：当SDS的API对一个SDS进行修改，并且需要对SDS进行空间扩展的时候，程序不仅会为SDS分配修改所必须的空间的时候，还会为SDS分配额外的未使用空间。</p><p>其中，额外分配的未使用空间数量由以下公式决定：</p><ol><li>如果对SDS进行修改之后，SDS的的长度将小于1MB，那么程序分配和len属性同样大小的未使用空间。</li><li>如何对SDS进行修改后，SDS的长度将大于等于1MB，那么程序会分配1MB的未使用空间。</li></ol><p>通过空间预分配策略，Redis可以减少连续执行字符串增长操作所需要的内存重分配次数。</p><h6 id="惰性空间释放："><a href="#惰性空间释放：" class="headerlink" title="惰性空间释放："></a>惰性空间释放：</h6><p>惰性空间释放用于优化SDS字符串缩短操作：当SDS的API需要缩短的SDS保存的字符串时候，程序并不立即使用内存重分配来回收缩短后多出来的字节，而是使用free属性将这些字节数量记录起来，并等到将来使用。</p><h5 id="二进制安全："><a href="#二进制安全：" class="headerlink" title="二进制安全："></a>二进制安全：</h5><p>C字符中的字符必须符合某种编码（比如ASCII），并且除了字符串的末尾之外，字符串里面不能包含空字符，否则最先被程序读入的空字符将被误认为是字符串结尾，这些限制使C字符只能保存文本数据，不能保存像图像、音频、视频、压缩文件这样的二进制数据。</p><p>SDS的API都是二进制安全的，所有SDS API都会处理二进制的方式来处理SDS存放在buf数组里的数据，程序不会对其中的数据做任何限制、过滤、或者假设，数据在写入是什么样，被读取就是什么样。</p><h5 id="兼容部分C字符串函数："><a href="#兼容部分C字符串函数：" class="headerlink" title="兼容部分C字符串函数："></a>兼容部分C字符串函数：</h5><p>通过遵循C字符串以空字符结尾的惯例，SDS可以在有需要时重用&lt;string.h&gt;函数库，从而避免了不必要的代码重复。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;简单动态字符串：&quot;&gt;&lt;a href=&quot;#简单动态字符串：&quot; class=&quot;headerlink&quot; title=&quot;简单动态字符串：&quot;&gt;&lt;/a&gt;简单动态字符串：&lt;/h3&gt;&lt;p&gt;Redis并没有直接使用C语音传统的字符串（以空字符串结尾的字符数组），而是构建了一种名为简
      
    
    </summary>
    
      <category term="Redis" scheme="http://ylovex.cn/categories/Redis/"/>
    
    
      <category term="Redis" scheme="http://ylovex.cn/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>jvm自动内存管理机制</title>
    <link href="http://ylovex.cn/2019/06/28/jvm%E8%87%AA%E5%8A%A8%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E6%9C%BA%E5%88%B6/"/>
    <id>http://ylovex.cn/2019/06/28/jvm自动内存管理机制/</id>
    <published>2019-06-28T00:11:47.000Z</published>
    <updated>2019-07-04T05:32:44.108Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JVM组成："><a href="#JVM组成：" class="headerlink" title="JVM组成："></a>JVM组成：</h3><p>JVM 由类加载器子系统、运行时数据区、执行引擎以及本地方法接口组成。</p><p><img src="201907030747.png" alt="201907030747"></p><h3 id="运行时数据区域："><a href="#运行时数据区域：" class="headerlink" title="运行时数据区域："></a>运行时数据区域：</h3><p>Java虚拟机在执行Java程序的过程中会把它所管理的内存划分为若干个不同的数据区域。这些区域都有各自的用途，以及创建和销毁的时间，有的区域随着虚拟机进程的启动而存在，有些区域则依赖用户线程的启动和结束而建立和销毁。</p><h5 id="程序计数器："><a href="#程序计数器：" class="headerlink" title="程序计数器："></a>程序计数器：</h5><p>是当前线程所执行的字节码的行号指示器。字节码解释器工作时候通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复都依赖该计数器。</p><p>线程私有，此内存区域是唯一一个在Java虚拟机规范中没有规定任何OutOfMemoryError情况区域。</p><h5 id="Java虚拟机栈："><a href="#Java虚拟机栈：" class="headerlink" title="Java虚拟机栈："></a>Java虚拟机栈：</h5><p>存储局部变量表、操作数栈、动态链接、方法出口等信息。</p><p>线程私有。</p><p>局部变量表存放编译期可知的各种基本数据类型、对象引用和returnAddress类型（指向一条字节码指令地址）。</p><p>其中64位长度的long和double类型数据占用2个局部变量空间（slot），其余数据类型只占1个字节。</p><h5 id="本地方法栈："><a href="#本地方法栈：" class="headerlink" title="本地方法栈："></a>本地方法栈：</h5><p>虚拟机栈为虚拟机执行Java方法（字节码）服务，本地方法栈为虚拟机使用Native方法服务。</p><h5 id="Java堆："><a href="#Java堆：" class="headerlink" title="Java堆："></a>Java堆：</h5><p>存放对象实例，是垃圾收集器管理的主要区域。</p><p>线程共享。</p><h5 id="方法区："><a href="#方法区：" class="headerlink" title="方法区："></a>方法区：</h5><p>存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</p><p>线程共享。</p><h5 id="运行时常量池："><a href="#运行时常量池：" class="headerlink" title="运行时常量池："></a>运行时常量池：</h5><p>是方法区的一部分。具有动态性，不仅预置入Class文件中常量池的内容可以进入方法区运行时常量池，运行期间也可以将新的常量放入池中。</p><h3 id="对象的创建："><a href="#对象的创建：" class="headerlink" title="对象的创建："></a>对象的创建：</h3><ol><li>虚拟机遇到一条new指令时，会先去常量池检测能否找到new对应的类的符号引用，并检测这个类是否加载、初始化。</li><li>如果加载检查通过，则分配内存。分配内存有两种方式：⑴指针碰撞，针对连续内存区域；⑵空闲列表，针对不连续内存区域</li><li>内存分配完之后，会对内存初始化零值，保证实例字段能在java代码不赋初值也能使用。</li><li>接下来对对象信息进行设置，把类的元数据信息、对象的哈希吗、对象的GC分代年龄等信息存放在对象头之中</li><li>最后执行用户的Init方法</li></ol><h3 id="对象的内存布局："><a href="#对象的内存布局：" class="headerlink" title="对象的内存布局："></a>对象的内存布局：</h3><ol><li>分为三部分，对象头、实例数据、对齐填充</li><li>对象头：⑴对象自身运行时数据，如哈希吗、GC分代年龄、锁状态标志、线程持有的锁等。⑵类型指针，虚拟机通过这个来确定这个对象是哪个类的实例。⑶如果对象是一个Java数组，那么对象头中还必须有一块用于记录数组长度的数据。</li><li>实例数据：对象真正存储的有效信息，也是在程序代码中定义的各种类型的字段内容。</li><li>对齐填充：JVM要求对象的起始地址必须是8字节的整数倍，因此当对象实例数据没有对齐时，这部分来补全。</li></ol><h3 id="对象的访问定位："><a href="#对象的访问定位：" class="headerlink" title="对象的访问定位："></a>对象的访问定位：</h3><h5 id="使用句柄访问："><a href="#使用句柄访问：" class="headerlink" title="使用句柄访问："></a>使用句柄访问：</h5><p>Java堆中会划分一块内存作为句柄池，reference中存储的就是对象的句柄地址，而句柄中包含了对象实例数据与类型数据各自的具体地址信息。</p><p><img src="201907030826.png" alt="201907030826"></p><h5 id="直接指针访问："><a href="#直接指针访问：" class="headerlink" title="直接指针访问："></a>直接指针访问：</h5><p>那么Java堆对象的布局中就必须考虑如何放置访问类型数据的 相关信息，而reference中存储的直接就是对象地址</p><p><img src="201907030827.png" alt="201907030827"></p><h3 id="Java垃圾回收区域："><a href="#Java垃圾回收区域：" class="headerlink" title="Java垃圾回收区域："></a>Java垃圾回收区域：</h3><ol><li>Java垃圾回收只针对堆和方法区的内存。</li><li>程序计数器、虚拟机栈、本地方法栈随线程而生，随线程而灭，因此不用管。</li></ol><p><img src="201907030830.png" alt="201907030830"></p><h3 id="如何确认垃圾："><a href="#如何确认垃圾：" class="headerlink" title="如何确认垃圾："></a>如何确认垃圾：</h3><h5 id="引用计数算法："><a href="#引用计数算法：" class="headerlink" title="引用计数算法："></a>引用计数算法：</h5><p>给对象中添加一个引用计数器，每当有 一个地方引用它时，计数器值就加1；当引用失效时，计数器值就减1；任何时刻计数器为0 的对象就是不可能再被使用的。</p><h5 id="可达性分析算法："><a href="#可达性分析算法：" class="headerlink" title="可达性分析算法："></a>可达性分析算法：</h5><p>这个算法的基本思 路就是通过一系列的称为“GC Roots”的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链（Reference Chain），当一个对象到GC Roots没有任何引用链相连 （用图论的话来说，就是从GC Roots到这个对象不可达）时，则证明此对象是不可用的。如图所示，对象object 5、object 6、object 7虽然互相有关联，但是它们到GC Roots是不可达 的，所以它们将会被判定为是可回收的对象。</p><p><img src="201907030836.png" alt="201907030836"></p><p>可作为GC Roots对象有：</p><ol><li>虚拟机栈（栈帧中的本地变量表）中引用的对象。 </li><li>方法区中类静态属性引用的对象。 </li><li>方法区中常量引用的对象。 </li><li>本地方法栈中JNI（即一般说的Native方法）引用的对象。</li></ol><h3 id="垃圾回收算法："><a href="#垃圾回收算法：" class="headerlink" title="垃圾回收算法："></a>垃圾回收算法：</h3><h5 id="标记-清除算法："><a href="#标记-清除算法：" class="headerlink" title="标记-清除算法："></a>标记-清除算法：</h5><p>首先标记出所有需要回收的对象，在标记完成后统一回收所有 被标记的对象。</p><p>不足有两个：一个是效率问题，标记和清除两个过程的效率都不高；另一个是 空间问题，标记清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致以后在程序运行过程中需要分配较大对象时，无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。</p><h5 id="复制算法："><a href="#复制算法：" class="headerlink" title="复制算法："></a>复制算法：</h5><p>它将可用内存按容 量划分为大小相等的两块，每次只使用其中的一块。当这一块的内存用完了，就将还存活着 的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。这样使得每次都是 对整个半区进行内存回收，内存分配时也就不用考虑内存碎片等复杂情况，只要移动堆顶指 针，按顺序分配内存即可，实现简单，运行高效。只是这种算法的代价是将内存缩小为了原来的一半。</p><h5 id="标记-整理算法："><a href="#标记-整理算法：" class="headerlink" title="标记-整理算法："></a>标记-整理算法：</h5><p>标记过程仍然与“标记-清除”算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存 活的对象都向一端移动，然后直接清理掉端边界以外的内存。</p><h5 id="分代收集："><a href="#分代收集：" class="headerlink" title="分代收集："></a>分代收集：</h5><p>一般是把Java堆 分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。在新生代 中，每次垃圾收集时都发现有大批对象死去，只有少量存活，那就选用复制算法，只需要付 出少量存活对象的复制成本就可以完成收集。而老年代中因为对象存活率高、没有额外空间 对它进行分配担保，就必须使用“标记—清理”或者“标记—整理”算法来进行回收。</p><h3 id="JVM-GC："><a href="#JVM-GC：" class="headerlink" title="JVM GC："></a>JVM GC：</h3><h5 id="枚举根节点"><a href="#枚举根节点" class="headerlink" title="枚举根节点"></a>枚举根节点</h5><p>要GC就得枚举根节点，如果逐一去检查引用，效率很低。因此JVM使用一组称为OopMap的数据结构，直接知道哪些地方存放着对象引用。</p><h5 id="安全点"><a href="#安全点" class="headerlink" title="安全点"></a>安全点</h5><p>可能导致引用关系、或者说OopMap内容变化的指令非常多，不可能为每一条指令都生成对应的OopMap，因此有了安全点，在安全点才记录OopMap，在安全点才能进行GC，例如方法调用、循环跳转、异常跳转等，具有这些功能的指令才会产生安全点</p><h5 id="如何让GC发生时线程都跑到安全点"><a href="#如何让GC发生时线程都跑到安全点" class="headerlink" title="如何让GC发生时线程都跑到安全点"></a>如何让GC发生时线程都跑到安全点</h5><p>采用主动式中断思想，GC时，不直接对线程操作，而是设置一个中断标志，各个线程执行时主动去轮询这个标志，发现中断标志为真时就自己中断挂起，轮询标志的地方和安全点是重合的</p><h5 id="安全区域"><a href="#安全区域" class="headerlink" title="安全区域"></a>安全区域</h5><p>如果程序不执行时，比如sleep了，岂不是就进不了安全点？因此有了安全区域，安全区域指在一段代码中，引用关系不会发生变化，在这个区域内GC都是安全的。线程进入安全区域后，会标志自己进入了。JVM要GC时就不会管这些线程。线程要离开安全区域时，必须检查GC是否完成，如果GC完成了线程就继续执行，否则一直等待直到GC完成。</p><h3 id="垃圾收集器："><a href="#垃圾收集器：" class="headerlink" title="垃圾收集器："></a>垃圾收集器：</h3><p><img src="201907030914.png" alt="201907030914"></p><h5 id="Serial收集器："><a href="#Serial收集器：" class="headerlink" title="Serial收集器："></a>Serial收集器：</h5><p>单线程，GC时候需要暂停其他所有的工作线程，直到它收集结束。</p><p>JVM运行在Client模式下的默认新生代收集器：简单而高效。</p><p><img src="20190704649.png" alt="20190704649"></p><h5 id="ParNew收集器："><a href="#ParNew收集器：" class="headerlink" title="ParNew收集器："></a>ParNew收集器：</h5><p>Serial收集器的多线程版本。</p><p>许多运行在Server模式下虚拟机的首选新生代收集器。</p><p>在单CPU环境次啊ParNew不会有比Serial收集器效果更好，Serial和ParNew都是与CMS配合工作。</p><p><img src="20190704650.png" alt="20190704650"></p><h5 id="Parallel-Scavenge收集器："><a href="#Parallel-Scavenge收集器：" class="headerlink" title="Parallel Scavenge收集器："></a>Parallel Scavenge收集器：</h5><p>新生代收集器，使用复制算法。</p><p>关注吞吐量，吞吐量=运行用户代码时间/（运行用户代码时间+垃圾收集时间）。</p><p><img src="20190704652.png" alt="20190704652"></p><h5 id="Serial-Old收集器："><a href="#Serial-Old收集器：" class="headerlink" title="Serial Old收集器："></a>Serial Old收集器：</h5><p>是Seraial收集器的老年代版本，单线程，采用“标记-整理”算法。</p><h5 id="Parallel-Old收集器："><a href="#Parallel-Old收集器：" class="headerlink" title="Parallel Old收集器："></a>Parallel Old收集器：</h5><p>是Parallel Scavenge收集器的老年代版本，“标记-整理”。</p><h5 id="CMS收集器："><a href="#CMS收集器：" class="headerlink" title="CMS收集器："></a>CMS收集器：</h5><p>是一种以获取最短回收停顿时间为目标的收集器。</p><p>基于“标记-清除”。</p><p>初始标记，并发标记，重新标记，并发清除。其中，初始标记、重新标记这两个步骤仍然需要“Stop The World”。初始标记仅仅只是 标记一下GC Roots能直接关联到的对象，速度很快，并发标记阶段就是进行GC RootsTracing 的过程，而重新标记阶段则是为了修正并发标记期间因用户程序继续运作而导致标记产生变 动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段稍长一些，但远 比并发标记的时间短。 由于整个过程中耗时最长的并发标记和并发清除过程收集器线程都可以与用户线程一起 工作，所以，从总体上来说，CMS收集器的内存回收过程是与用户线程一起并发执行的。</p><p><img src="20190704653.png" alt="20190704653"></p><p>缺点：对CPU资源非常敏感、无法处理浮动垃圾、基于“标记-清除”，产生大量空间碎片。</p><h5 id="G1收集器："><a href="#G1收集器：" class="headerlink" title="G1收集器："></a>G1收集器：</h5><p>是一款面向服务端应用的垃圾收集器，、并行与并发、分代收集、空间整合、可预测停顿</p><p>将整个Java堆划分多个大小相等的独立区域（Region），虽然还保留有新生代和老年代的概念，但新生代和老年代不再是物理隔离的。</p><p><img src="20190704654.png" alt="20190704654"></p><h3 id="内存分配与回收策略："><a href="#内存分配与回收策略：" class="headerlink" title="内存分配与回收策略："></a>内存分配与回收策略：</h3><ol><li>对象优先在Eden分配。</li><li>老年代GC（Full GC/Major GC）一般比新生代GC（Minor GC）慢10倍以上。</li><li>大对象直接进入老年代，大对象指需要大量连续内存空间的Java对象，比如很长的字符串和数组。可通过参数设置。</li><li>长期存活的对象将进入老年代。默认15岁。</li><li>动态对象年龄判定。如果Survivor空间中相同年龄所有对象大小的总和大于Survivor空间的一半，年龄大于或等于该年龄的对象就可以直接进入老年代。</li><li>空间分配担保。当出现大量对象Minor GC后仍然存活的情况，需要老年代进行分配担保，让Survivor无法容纳的对象直接进入老年代。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;JVM组成：&quot;&gt;&lt;a href=&quot;#JVM组成：&quot; class=&quot;headerlink&quot; title=&quot;JVM组成：&quot;&gt;&lt;/a&gt;JVM组成：&lt;/h3&gt;&lt;p&gt;JVM 由类加载器子系统、运行时数据区、执行引擎以及本地方法接口组成。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;2
      
    
    </summary>
    
      <category term="jvm" scheme="http://ylovex.cn/categories/jvm/"/>
    
    
      <category term="java" scheme="http://ylovex.cn/tags/java/"/>
    
      <category term="jvm" scheme="http://ylovex.cn/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>nowcoder-数位重排</title>
    <link href="http://ylovex.cn/2019/06/27/nowcoder-%E6%95%B0%E4%BD%8D%E9%87%8D%E6%8E%92/"/>
    <id>http://ylovex.cn/2019/06/27/nowcoder-数位重排/</id>
    <published>2019-06-27T12:32:06.000Z</published>
    <updated>2019-07-05T12:37:32.922Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目来源："><a href="#题目来源：" class="headerlink" title="题目来源："></a>题目来源：</h3><p><a href="https://www.nowcoder.com/practice/f970201e9f7e4040ab25a40918e27d15?tpId=90&amp;tqId=30847&amp;tPage=4&amp;rp=4&amp;ru=/ta/2018test&amp;qru=/ta/2018test/question-ranking" target="_blank" rel="noopener">https://www.nowcoder.com/practice/f970201e9f7e4040ab25a40918e27d15?tpId=90&amp;tqId=30847&amp;tPage=4&amp;rp=4&amp;ru=/ta/2018test&amp;qru=/ta/2018test/question-ranking</a></p><h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p>牛牛有一个正整数x,牛牛需要把数字x中的数位进行重排得到一个新数(不同于x的数),牛牛想知道这个新数是否可能是原x的倍数。请你来帮他解决这个问题。</p><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>题目要求将x中的数位重排得到的新数是否可能是原x的倍数；只需判断x的2到9的倍数中是否存在由x重排后得到的数。</p><h3 id="参考代码："><a href="#参考代码：" class="headerlink" title="参考代码："></a>参考代码：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">public class now_71&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Scanner sc = new Scanner(System.in);</span><br><span class="line">        int n = sc.nextInt();</span><br><span class="line">        boolean[] booleans = new boolean[n];</span><br><span class="line">        for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">            booleans[i] = isCheck(sc.nextInt());</span><br><span class="line">        &#125;</span><br><span class="line">        for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">            if(booleans[i])&#123;</span><br><span class="line">                System.out.println(&quot;Possible&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                System.out.println(&quot;Impossible&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static boolean isCheck(int num) &#123;</span><br><span class="line">        for(int i=2;i&lt;=9;i++)&#123;</span><br><span class="line">            String s1 = String.valueOf(num*i);</span><br><span class="line">            String s2 = String.valueOf(num);</span><br><span class="line">            char[] c1 = s1.toCharArray();</span><br><span class="line">            char[] c2 = s2.toCharArray();</span><br><span class="line">            if(c1.length != c2.length) continue;</span><br><span class="line">            Arrays.sort(c1);</span><br><span class="line">            Arrays.sort(c2);</span><br><span class="line">            String s3 = String.valueOf(c1);</span><br><span class="line">            String s4 = String.valueOf(c2);</span><br><span class="line">            if(s3.equals(s4))&#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目来源：&quot;&gt;&lt;a href=&quot;#题目来源：&quot; class=&quot;headerlink&quot; title=&quot;题目来源：&quot;&gt;&lt;/a&gt;题目来源：&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/f970201e9f7e404
      
    
    </summary>
    
      <category term="nowcoder" scheme="http://ylovex.cn/categories/nowcoder/"/>
    
    
      <category term="code" scheme="http://ylovex.cn/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>web工作方式</title>
    <link href="http://ylovex.cn/2019/06/26/web%E5%B7%A5%E4%BD%9C%E6%96%B9%E5%BC%8F/"/>
    <id>http://ylovex.cn/2019/06/26/web工作方式/</id>
    <published>2019-06-26T13:30:45.000Z</published>
    <updated>2019-07-04T05:35:01.029Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Web工作方式："><a href="#Web工作方式：" class="headerlink" title="Web工作方式："></a>Web工作方式：</h3><p><em>from:《Go Web 编程》</em></p><p>打开浏览器，输入网址后按下回车，然后显示出浏览内容，这个看似简单的用户行为背后，隐藏的流程一般是：浏览器本身是一个客户端，当你输入 URL 的 时候，首先浏览器会去请求 DNS 服务器，通过 DNS 获取相应的域名对应的 IP，然后通过IP 地址找到 IP 对应的服务器后，要求建立 TCP 连接，等浏览器发送完 HTTP Request（请求）包后，服务器接收到请求包之后才开始处理请求包，服务器调用自身服务，返回HTTP Response（响应）包；客户端收到来自服务器的响应后开始渲染这个 Response 包里的主体（body），等收到全部的内容随后断开与该服务器之间的 TCP 连接。</p><p>一个Web服务器也被称为HTTP服务器，它通过HTTP协议与客户端通信。这个客户端通常指的是web浏览器（手机端客户端内部也是浏览器实现的）。</p><p>Web 服务器的工作原理可以简单地归纳为：</p><ol><li>客户机通过 TCP/IP 协议建立到服务器的 TCP 连接 </li><li>客户端向服务器发送 HTTP 协议请求包，请求服务器里的资源文档 </li><li>服务器向客户机发送 HTTP 协议应答包，如果请求的资源包含有动态语言的内容，那么服务器会调用动态语言的解释引擎负责处理“动态内容”，并将处理得到的数据返回给客户端 </li><li>客户机与服务器断开。由客户端解释 HTML 文档，在客户端屏幕上渲染图形结果</li></ol><p>一个简单的 HTTP 事务就是这样实现的，看起来很复杂，原理其实是挺简单的。需要注意的 是客户机与服务器之间的通信是非持久连接的，也就是当服务器发送了应答后就与客户机断开连接，等待下一次请求。</p><h3 id="URL与DNS解析："><a href="#URL与DNS解析：" class="headerlink" title="URL与DNS解析："></a>URL与DNS解析：</h3><p>URL(Uniform Resource Locator)是“统一资源定位符”的英文缩写，用于描述一个网络上的资源, 基本格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">schema://host[:port#]/path/.../[?query-string][#anchor]</span><br><span class="line">scheme 指定低层使用的协议(例如：http, https, ftp)</span><br><span class="line">host HTTP 服务器的 IP 地址或者域名</span><br><span class="line">port# HTTP 服务器的默认端口是 80，这种情况下端口号可以省略。如果使用了别的端口，必须指</span><br><span class="line">明，例如 http://www.cnblogs.com:8080/</span><br><span class="line">path 访问资源的路径</span><br><span class="line">query-string 发送给 http 服务器的数据</span><br><span class="line">anchor 锚</span><br></pre></td></tr></table></figure><p>DNS(Domain Name System)是“域名系统”的英文缩写，是一种组织成域层次结构的计算机和网络服务命名系统，它用于 TCP/IP 网络，它从事将主机名或域名转换为实际 IP 地址的 工作。</p><p>更详细的 DNS 解析的过程如下，这个过程有助于我们理解 DNS 的工作模式</p><ol><li>在浏览器中输入 <a href="http://www.qq.com" target="_blank" rel="noopener">www.qq.com</a> 域名，操作系统会先检查自己本地的 hosts 文件是否有这个网址映射关系，如果有，就先调用这个 IP 地址映射，完成域名解析。</li><li>如果 hosts 里没有这个域名的映射，则查找本地 DNS 解析器缓存，是否有这个网址映射关系，如果有，直接返回，完成域名解析。</li><li>如果 hosts 与本地 DNS 解析器缓存都没有相应的网址映射关系，首先会找 TCP/IP参数中设置的首选 DNS 服务器，在此我们叫它本地 DNS 服务器，此服务器收到查询时，如果要查询的域名，包含在本地配置区域资源中，则返回解析结果给客户机，完成域名解析，此解析具有权威性。</li><li>如果要查询的域名，不由本地 DNS 服务器区域解析，但该服务器已缓存了此网址映射关系，则调用这个 IP 地址映射，完成域名解析，此解析不具有权威性。</li><li>如果本地 DNS 服务器本地区域文件与缓存解析都失效，则根据本地 DNS 服务器的设置（是否设置转发器）进行查询，如果未用转发模式，本地 DNS 就把请求发至 “根 DNS服务器”，“根 DNS 服务器”收到请求后会判断这个域名(.com)是谁来授权管理，并会返回一个负责该顶级域名服务器的一个 IP。本地 DNS 服务器收到 IP 信息后，将会联系负责.com域的这台服务器。这台负责.com 域的服务器收到请求后，如果自己无法解析，它就会找一 个管理.com 域的下一级 DNS 服务器址(qq.com)给本地 DNS 服务器。当本地 DNS 服务器收到这个地址后，就会找 qq.com 域服务器，重复上面的动作，进行查询，直至找到<a href="http://www.qq.com" target="_blank" rel="noopener">www.qq.com</a> 主机。</li><li>如果用的是转发模式，此 DNS 服务器就会把请求转发至上一级 DNS 服务器，由上一级服务器进行解析，上一级服务器如果不能解析，或找根 DNS 或把转请求转至上上级，以此循环。不管是本地 DNS 服务器用是是转发，还是根提示，最后都是把结果返回给本地DNS 服务器，由此 DNS 服务器再返回给客户机。</li></ol><p>通过上面的步骤，我们最后获取的是 IP 地址，也就是浏览器最后发起请求的时候是基于 IP来和服务器做信息交互的。</p><h3 id="HTTP协议："><a href="#HTTP协议：" class="headerlink" title="HTTP协议："></a>HTTP协议：</h3><p>HTTP 是一种让 Web 服务器与浏览器(客户端)通过 Internet 发送与接收数据的协议,它建立在 TCP 协议之上，一般采用 TCP 的 80 端口。它是一个请求、响应协议–客户端发出一个请 求，服务器响应这个请求。在 HTTP 中，客户端总是通过建立一个连接与发送一个 HTTP 请 求来发起一个事务。服务器不能主动去与客户端联系，也不能给客户端发出一个回调连接。 客户端与服务器端都可以提前中断一个连接。例如，当浏览器下载一个文件时，你可以通过点击“停止”键来中断文件的下载，关闭与服务器的 HTTP 连接。HTTP 协议是无状态的，同一个客户端的这次请求和上次请求是没有对应关系，对 HTTP服务器来说，它并不知道这两个请求是否来自同一个客户端。为了解决这个问题， Web 程 序引入了 Cookie 机制来维护连接的可持续状态。</p><p>HTTP 协议是建立在 TCP 协议之上的，因此 TCP 攻击一样会影响 HTTP 的通讯，例如比较常见的一些攻击：SYN Flood 是当前最流行的 DoS（拒绝服务攻击）与 DdoS（分布式拒 绝服务攻击）的方式之一，这是一种利用 TCP 协议缺陷，发送大量伪造的 TCP 连接请求，从而使得被攻击方资源耗尽（CPU 满负荷或内存不足）的攻击方式。</p><h3 id="HTTP交互方式："><a href="#HTTP交互方式：" class="headerlink" title="HTTP交互方式："></a>HTTP交互方式：</h3><p>最基本的是GET、POST、PUT、DELETE。一个URL地址用于描述一个网络上的资源，而HTTP中的GET、POST、PUT、DELETE就对应着这个资源的查、改、增、删四个操作。</p><p>GET一般用于获取/查询资源信息，POST一般用于更新资源信息。区别在于：</p><ol><li>GET提交的数据会放在URL之后，以？分割URL和传输数据，参数之间以&amp;相连。POST方法是把提交数据放在HTTP包的Body中。</li><li>GET提交的数据大小有限制（因为浏览器对URL长度有限制），而POST提交数据没有限制。</li><li>GET方式提交数据，存在安全问题，比如登录页面，通过GET方式的话，用户名和密码都在URL上面，如果页面可以缓存或者其他人可以访问这台机器的，就可以从历史记录中获取账户和密码。</li></ol><h3 id="状态码："><a href="#状态码：" class="headerlink" title="状态码："></a>状态码：</h3><p>状态码用来告诉HTTP客户端，HTTP服务器是否产生了预期的Response。HTTP/1.1协议中定义了5类状态码，由三位数字组成，第一个数字定义了响应的类别。</p><ol><li>1XX：提示信息-表示请求已经被成功接收，继续处理。</li><li>2XX：成功-表示请求已经被成功接收。</li><li>3XX：重定向-要完成请求必须进行更进一步处理。</li><li>4XX：客户端错误-请求有语法错误或请求无法实现。</li><li>5XX：服务器端错误-服务器未能实现合法的请求。</li></ol><table><thead><tr><th>状态码</th><th>状态</th><th align="left">详情</th></tr></thead><tbody><tr><td>200</td><td>成功</td><td align="left">服务器已经处理请求</td></tr><tr><td>301</td><td>永久重定向</td><td align="left">请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置</td></tr><tr><td>302</td><td>临时重定向</td><td align="left">服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求</td></tr><tr><td>303</td><td>请求资源路径改变</td><td align="left">使用GET方法请求新url</td></tr><tr><td>400</td><td>请求错误</td><td align="left">请求的报文中存在语法错误，比如url含有非法字符</td></tr><tr><td>401</td><td>未授权</td><td align="left">未授权，比如访问SpringSecurity限制了权限的资源</td></tr><tr><td>404</td><td>未找到</td><td align="left">服务器找不到请求的网页</td></tr><tr><td>405</td><td>请求错误</td><td align="left">请求的方式（get、post、delete）方法与后台规定的方式不符合</td></tr><tr><td>415</td><td>请求错误</td><td align="left">后台程序不支持提交的content-type</td></tr><tr><td>500</td><td>服务器内部错误</td><td align="left">服务器遇到错误，无法完成请求</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Web工作方式：&quot;&gt;&lt;a href=&quot;#Web工作方式：&quot; class=&quot;headerlink&quot; title=&quot;Web工作方式：&quot;&gt;&lt;/a&gt;Web工作方式：&lt;/h3&gt;&lt;p&gt;&lt;em&gt;from:《Go Web 编程》&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;打开浏览器，输入网址后按下
      
    
    </summary>
    
      <category term="计算机网络" scheme="http://ylovex.cn/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="web" scheme="http://ylovex.cn/tags/web/"/>
    
      <category term="http" scheme="http://ylovex.cn/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>nowcoder-最小众倍数</title>
    <link href="http://ylovex.cn/2019/06/25/nowcoder-%E6%9C%80%E5%B0%8F%E4%BC%97%E5%80%8D%E6%95%B0/"/>
    <id>http://ylovex.cn/2019/06/25/nowcoder-最小众倍数/</id>
    <published>2019-06-25T04:52:39.000Z</published>
    <updated>2019-07-04T05:33:16.683Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目来源："><a href="#题目来源：" class="headerlink" title="题目来源："></a>题目来源：</h3><p><a href="https://www.nowcoder.com/practice/3e9d7d22b7dd4daab695b795d243315b?tpId=90&amp;tqId=30844&amp;tPage=4&amp;rp=4&amp;ru=/ta/2018test&amp;qru=/ta/2018test/question-ranking" target="_blank" rel="noopener">https://www.nowcoder.com/practice/3e9d7d22b7dd4daab695b795d243315b?tpId=90&amp;tqId=30844&amp;tPage=4&amp;rp=4&amp;ru=/ta/2018test&amp;qru=/ta/2018test/question-ranking</a></p><h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p>定5个正整数, 它们的最小的众倍数是指的能够被其中至少三个数整除的最小正整数。给定5个不同的正整数, 请计算输出它们的最小众倍数。</p><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>先遍历n从1开始，再遍历nums[i]，使用map记录n*nums[i]出现的次数，当该数的次数出现三次的时候即为最小众倍数。</p><h3 id="参考代码："><a href="#参考代码：" class="headerlink" title="参考代码："></a>参考代码：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">public class now_68 &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Scanner sc = new Scanner(System.in);</span><br><span class="line">        int[] nums = new int[5];</span><br><span class="line">        for(int i=0;i&lt;5;i++)&#123;</span><br><span class="line">            nums[i]=sc.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        int res = getRes(nums);</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static int getRes(int[] nums) &#123;</span><br><span class="line">        Map&lt;Integer , Integer&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">        for(int n=1;n&lt;Integer.MAX_VALUE; n++)&#123;</span><br><span class="line">            for(int i=0;i&lt;5;i++)&#123;</span><br><span class="line">                if(map.containsKey(n*nums[i]))&#123;</span><br><span class="line">                    map.put(n*nums[i] , map.get(n*nums[i])+1);</span><br><span class="line">                    if(map.get(n*nums[i])==3)&#123;</span><br><span class="line">                        return n*nums[i];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                else &#123;</span><br><span class="line">                    map.put(n*nums[i] , 1);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static int getRes2(int[] nums)&#123;</span><br><span class="line">        for(int n=1;n&lt;Integer.MAX_VALUE;n++)&#123;</span><br><span class="line">            int count=0;</span><br><span class="line">            for(int i=0;i&lt;5;i++)&#123;</span><br><span class="line">                if(n%nums[i]==0)&#123;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">                if(count&gt;2)&#123;</span><br><span class="line">                    return n;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目来源：&quot;&gt;&lt;a href=&quot;#题目来源：&quot; class=&quot;headerlink&quot; title=&quot;题目来源：&quot;&gt;&lt;/a&gt;题目来源：&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/3e9d7d22b7dd4da
      
    
    </summary>
    
      <category term="nowcoder" scheme="http://ylovex.cn/categories/nowcoder/"/>
    
    
      <category term="code" scheme="http://ylovex.cn/tags/code/"/>
    
      <category term="遍历" scheme="http://ylovex.cn/tags/%E9%81%8D%E5%8E%86/"/>
    
  </entry>
  
  <entry>
    <title>nowcoder-括号匹配问题</title>
    <link href="http://ylovex.cn/2019/06/23/nowcoder-%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D%E9%97%AE%E9%A2%98/"/>
    <id>http://ylovex.cn/2019/06/23/nowcoder-括号匹配问题/</id>
    <published>2019-06-22T23:44:08.000Z</published>
    <updated>2019-07-04T05:31:49.145Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目来源："><a href="#题目来源：" class="headerlink" title="题目来源："></a>题目来源：</h3><p><a href="https://www.nowcoder.com/practice/380380e6c6b444888ae145593ccbbbca?tpId=90&amp;tqId=30840&amp;tPage=4&amp;rp=4&amp;ru=/ta/2018test&amp;qru=/ta/2018test/question-ranking" target="_blank" rel="noopener">https://www.nowcoder.com/practice/380380e6c6b444888ae145593ccbbbca?tpId=90&amp;tqId=30840&amp;tPage=4&amp;rp=4&amp;ru=/ta/2018test&amp;qru=/ta/2018test/question-ranking</a></p><h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p>合法的括号匹配序列被定义为:</p><ol><li>空串””是合法的括号序列</li><li>如果”X”和”Y”是合法的序列,那么”XY”也是一个合法的括号序列</li><li>如果”X”是一个合法的序列,那么”(X)”也是一个合法的括号序列</li><li>每个合法的括号序列都可以由上面的规则生成<br>例如””, “()”, “()()()”, “(()())”, “(((())))”都是合法的。 东东现在有一个合法的括号序列s,一次移除</li></ol><p>操作分为两步:</p><ol><li>移除序列s中第一个左括号</li><li>移除序列s中任意一个右括号.保证操作之后s还是一个合法的括号序列<br>东东现在想知道使用上述的移除操作有多少种方案可以把序列s变为空<br>如果两个方案中有一次移除操作移除的是不同的右括号就认为是不同的方案。<br>例如: s = “()()()()()”,输出1, 因为每次都只能选择被移除的左括号所相邻的右括号.<br>s = “(((())))”,输出24, 第一次有4种情况, 第二次有3种情况, … ,依次类推, 4 * 3 * 2 * 1 = 24</li></ol><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>反向遍历，用count记录”)“数量，用res记录结果，每次遍历到”)“则count加一，遍历到”(“则结果乘以count，表示该”(“可以匹配的”)”选择为count数，之后count减一继续遍历，遍历完序列后的res即为方案数量。</p><h3 id="参考代码："><a href="#参考代码：" class="headerlink" title="参考代码："></a>参考代码：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">now_64</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        BufferedReader bf = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        String input = bf.readLine();</span><br><span class="line">        <span class="keyword">int</span> len=input.length();</span><br><span class="line">        <span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=len-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(input.charAt(i)==<span class="string">')'</span>)&#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                res*=count;</span><br><span class="line">                count--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目来源：&quot;&gt;&lt;a href=&quot;#题目来源：&quot; class=&quot;headerlink&quot; title=&quot;题目来源：&quot;&gt;&lt;/a&gt;题目来源：&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/380380e6c6b4448
      
    
    </summary>
    
      <category term="nowcoder" scheme="http://ylovex.cn/categories/nowcoder/"/>
    
    
      <category term="code" scheme="http://ylovex.cn/tags/code/"/>
    
      <category term="Stack" scheme="http://ylovex.cn/tags/Stack/"/>
    
  </entry>
  
  <entry>
    <title>nowcoder-神奇数</title>
    <link href="http://ylovex.cn/2019/06/20/nowcoder-%E7%A5%9E%E5%A5%87%E6%95%B0/"/>
    <id>http://ylovex.cn/2019/06/20/nowcoder-神奇数/</id>
    <published>2019-06-19T23:40:06.000Z</published>
    <updated>2019-07-04T05:31:32.401Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目来源："><a href="#题目来源：" class="headerlink" title="题目来源："></a>题目来源：</h3><p><a href="https://www.nowcoder.com/practice/56d818ae68134c12b26e81f41ecafb9e?tpId=90&amp;tqId=30841&amp;tPage=4&amp;rp=4&amp;ru=%2Fta%2F2018test&amp;qru=%2Fta%2F2018test%2Fquestion-ranking" target="_blank" rel="noopener">https://www.nowcoder.com/practice/56d818ae68134c12b26e81f41ecafb9e?tpId=90&amp;tqId=30841&amp;tPage=4&amp;rp=4&amp;ru=%2Fta%2F2018test&amp;qru=%2Fta%2F2018test%2Fquestion-ranking</a></p><h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p>/**</p><ul><li>东东在一本古籍上看到有一种神奇数,如果能够将一个数的数字分成两组,</li><li>其中一组数字的和等于另一组数字的和,我们就将这个数称为神奇数。</li><li>例如242就是一个神奇数,我们能够将这个数的数字分成两组,</li><li>分别是{2,2}以及{4},而且这两组数的和都是4.东东现在需要统计给定区间中有多少个神奇数,</li><li>即给定区间[l, r],统计这个区间中有多少个神奇数,请你来帮助他。<br>*/</li></ul><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>设数字X，先求出X的每位数字存在List中，再求出X每位数字和，若为奇数则舍弃，若为偶数则判断是否是神奇数，通过动态规划，dp[i] [j]表示链表前i个数字能否求和得到j，则有dp[i] [j]=dp[i-1] [j] || dp[i-1] [j-list.get(i)];通过逆序循环将dp数组简化为一维数组。</p><h3 id="参考代码："><a href="#参考代码：" class="headerlink" title="参考代码："></a>参考代码：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">public class now_65 &#123;</span><br><span class="line">    public static void main(String[] args)throws IOException&#123;</span><br><span class="line">        BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));</span><br><span class="line">        String[] strings = bf.readLine().split(&quot; &quot;);</span><br><span class="line">        int left = Integer.parseInt(strings[0]);</span><br><span class="line">        int right = Integer.parseInt(strings[1]);</span><br><span class="line">        int res = 0;</span><br><span class="line">        for(int num = left ; num&lt;=right ; num++)&#123;</span><br><span class="line">            if(isMagic(num))&#123;</span><br><span class="line">                res++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static boolean isMagic(int num) &#123;</span><br><span class="line">        List&lt;Integer&gt; list = new LinkedList&lt;&gt;();</span><br><span class="line">        int sum = 0;</span><br><span class="line">        while (num&gt;0)&#123;</span><br><span class="line">            list.add(num%10);</span><br><span class="line">            sum+=num%10;</span><br><span class="line">            num/=10;</span><br><span class="line">        &#125;</span><br><span class="line">        if(sum%2 != 0) return false;</span><br><span class="line">        int mid = sum/2;</span><br><span class="line">        int len = list.size();</span><br><span class="line">        boolean[] dp = new boolean[mid+1];</span><br><span class="line">        dp[0]=true;</span><br><span class="line">        for(int i=0;i&lt;len;i++)&#123;</span><br><span class="line">            for(int j=mid;j&gt;=list.get(i);j--)&#123;</span><br><span class="line">                dp[j]=dp[j-list.get(i)] || dp[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return dp[mid];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目来源：&quot;&gt;&lt;a href=&quot;#题目来源：&quot; class=&quot;headerlink&quot; title=&quot;题目来源：&quot;&gt;&lt;/a&gt;题目来源：&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/56d818ae68134c1
      
    
    </summary>
    
      <category term="nowcoder" scheme="http://ylovex.cn/categories/nowcoder/"/>
    
    
      <category term="code" scheme="http://ylovex.cn/tags/code/"/>
    
      <category term="动态规划" scheme="http://ylovex.cn/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>LMS算法</title>
    <link href="http://ylovex.cn/2019/06/05/LMS%E7%AE%97%E6%B3%95/"/>
    <id>http://ylovex.cn/2019/06/05/LMS算法/</id>
    <published>2019-06-05T12:07:05.000Z</published>
    <updated>2019-07-04T05:31:02.325Z</updated>
    
    <content type="html"><![CDATA[<p>自适应滤波就是利用前一时刻获得的滤波器参数来自动调节现时刻的滤波器参数，以适应信号和噪声随时间变化的统计特性，从而实现最优滤波。</p><p><img src="2019629001.jpg" alt="jpg"></p><p>主输入端接收带噪信号，参考端为噪声信号，其中参考信号vi是与主输入端中信号s无关但与vo相关的噪声信号，利用量输入信号的相关性和有用信号与噪声的独立性，使参考信号尽可能逼近主输入端中的vo并相减从而抵消掉主输入端中的噪声干扰，最终得到有用信号。</p><p><strong>算法代码：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">function [yn,w,en,itr]=LMSALG(xn,dn,M,mu,itr)</span><br><span class="line">% LMS(Least Mean Squre)算法</span><br><span class="line">% 输入参数:</span><br><span class="line">%     xn   输入的信号序列      (列向量) </span><br><span class="line">%     dn   所期望的响应序列    (列向量) </span><br><span class="line">%     M    滤波器的阶数        (标量)  </span><br><span class="line">%     mu   收敛因子(步长)      (标量)     要求大于0,小于xn的相关矩阵最大特征值的倒数      </span><br><span class="line">%     itr  迭代次数            (标量)     默认为xn的长度,M &lt; itr &lt;= length(xn) </span><br><span class="line">% 输出参数:  </span><br><span class="line">%     w    滤波器的权值矩阵     (矩阵) </span><br><span class="line">%          大小为M*itr,  </span><br><span class="line">%     en   误差序列(itr*1)    (列向量)   </span><br><span class="line">%     yn   实际输出序列         (列向量)</span><br><span class="line"></span><br><span class="line">% 确定迭代次数，若输入迭代次数itr，则设置为itr；若没有该参数，则设置为输入信号长度</span><br><span class="line">% 参数个数必须为4个或5个</span><br><span class="line">if nargin == 4    %  4个时递归迭代的次数为xn的长度</span><br><span class="line">    itr = length(xn);</span><br><span class="line">elseif nargin == 5     %  5个时需满足 M &lt; itr &lt; length(xn)     </span><br><span class="line">    if itr &gt; length(xn) || itr &lt; M          </span><br><span class="line">        error(&apos;迭代次数过大或过小!&apos;);     </span><br><span class="line">    end</span><br><span class="line">else</span><br><span class="line">    error(&apos;请检查输入参数的个数!&apos;); </span><br><span class="line">end  % 初始化参数</span><br><span class="line"></span><br><span class="line">en = zeros(itr,1);     % 误差序列,en(k)表示第k次迭代时预期输出与实际输入的误差</span><br><span class="line">w  = zeros(itr,M);     % 每一行代表一个加权参量,每一列代表-次迭代,初始为0</span><br><span class="line">% w权系数取为矩阵主要是为了判断该算法的收敛性</span><br><span class="line">xn_r=xn&apos;; %%%%参考行向量</span><br><span class="line">dn_r=dn&apos;; %%%%nmr行向量</span><br><span class="line">% 迭代计算</span><br><span class="line">for kitr = M:itr    % 第k次迭代</span><br><span class="line">    x = xn(kitr:-1:kitr-M+1);    % 滤波器M个抽头的输入</span><br><span class="line">    y = w(kitr-1,:)*x;    % 滤波器的输出 </span><br><span class="line">    en(kitr) = dn(kitr) - y;     % 第k次迭代的误差</span><br><span class="line">    % 滤波器权值计算的迭代式</span><br><span class="line">    w(kitr,:) = w(kitr-1,:) + 2*mu*en(kitr)*x&apos;;%%xn(kitr-M+1:kitr)&apos;;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">%%%方法一、直接使用filter函数来进行滤波处理</span><br><span class="line">CancellationData = filter(w(end,:),1,xn_r);  % 直接使用filter函数来进行滤波处理</span><br><span class="line">yn = dn_r-CancellationData;</span><br><span class="line">yn = yn(M+1:end);% 去掉与滤波系数长度对应的前N个点</span><br><span class="line">yn=yn&apos;; %%输出行向量</span><br><span class="line"></span><br><span class="line">% % 求最优时滤波器的输出序列</span><br><span class="line">% yn = zeros(size(xn)); </span><br><span class="line">% for kitr = M:length(xn)</span><br><span class="line">%     x = xn(kitr:-1:kitr-M+1);</span><br><span class="line">%     yn(kitr) = dn(kitr) - w(end,:)*x;   % w(:,end)为最后一次迭代生成的滤波器系数</span><br><span class="line">% end</span><br><span class="line">% yn = yn(M:end);  % 前面M个数据没有经过滤波处理，所以设置成inf，绘图时不显示</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;自适应滤波就是利用前一时刻获得的滤波器参数来自动调节现时刻的滤波器参数，以适应信号和噪声随时间变化的统计特性，从而实现最优滤波。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;2019629001.jpg&quot; alt=&quot;jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;主输入端接收带噪信号，参考端为噪声信号，其
      
    
    </summary>
    
      <category term="信号处理" scheme="http://ylovex.cn/categories/%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86/"/>
    
    
      <category term="lms" scheme="http://ylovex.cn/tags/lms/"/>
    
  </entry>
  
  <entry>
    <title>单例模式</title>
    <link href="http://ylovex.cn/2019/05/25/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://ylovex.cn/2019/05/25/单例模式/</id>
    <published>2019-05-25T12:31:47.000Z</published>
    <updated>2019-07-05T12:37:28.714Z</updated>
    
    <content type="html"><![CDATA[<h3 id="单例模式："><a href="#单例模式：" class="headerlink" title="单例模式："></a>单例模式：</h3><p>from 《菜鸟教程》</p><p>是属于创建型模式，提供了一种创建对象的最佳方式。</p><p>这种模式涉及到一个单一的类，这个类负责创建自己的对象，同时也只有单个对象被创建，这个类提供了一个访问其唯一对象的方法，同时不需要实例化就可以直接访问。</p><ol><li>单例类只能有一个实例</li><li>单例类必须自己创建自己的唯一实例</li><li>单例类必须给所有其他对象提供该实例</li></ol><h5 id="单例与静态类"><a href="#单例与静态类" class="headerlink" title="单例与静态类"></a>单例与静态类</h5><ol><li>单例可以继承和被继承，方法可以被重写，而静态方法不可以</li><li>静态方法中产生的对象会在执行后被释放，进而被GC清理，不会一直存在内存中</li><li>静态类会在第一次运行时候初始化，单例模式可以延迟加载</li></ol><h5 id="懒汉式，线程不安全"><a href="#懒汉式，线程不安全" class="headerlink" title="懒汉式，线程不安全"></a>懒汉式，线程不安全</h5><p>Lazy初始化，非多线程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton &#123;</span><br><span class="line">    private static Singleton instance;</span><br><span class="line">    private Singleton()&#123;&#125;</span><br><span class="line">    public static Singleton getInstance()&#123;</span><br><span class="line">        if(instance == null)&#123;</span><br><span class="line">            instance = new Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="懒汉式，线程安全"><a href="#懒汉式，线程安全" class="headerlink" title="懒汉式，线程安全"></a>懒汉式，线程安全</h5><p>Lazy初始化，多线程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton&#123;</span><br><span class="line">    private static Singleton instance;</span><br><span class="line">    private Singleton()&#123;&#125;</span><br><span class="line">    public static synchronized Singleton getInstance()&#123;</span><br><span class="line">        if(instance == null)&#123;</span><br><span class="line">            instance = new Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h5><p>非Lazy初始化，多线程，类加载时就初始化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton&#123;</span><br><span class="line">    private static Singleton instance = new Singleton();</span><br><span class="line">    private Singleton()&#123;&#125;</span><br><span class="line">    public static Singleton getInstance()[</span><br><span class="line">        return instance;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="双检锁"><a href="#双检锁" class="headerlink" title="双检锁"></a>双检锁</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton&#123;</span><br><span class="line">    private volatile static Singleton singleton;</span><br><span class="line">    private Singleton()&#123;&#125;</span><br><span class="line">    public static Singleton getSingleton()&#123;</span><br><span class="line">        if(singleton == null)&#123;</span><br><span class="line">            synchronized(Singleton.class)&#123;</span><br><span class="line">                if(singleton == null)&#123;</span><br><span class="line">                    singleton = new Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="登记式"><a href="#登记式" class="headerlink" title="登记式"></a>登记式</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton&#123;</span><br><span class="line">    private static class SingletonHolder&#123;</span><br><span class="line">        private static final Singleton INSTANCE = new Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">    private Singleton()&#123;&#125;</span><br><span class="line">    public static final Singleton getInstance()&#123;</span><br><span class="line">        return SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public enum Singleton&#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">    public void whateverMethod()&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;单例模式：&quot;&gt;&lt;a href=&quot;#单例模式：&quot; class=&quot;headerlink&quot; title=&quot;单例模式：&quot;&gt;&lt;/a&gt;单例模式：&lt;/h3&gt;&lt;p&gt;from 《菜鸟教程》&lt;/p&gt;
&lt;p&gt;是属于创建型模式，提供了一种创建对象的最佳方式。&lt;/p&gt;
&lt;p&gt;这种模式涉及到
      
    
    </summary>
    
      <category term="设计模式" scheme="http://ylovex.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="单例模式" scheme="http://ylovex.cn/tags/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java Map笔记</title>
    <link href="http://ylovex.cn/2019/05/18/java-map%E7%AC%94%E8%AE%B0/"/>
    <id>http://ylovex.cn/2019/05/18/java-map笔记/</id>
    <published>2019-05-18T13:54:41.000Z</published>
    <updated>2019-07-04T05:30:01.298Z</updated>
    
    <content type="html"><![CDATA[<h3 id="HashMap实现原理"><a href="#HashMap实现原理" class="headerlink" title="HashMap实现原理"></a>HashMap实现原理</h3><p><img src="20196301206.png" alt="hashmap"></p><p>参考<a href="https://www.cnblogs.com/chengxiao/p/6059914.html" target="_blank" rel="noopener">https://www.cnblogs.com/chengxiao/p/6059914.html</a></p><p>Entry内部结构为：</p><p><img src="20196301211.png" alt="entry"></p><ol><li>HashMap由数组+链表组成的，数组是HashMap的主体，链表则是主要为了解决哈希冲突而存在的，即链地址法。HashMap的主干是一个Entry数组。Entry是HashMap的基本组成单元，每一个Entry包含一个key-value键值对和一个hash值和一个指向下一个Entry的next指针。</li><li>如果定位到的数组位置不含链表（当前entry的next指向null）,那么对于查找，添加等操作很快，仅需一次寻址即</li><li>如果定位到的数组包含链表，对于添加操作，其时间复杂度依然为O(1)，操作是创建新节点，把该新节点插入到链表中的头部，该新节点的next指针指向原来的头结点 ，即需要简单改变引用链即可，而对于查找操作来讲，此时就需要遍历链表，然后通过key对象的equals方法逐一比对查找。</li><li>所以，性能考虑，HashMap中的链表出现越少，性能才会越好。</li><li>当发生哈希冲突并且size大于阈值的时候，需要进行数组扩容，扩容时，需要新建一个长度为之前数组2倍的新的数组，然后将当前的Entry数组中的元素全部传输过去，扩容后的新数组长度为之前的2倍，所以扩容相对来说是个耗资源的操作</li><li>如果key为null，就会插入到table[0]的位置也就是数组头。如果key=null，则hash值直接赋0</li><li>存key时，如果链中存在该key，则用传入的value覆盖掉旧的value，同时把旧的value返回：这就是为什么HashMap不能有两个相同的key的原因。</li><li>计算hash值之后，如何通过hash值均匀的存到数组里？当然是取模，但取模消耗大，因此HashMap用的&amp;运算符（按位与操作）来实现的：hashCode &amp; (length-1)。</li><li>这里就隐含了为什么数组长度length一定要是2的n次方。当length不是2的n次方的时候，length-1的二进制最后一位肯定是0，在&amp;操作时，一个为0，无论另一个为1还是0，最终&amp;操作结果都是0，这就造成了结果的二进制的最后一位都是0，这就导致了所有数据都存储在2的倍数位上，所以说，所以说当length = 2^n时，不同的hash值发生碰撞的概率比较小，这样就会使得数据在table数组中分布较均匀，查询速度也较快。</li></ol><p>存储过程：</p><ol><li><p>传入key和value，判断key是否为null，如果为null，则调用putForNullKey，以null作为key存储到哈希表中； </p><p> 　　2.  然后计算key的hash值，根据hash值搜索在哈希表table中的索引位置，若当前索引位置不为null，则对该位置的Entry链表进行遍历，如果链中存在该key，则用传入的value覆盖掉旧的value，同时把旧的value返回，结束；<br>   　　3.  否则调用addEntry，用key-value创建一个新的节点，并把该节点插入到该索引对应的链表的头部</p></li></ol><p>读取过程：</p><ol><li>调用hash（key）求得key的hash值，然后调用indexFor（hash）求得hash值对应的table的索引位置，然后遍历索引位置的链表，如果存在key，则把key对应的Entry返回，否则返回null。</li></ol><h3 id="JDK1-8前后HashMap区别"><a href="#JDK1-8前后HashMap区别" class="headerlink" title="JDK1.8前后HashMap区别"></a>JDK1.8前后HashMap区别</h3><ol><li>在JDK1.8以前版本中，HashMap的实现是数组+链表，它的缺点是即使哈希函数选择的再好，也很难达到元素百分百均匀分布，而且当HashMap中有大量元素都存到同一个桶中时，这个桶会有一个很长的链表，此时遍历的时间复杂度就是O(n)，当然这是最糟糕的情况。</li><li>在JDK1.8及以后的版本中引入了红黑树结构，HashMap的实现就变成了数组+链表或数组+红黑树。添加元素时，若桶中链表个数超过8，链表会转换成红黑树；删除元素、扩容时，若桶中结构为红黑树并且树中元素个数较少时会进行修剪或直接还原成链表结构，以提高后续操作性能；遍历、查找时，由于使用红黑树结构，红黑树遍历的时间复杂度为 O(logn)，所以性能得到提升。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">        <span class="keyword">final</span> K key;</span><br><span class="line">        V value;</span><br><span class="line">        Node&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">        Node(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">            <span class="keyword">this</span>.hash = hash;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">getKey</span><span class="params">()</span>        </span>&#123; <span class="keyword">return</span> key; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">getValue</span><span class="params">()</span>      </span>&#123; <span class="keyword">return</span> value; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> key + <span class="string">"="</span> + value; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">setValue</span><span class="params">(V newValue)</span> </span>&#123;</span><br><span class="line">            V oldValue = value;</span><br><span class="line">            value = newValue;</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (o == <span class="keyword">this</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Map.Entry) &#123;</span><br><span class="line">                Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</span><br><span class="line">                <span class="keyword">if</span> (Objects.equals(key, e.getKey()) &amp;&amp;</span><br><span class="line">                    Objects.equals(value, e.getValue()))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="HashMap扩容"><a href="#HashMap扩容" class="headerlink" title="HashMap扩容"></a>HashMap扩容</h3><p>HashMap扩容可以分为三种情况：</p><ol><li><p>使用默认构造方法初始化HashMap。HashMap在一开始初始化的时候会返回一个空的table，并且thershold为0。因此第一次扩容的容量为默认值DEFAULT_INITIAL_CAPACITY也就是16。同时threshold = DEFAULT_INITIAL_CAPACITY * DEFAULT_LOAD_FACTOR = 12。</p></li><li><p>指定初始容量的构造方法初始化HashMap。初始容量会等于threshold，接着threshold = 当前的容量（threshold） * DEFAULT_LOAD_FACTOR。</p></li><li><p>HashMap不是第一次扩容。如果HashMap已经扩容过的话，那么每次table的容量以及threshold量为原有的两倍。</p></li></ol><p>HashMap是先插入数据再进行扩容的，但是如果是刚刚初始化容器的时候是先扩容再插入数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">final Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">        int oldCap = (oldTab == null) ? 0 : oldTab.length;</span><br><span class="line">        int oldThr = threshold;</span><br><span class="line">        int newCap, newThr = 0;</span><br><span class="line">        if (oldCap &gt; 0) &#123;</span><br><span class="line">            if (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">                threshold = Integer.MAX_VALUE;</span><br><span class="line">                return oldTab;</span><br><span class="line">            &#125;</span><br><span class="line">            else if ((newCap = oldCap &lt;&lt; 1) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                     oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">                newThr = oldThr &lt;&lt; 1; // double threshold</span><br><span class="line">        &#125;</span><br><span class="line">        else if (oldThr &gt; 0) // initial capacity was placed in threshold</span><br><span class="line">            newCap = oldThr;</span><br><span class="line">        else &#123;               // zero initial threshold signifies using defaults</span><br><span class="line">            newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">            newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">        &#125;</span><br><span class="line">        if (newThr == 0) &#123;</span><br><span class="line">            float ft = (float)newCap * loadFactor;</span><br><span class="line">            newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (float)MAXIMUM_CAPACITY ?</span><br><span class="line">                      (int)ft : Integer.MAX_VALUE);</span><br><span class="line">        &#125;</span><br><span class="line">        threshold = newThr;</span><br><span class="line">        @SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span><br><span class="line">            Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])new Node[newCap];</span><br><span class="line">        table = newTab;</span><br><span class="line">        if (oldTab != null) &#123;</span><br><span class="line">            for (int j = 0; j &lt; oldCap; ++j) &#123;</span><br><span class="line">                Node&lt;K,V&gt; e;</span><br><span class="line">                if ((e = oldTab[j]) != null) &#123;</span><br><span class="line">                    oldTab[j] = null;</span><br><span class="line">                    if (e.next == null)</span><br><span class="line">                        newTab[e.hash &amp; (newCap - 1)] = e;</span><br><span class="line">                    else if (e instanceof TreeNode)</span><br><span class="line">                        ((TreeNode&lt;K,V&gt;)e).split(this, newTab, j, oldCap);</span><br><span class="line">                    else &#123; // preserve order</span><br><span class="line">                        Node&lt;K,V&gt; loHead = null, loTail = null;</span><br><span class="line">                        Node&lt;K,V&gt; hiHead = null, hiTail = null;</span><br><span class="line">                        Node&lt;K,V&gt; next;</span><br><span class="line">                        do &#123;</span><br><span class="line">                            next = e.next;</span><br><span class="line">                            if ((e.hash &amp; oldCap) == 0) &#123;</span><br><span class="line">                                if (loTail == null)</span><br><span class="line">                                    loHead = e;</span><br><span class="line">                                else</span><br><span class="line">                                    loTail.next = e;</span><br><span class="line">                                loTail = e;</span><br><span class="line">                            &#125;</span><br><span class="line">                            else &#123;</span><br><span class="line">                                if (hiTail == null)</span><br><span class="line">                                    hiHead = e;</span><br><span class="line">                                else</span><br><span class="line">                                    hiTail.next = e;</span><br><span class="line">                                hiTail = e;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; while ((e = next) != null);</span><br><span class="line">                        if (loTail != null) &#123;</span><br><span class="line">                            loTail.next = null;</span><br><span class="line">                            newTab[j] = loHead;</span><br><span class="line">                        &#125;</span><br><span class="line">                        if (hiTail != null) &#123;</span><br><span class="line">                            hiTail.next = null;</span><br><span class="line">                            newTab[j + oldCap] = hiHead;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return newTab;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>参考<a href="https://blog.csdn.net/pange1991/article/details/82347284" target="_blank" rel="noopener">https://blog.csdn.net/pange1991/article/details/82347284</a></p><h3 id="HashMap多线程问题"><a href="#HashMap多线程问题" class="headerlink" title="HashMap多线程问题"></a>HashMap多线程问题</h3><p>HashMap在多线程情况下出现死循环主要是在1.7情况下面，存在多线程时候应该使用ConcurrentHashMap。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">void resize(int newCapacity) &#123;</span><br><span class="line">        Entry[] oldTable = table;</span><br><span class="line">        int oldCapacity = oldTable.length;</span><br><span class="line">        if (oldCapacity == MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Entry[] newTable = new Entry[newCapacity];</span><br><span class="line">        transfer(newTable, initHashSeedAsNeeded(newCapacity));</span><br><span class="line">        table = newTable;</span><br><span class="line">        threshold = (int)Math.min(newCapacity * loadFactor, MAXIMUM_CAPACITY + 1);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">void transfer(Entry[] newTable, boolean rehash) &#123;</span><br><span class="line">        int newCapacity = newTable.length;</span><br><span class="line">        for (Entry&lt;K,V&gt; e : table) &#123;</span><br><span class="line">            while(null != e) &#123;</span><br><span class="line">                Entry&lt;K,V&gt; next = e.next;</span><br><span class="line">                //循环取出原数组中每一个链表，e本身也是一个链表的节点，同时包含下一个节点的连接,</span><br><span class="line">                //此处e表示第一个节点，next表示链表的下一个节点</span><br><span class="line">                if (rehash) &#123;</span><br><span class="line">                    e.hash = null == e.key ? 0 : hash(e.key);</span><br><span class="line">                &#125;</span><br><span class="line">                int i = indexFor(e.hash, newCapacity);</span><br><span class="line">               //计算在新数组中的存储位置</span><br><span class="line">                e.next = newTable[i];</span><br><span class="line">                //将原数组链表的第一个元素的next指向新数组，若新数组中已经存在元素，</span><br><span class="line">                //则这个元素为第一个元素，next属性为原节点地址</span><br><span class="line">                newTable[i] = e;</span><br><span class="line">                //将新数组的头节点指向e，此时e(原数组中的第一个元素)已经成功的转移到了新数据中</span><br><span class="line">                e = next;</span><br><span class="line">                //继续处理原数组中剩下的节点</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>参考<a href="https://www.jianshu.com/p/1ff9f3dee207" target="_blank" rel="noopener">https://www.jianshu.com/p/1ff9f3dee207</a></p><h3 id="HashMap和HashTable"><a href="#HashMap和HashTable" class="headerlink" title="HashMap和HashTable"></a>HashMap和HashTable</h3><ol><li>Hashtable 中的方法是同步的，而HashMap中的方法在缺省情况下是非同步的。 </li><li>Hashtable中，key和value都不允许出现null值。在HashMap中，null可以作为键，这样的键只有一个；可以有一个或多个键所对应的值为null。</li><li>并发性不如ConcurrentHashMap，因为ConcurrentHashMap引入了分段锁。Hashtable不建议在新代码中使用，不需要线程安全的场合可以用HashMap替换，需要线程安全的场合可以用ConcurrentHashMap替换。</li></ol><h3 id="HashTable和synchronizedMap和ConcurrentHashMap"><a href="#HashTable和synchronizedMap和ConcurrentHashMap" class="headerlink" title="HashTable和synchronizedMap和ConcurrentHashMap"></a>HashTable和synchronizedMap和ConcurrentHashMap</h3><p>HashTable、synchronizedMap效率低下</p><ol><li><p>现在基本不用HashTable。HashTable容器使用synchronized来保证线程安全，但是锁的是整个hash表，当一个线程使用 put 方法时，另一个线程不但不可以使用 put 方法，连 get 方法都不可以。</p></li><li><p>synchronizedMap比HashTable强一分钱，synchronizedMap提供一个不同步的基类和一个同步的包装。允许需要同步的用户可以拥有同步，而不需要同步的用户则不必为同步付出代价，get方法与HashTable一样锁住整个hash表，区别是get()和put()之类的简单操作可以在不需要额外同步的情况下安全地完成。但多个操作组成的操作序列却可能导致数据争用，总之就是不好用。</p></li></ol><p>ConcurrentHashMap效率高，因为用了分段锁（JDK8之前），16个</p><ol><li>HashTable容器在竞争激烈的并发环境下表现出效率低下的原因是所有访问HashTable的线程都必须竞争同一把锁</li><li>那假如容器里有多把锁，每一把锁用于锁容器其中一部分数据，那么当多线程访问容器里不同数据段的数据时，线程间就不会存在锁竞争，从而可以有效的提高并发访问效率</li><li>这就是 ConcurrentHashMap所使用的锁分段技术，首先将数据分成一段一段的存储，默认分成16个段，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段数据的时候，其他段的数据也能被其他线程访问。</li><li>上面说到的16个线程指的是写线程，而读操作大部分时候都不需要用到锁。只有在size等操作时才需要锁住整个hash表。</li></ol><h3 id="ConcurrentHashMap-JDK1-8"><a href="#ConcurrentHashMap-JDK1-8" class="headerlink" title="ConcurrentHashMap JDK1.8"></a>ConcurrentHashMap JDK1.8</h3><p>基本结构：Node&lt;K,V&gt;数组+链表（红黑树）的结构。</p><ol><li>而对于锁的粒度，调整为对每个数组元素加锁（Node），即没有分段锁了，而是Node锁，粒度更小。</li><li>使用CAS操作来确保Node的一些操作的原子性，这种方式代替了锁。</li><li>ConcurrentHashMap在线程安全的基础上提供了更好的写并发能力，但同时降低了读一致性。ConcurrentHashMap的get操作上面并没有加锁。所以在多线程操作的过程中，并不能完全的保证一致性。这里和1.7当中类似，是弱一致性的体现。</li><li>代码中使用synchronized而不是ReentrantLock，说明JDK8中synchronized有了足够的优化。</li><li>然后是定位节点的hash算法被简化了，这样带来的弊端是Hash冲突会加剧。</li><li>因此在链表节点数量大于8时，会将链表转化为红黑树进行存储。这样一来，查询的时间复杂度就会由原先的O(n)变为O(logN)。</li><li>ConcurrentHashMap的设计与实现非常精巧，大量的利用了volatile，final，CAS等lock-free技术来减少锁竞争对于性能的影响。</li><li>HashEntry中的value以及next都被volatile修饰，这样在多线程读写过程中能够保持它们的可见性。</li></ol><h3 id="HashMap读取与写入"><a href="#HashMap读取与写入" class="headerlink" title="HashMap读取与写入"></a>HashMap读取与写入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public V get(Object key) &#123;</span><br><span class="line">        Node&lt;K,V&gt; e;</span><br><span class="line">        return (e = getNode(hash(key), key)) == null ? null : e.value;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">final Node&lt;K,V&gt; getNode(int hash, Object key) &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; int n; K k;</span><br><span class="line">        if ((tab = table) != null &amp;&amp; (n = tab.length) &gt; 0 &amp;&amp;</span><br><span class="line">            (first = tab[(n - 1) &amp; hash]) != null) &#123;</span><br><span class="line">            if (first.hash == hash &amp;&amp; // always check first node</span><br><span class="line">                ((k = first.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class="line">                return first;</span><br><span class="line">            if ((e = first.next) != null) &#123;</span><br><span class="line">                if (first instanceof TreeNode)</span><br><span class="line">                    return ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">                do &#123;</span><br><span class="line">                    if (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class="line">                        return e;</span><br><span class="line">                &#125; while ((e = e.next) != null);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">        <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            n = (tab = resize()).length;</span><br><span class="line">        <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">            tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;K,V&gt; e; K k;</span><br><span class="line">            <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">                ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                e = p;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                        <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                            treeifyBin(tab, hash);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    p = e;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">                V oldValue = e.value;</span><br><span class="line">                <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                    e.value = value;</span><br><span class="line">                afterNodeAccess(e);</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ++modCount;</span><br><span class="line">        <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">            resize();</span><br><span class="line">        afterNodeInsertion(evict);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;HashMap实现原理&quot;&gt;&lt;a href=&quot;#HashMap实现原理&quot; class=&quot;headerlink&quot; title=&quot;HashMap实现原理&quot;&gt;&lt;/a&gt;HashMap实现原理&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;20196301206.png&quot; alt=&quot;ha
      
    
    </summary>
    
      <category term="Java" scheme="http://ylovex.cn/categories/Java/"/>
    
    
      <category term="Java" scheme="http://ylovex.cn/tags/Java/"/>
    
      <category term="Map" scheme="http://ylovex.cn/tags/Map/"/>
    
  </entry>
  
  <entry>
    <title>Java Set笔记</title>
    <link href="http://ylovex.cn/2019/05/15/java-set%E7%AC%94%E8%AE%B0/"/>
    <id>http://ylovex.cn/2019/05/15/java-set笔记/</id>
    <published>2019-05-15T13:54:41.000Z</published>
    <updated>2019-07-04T05:29:40.130Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Set种类"><a href="#Set种类" class="headerlink" title="Set种类"></a>Set种类</h3><p>Set接口的特性，Set接口继承了Collection接口，Set集合中不能包含重复的元素，每个元素必须是唯一的，你只要将元素加入set中，重复的元素会自动移除。</p><p>Java中提供了HashSet、TreeSet、LinkedHashSet三种常用的Set实现。</p><h3 id="HashSet实现"><a href="#HashSet实现" class="headerlink" title="HashSet实现"></a>HashSet实现</h3><p>HashSet底层通过HashMap实现。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">private transient HashMap&lt;E,Object&gt; map;</span><br><span class="line"></span><br><span class="line">    // Dummy value to associate with an Object in the backing Map</span><br><span class="line">    private static final Object PRESENT = new Object();</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Constructs a new, empty set; the backing &lt;tt&gt;HashMap&lt;/tt&gt; instance has</span><br><span class="line">     * default initial capacity (16) and load factor (0.75).</span><br><span class="line">     */</span><br><span class="line">    public HashSet() &#123;</span><br><span class="line">        map = new HashMap&lt;&gt;();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>HashSet存储元素是无序的，元素的哈希码进行存储的，HashSet根据每个存储对象的哈希码值（调用hashCode方法获得），用固定的算法算出它的存储索引，把存储对象存放在一个叫做散列表的相应位置中，如果对应的位置没有其它元素，就只需要直接存入；如果该位置已经有元素了，就会将新对象跟该位置的所有对象进行比较（调用equals（）方法），以查看容器中是否已经存在该对象，若不存在，就存放该对象，若已经存在，就直接使用该对象。</p><p>HashSet的存储结构是个链表数组，每一个数组元素就是一个链表，类似这种数据结构称为散列表。数组用于存储元素，该存储元素对应的数组下标是调用hashCode方法返回的存储元素的哈希码。当后加入元素的哈希码与已经加入的元素哈希码相同时，HashSet就会创建一个链表，将相同哈希码的元素存入一个链表，并将该链表的头指针存储到哈希码对应的数组元素中。</p><h3 id="HashSet和TreeSet"><a href="#HashSet和TreeSet" class="headerlink" title="HashSet和TreeSet"></a>HashSet和TreeSet</h3><p>HashSet底层数据结构是哈希表，TreeSet底层数据结构是红黑树。</p><p>TreeSet保证元素的排序方式：</p><ol><li>自然排序(这种排序方式可以理解成元素本身具备比较性)让元素所属的类实现Comparable接口。</li><li>比较器排序(这种排序可以理解成集合类具备比较性)让集合构造方法接收Comparator的实现类对象，实现方式可以用匿名类来实现。</li></ol><h3 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h3><p>是HashSet子类，LinkedHashSet集合也是根据元素hashCode值来决定元素存储位置，但它同时使用链表维护元素的次序，这样使的元素看起来是以插入的顺序保存的。也就是说当遍历LinkedHashSet集合里的元素时，HashSet将会按元素的添加顺序来访问集合里的元素。</p><p>LinkedHashSet需要维护元素的插入顺序，因此性能略低于HashSet的性能，但是在迭代访问Set里的全部元素时，将有很好的性能，因为它以列表来维护内部顺序。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Set种类&quot;&gt;&lt;a href=&quot;#Set种类&quot; class=&quot;headerlink&quot; title=&quot;Set种类&quot;&gt;&lt;/a&gt;Set种类&lt;/h3&gt;&lt;p&gt;Set接口的特性，Set接口继承了Collection接口，Set集合中不能包含重复的元素，每个元素必须是唯一的，你
      
    
    </summary>
    
      <category term="Java" scheme="http://ylovex.cn/categories/Java/"/>
    
    
      <category term="Java" scheme="http://ylovex.cn/tags/Java/"/>
    
      <category term="Set" scheme="http://ylovex.cn/tags/Set/"/>
    
  </entry>
  
  <entry>
    <title>Java List笔记</title>
    <link href="http://ylovex.cn/2019/05/14/java-list%E7%AC%94%E8%AE%B0/"/>
    <id>http://ylovex.cn/2019/05/14/java-list笔记/</id>
    <published>2019-05-14T13:54:41.000Z</published>
    <updated>2019-07-04T05:29:23.939Z</updated>
    
    <content type="html"><![CDATA[<h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p>List是一个接口，继承于Collenction接口，它代表着有序的队列。</p><p>​     ps：java.util.Collection是一个集合接口，它提供了对集合对象进行基本操作的通用接口方法；javautil.Collections是一个包装类，它包含各种有关集合操作的静态多态方法，该类不能实例化，服务于Collection框架。</p><p>ArrayList：底层是用数组实现。</p><p>LinkedList：底层是通过双向链表实现。</p><p>Vector：通过数组实现，线程安全。</p><h3 id="ArrayList扩容"><a href="#ArrayList扩容" class="headerlink" title="ArrayList扩容"></a>ArrayList扩容</h3><p>默认初始容量为10.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Default initial capacity.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">transient</span> Object[] elementData; <span class="comment">// non-private to simplify nested class access</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br></pre></td></tr></table></figure><p>扩容，默认为1.5倍方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// overflow-conscious code</span></span><br><span class="line">        <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">        <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            newCapacity = minCapacity;</span><br><span class="line">        <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">            newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">        <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">        elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="ArrayList和LinkedList"><a href="#ArrayList和LinkedList" class="headerlink" title="ArrayList和LinkedList"></a>ArrayList和LinkedList</h3><p>ArrayList是实现了基于动态数组的数据结构，LinkedList是基于链表结构。</p><p>对于随机访问的get和set方法，ArrayList要优于LinkedList，因为LinkedList要移动指针。</p><p>对于新增和删除操作add和remove，LinkedList比较占优势，因为ArrayList要移动数据。</p><p>对ArrayList和LinkedList而言，在列表末尾增加一个元素所花的开销都是固定的。对 ArrayList而言，主要是在内部数组中增加一项，指向所添加的元素，偶尔可能会导致对数组重新进行分配；而对LinkedList而言，这个开销是 统一的，分配一个内部Entry对象。</p><p>在ArrayList集合中添加或者删除一个元素时，当前的列表所所有的元素都会被移动。而LinkedList集合中添加或者删除一个元素的开销是固定的。</p><p>LinkedList集合不支持高效的随机随机访问（RandomAccess），因为可能产生二次项的行为。</p><p>ArrayList的空间浪费主要体现在在list列表的结尾预留一定的容量空间，而LinkedList的空间花费则体现在它的每一个元素都需要消耗相当的空间。</p><h3 id="Arrays-asList-方法"><a href="#Arrays-asList-方法" class="headerlink" title="Arrays.asList()方法"></a>Arrays.asList()方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int[] a = &#123;1,2,3,4&#125;;</span><br><span class="line">        List a_list = Arrays.asList(a);</span><br><span class="line">        System.out.println(a_list.size());//size=1</span><br><span class="line">        Integer[] b = &#123;1,2,3,4&#125;;</span><br><span class="line">        List b_list = Arrays.asList(b);</span><br><span class="line">        System.out.println(b_list.size());//size=4</span><br></pre></td></tr></table></figure><p>Arrays.asList方法返回的是List，通过Arrays类的一个内部类实现，内部用的数组就是传入的数组，没有拷贝，也不会动态改变大小，所以对数组的修改也会反应到List中，对List调用add/remove方法会抛出异常。</p><p>使用ArrayList方法实现为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;(Arrays.asList(a));</span><br></pre></td></tr></table></figure><h3 id="ArrayList线程不安全"><a href="#ArrayList线程不安全" class="headerlink" title="ArrayList线程不安全"></a>ArrayList线程不安全</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public boolean add(E e) &#123;</span><br><span class="line">        ensureCapacityInternal(size + 1);  // Increments modCount!!</span><br><span class="line">        elementData[size++] = e;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>因为ArrayList本身不是线程安全的，通过Collections.synchronizedList可以将其包装成一个线程安全的List。</p><h3 id="Vector和ArrayList"><a href="#Vector和ArrayList" class="headerlink" title="Vector和ArrayList"></a>Vector和ArrayList</h3><p>vector是线程（Thread）同步（Synchronized）的，所以它也是线程安全的，而Arraylist是线程异步（ASynchronized）的，是不安全的。如果不考虑到线程的安全因素，一般用Arraylist效率比较高。</p><p>如果集合中的元素的数目大于目前集合数组的长度时，vector增长率为目前数组长度的100%,而arraylist增长率为目前数组长度的50%.如过在集合中使用数据量比较大的数据，用vector有一定的优势。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;List&quot;&gt;&lt;a href=&quot;#List&quot; class=&quot;headerlink&quot; title=&quot;List&quot;&gt;&lt;/a&gt;List&lt;/h3&gt;&lt;p&gt;List是一个接口，继承于Collenction接口，它代表着有序的队列。&lt;/p&gt;
&lt;p&gt;​     ps：java.uti
      
    
    </summary>
    
      <category term="Java" scheme="http://ylovex.cn/categories/Java/"/>
    
    
      <category term="Java" scheme="http://ylovex.cn/tags/Java/"/>
    
      <category term="List" scheme="http://ylovex.cn/tags/List/"/>
    
  </entry>
  
  <entry>
    <title>Java 基础知识</title>
    <link href="http://ylovex.cn/2019/05/10/java-%E5%9F%BA%E7%A1%80/"/>
    <id>http://ylovex.cn/2019/05/10/java-基础/</id>
    <published>2019-05-10T13:43:41.000Z</published>
    <updated>2019-07-04T05:28:55.823Z</updated>
    
    <content type="html"><![CDATA[<h3 id="面向对象和面向过程"><a href="#面向对象和面向过程" class="headerlink" title="面向对象和面向过程"></a>面向对象和面向过程</h3><ol><li>面向过程：是一种是事件为中心的编程思想。就是分析出解决问题所需的步骤，然后用函数把这写步骤实现，并按顺序调用。</li><li>面向对象：是以“对象”为中心的编程思想。</li><li>面向对象三大特性：封装、继承、多态。因为一切皆对象，所以一切都需要“封装”成类。“继承”让我们设计相似的东西的时候更方便，而“多态”让我们使用类似的东西的时候可以不用去思考它们微弱的不同。我们关心的不是过程，而是接口，而接口来自对象，故名为面向对象。</li></ol><h3 id="封装、继承、多态"><a href="#封装、继承、多态" class="headerlink" title="封装、继承、多态"></a>封装、继承、多态</h3><ol><li>封装：通过隐藏类的内部实现机制，对外界提供已经定义好的接口进行访问。对外界而言它的内部细节是隐藏的，暴露给外界的只是它的访问方法。</li><li>继承：是从已有的类得到继承信息创建新的类的过程，继承可以表示为is-a关系，让我们设计相似的东西的时候更加的方便。</li><li>多态：可以分为方法重载和方法重写两种方式，方法重载是在编译时的多态性（也就是前绑定），方法可以根据不同参数类型进行不同的调用，方法名字一致；方法重写是运行时多态（也称为后绑定），实现方法重写：1.方法重写，子类继承父类并重写父类方法；2.用父类型引用来引用子类型对象，实现调用同样的方法会根据子类对象的不同表示出不一样的行为。</li></ol><h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><ol><li><p>Java的反射机制允许我们动态的调用某个对象的方法、构造函数、获取某个对象的属性等；</p></li><li><p>无需在编码的时候确定调用的对象</p></li><li><p>实现方式：</p><ol><li><p>先获取这个类的class实例，比如:Class&lt;?&gt; myClass =Class.<strong>forName</strong>(“myClassName”);</p></li><li><p>然后通过这个类实例获得一个类对象，比如：Object myClassObject = myClass.newInstance();</p></li><li><p>然后调用Class类的对象的<strong>getMethod</strong>获取method对象;</p></li><li><p>获取method对象后调用method.<strong>invoke</strong>方法获取这个类的field、method、construct等，在这一步中，JVM默认如果调用次数小于15次，会调用native方法实现反射，累积调用大于15次之后，会由java代码创建出字节码来实现反射。</p></li></ol></li></ol><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><h5 id="实现了Collection接口的集合类："><a href="#实现了Collection接口的集合类：" class="headerlink" title="实现了Collection接口的集合类："></a>实现了Collection接口的集合类：</h5><ol><li><p>Collection&lt;–List&lt;–Vector</p></li><li><p>Collection&lt;–List&lt;–ArrayList</p></li><li><p>Collection&lt;–List&lt;–LinkedList</p></li><li><p>Collection&lt;–Set&lt;–HashSet </p></li><li><p>Collection&lt;–Set&lt;–HashSet&lt;–LinkedHashSet</p></li><li><p>Collection&lt;–Set&lt;–SortedSet&lt;–TreeSet</p></li></ol><h5 id="实现了Map接口，和Collection接口没关系，但都属于集合类的一部分："><a href="#实现了Map接口，和Collection接口没关系，但都属于集合类的一部分：" class="headerlink" title="实现了Map接口，和Collection接口没关系，但都属于集合类的一部分："></a>实现了Map接口，和Collection接口没关系，但都属于集合类的一部分：</h5><ol><li><p>HashMap</p></li><li><p>HashTable</p></li><li><p>LinkedHashMap</p></li><li><p>TreeMap</p></li><li><p>SynchronizedMap</p></li><li><p>ConcurrentHashMap</p></li><li></li></ol><h3 id="final和static"><a href="#final和static" class="headerlink" title="final和static"></a>final和static</h3><h5 id="被final声明的对象即表示“我不想这个对象再被改变”，因此："><a href="#被final声明的对象即表示“我不想这个对象再被改变”，因此：" class="headerlink" title="被final声明的对象即表示“我不想这个对象再被改变”，因此："></a>被final声明的对象即表示“我不想这个对象再被改变”，因此：</h5><ol><li>被final声明的方法：这个方法不可以被子类重写</li><li>被final声明的类：这个类不能被继承</li><li>被final声明的变量：引用不能改变，常和static关键字一起使用作为常量<br>final关键字的好处：</li><li>final关键字提高了性能。JVM和Java应用都会缓存final变量。</li><li>final变量可以安全的在多线程环境下进行共享，而不需要额外的同步开销。</li><li>使用final关键字，JVM会对方法、变量及类进行优化。</li></ol><h5 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h5><ol><li>static用来修饰成员变量和成员方法，也可以形成静态static代码块。</li><li>static对象可以在它的任何对象创建之前访问，无需引用任何对象。</li><li>因此主要作用是构造全局变量和全局方法。</li></ol><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ol><li><p>boolean byte char ：都是一个字节</p></li><li><p>short int long float double ：int是4个字节，负2的31次方到正2的31次方减1</p></li><li><p>String Enum Array</p></li><li><p>Object</p><p>ps：负数使用补码表示</p><p>Primitive type:  int,long,float…</p><p>Object: Integer,Long,Float,String…</p><p>Primitive type:</p><ol><li>值类型</li><li>用a==b判断相等</li></ol><p>Object：</p><ol><li>引用类型</li><li>用a==b判断是否为同一个Object</li><li>用a.equals(b),或者Obeject.equals(a,b)判断是否相等</li><li>两个Object如果不是同一个Object，即使值相等用==判断也是false</li></ol></li></ol><h3 id="数组和链表"><a href="#数组和链表" class="headerlink" title="数组和链表"></a>数组和链表</h3><h6 id="基于空间的考虑："><a href="#基于空间的考虑：" class="headerlink" title="基于空间的考虑："></a>基于空间的考虑：</h6><ol><li>数组的存储空间是静态，连续分布的，初始化的过大造成空间浪费，过小又将使空间溢出机会增多。而链表的存储空间是动态分布的，只要内存空间尚有空闲，就不会产生溢出；链表中每个节点出了数据域外，还有链域（指向下一个节点），这样空间利用率就会变高。</li><li>数组从栈中分配空间，对于程序员方便快速，但是自由度小。链表从堆中分配空间，自由度大但是申请管理比较麻烦。</li><li>数组中的数据在内存中按顺序存储的，而链表是随机存储的。</li></ol><h6 id="基于时间的考虑："><a href="#基于时间的考虑：" class="headerlink" title="基于时间的考虑："></a>基于时间的考虑：</h6><ol><li>数组查询快，插入与删除慢，单链表查询慢，插入与删除快。细说的话：数组中任意节点都可以在O（1）内直接存储访问，而链表中的节点，需从头指针顺着链表扫描才能获取到；而链表任意位置进行插入和删除，都只需要修改指针，而数组中插入删除节点，平均要移动一半的节点。</li></ol><h3 id="访问控制符"><a href="#访问控制符" class="headerlink" title="访问控制符"></a>访问控制符</h3><table><thead><tr><th></th><th>public</th><th>protected</th><th>defailt</th><th>private</th></tr></thead><tbody><tr><td>同一个类</td><td>True</td><td>True</td><td>True</td><td>True</td></tr><tr><td>同一个包</td><td>True</td><td>True</td><td>True</td><td>False</td></tr><tr><td>子父类</td><td>True</td><td>True</td><td>False</td><td>False</td></tr><tr><td>不同包</td><td>True</td><td>False</td><td>False</td><td>False</td></tr></tbody></table><h3 id="接口与抽象类"><a href="#接口与抽象类" class="headerlink" title="接口与抽象类"></a>接口与抽象类</h3><p>抽象类就是比普通类多了一些抽象方法而已，其他部分和普通类完全一样；而接口是特殊的抽象类。<br>作用上看：</p><ol><li><p>接口与抽象类结构有点像，但功能完全不同</p></li><li><p>接口是强调合约、约束关系，即你要与我合作，必须实现我的功能；抽象类没这个功能</p></li></ol><p>语法上看：</p><ol><li>都不能被实例化</li><li>接口是特殊的抽象类</li><li>接口不能有实现，Java8中可以有添加default关键字的默认实现和静态方法实现。</li><li>接口中的成员变量必须是public static final修饰（编译器默认会添加上），因此是常量</li><li>一个类可以实现多个接口但只能继承一个抽象类</li></ol><p>什么是接口？</p><ol><li>从表现来说：定义了很多函数，但是这些函数都没有实现，这就是接口。从作用来说：起到一个合约规范的作用。我要告诉你和我打交道的东西有什么约束</li><li>接口中的方法只能用public和abstract修饰或者不修饰</li><li>接口中的属性默认都是public static final，因此是常量</li></ol><h3 id="equal与"><a href="#equal与" class="headerlink" title="equal与=="></a>equal与==</h3><p>对于字符串变量：</p><p>==：比较两个对象在内存中的首地址</p><p>equals：比较字符串中所包含的内容是否相同</p><p>对于非字符串变量：</p><p>==和equals都是比较对象在堆内存中的首地址。</p><h3 id="装箱及拆箱"><a href="#装箱及拆箱" class="headerlink" title="装箱及拆箱"></a>装箱及拆箱</h3><p>Integer i = 10; //装箱</p><p>int n = i ;//拆箱</p><p>装箱就是自动将基本数据类型转换为包装器类型。</p><p>拆箱就是自动将包装器类型转换为基本数据类型。</p><h3 id="hashCode方法及作用"><a href="#hashCode方法及作用" class="headerlink" title="hashCode方法及作用"></a>hashCode方法及作用</h3><p>Java中的hashCode方法就是根据一定的规则将与对象相关的信息（比如对象的存储地址，对象的 字段等）映射成一个数值，这个数值称作为散列值。</p><p>1、在Java集合中有两类，一类是List，一类是Set。他们之间的区别就在于List集合中的元素是有序的，且可以重复，而Set集合中元素是无序不可重复的。对于List好处理，但是对于Set而言我们要如何来保证元素不重复呢？通过迭代来equals()是否相等。数据量小还可以接受，当我们的数据量大的时候效率可想而知<br>2、当集合要添加新的对象时，先调用这个对象的 hashCode方法，得到对应的hashcode值，实际上在HashMap的具体实现中会用一个table保存已经存进去的对象的hashcode 值，如果table中没有该hashcode值，它就可以直接存进去，不用再进行任何比较了；如果存在该hashcode值， 就调用它的equals方法与新元素进行比较，相同的话就不存了，不相同就散列其它的地址<br>3、所以hashCode在上面扮演的角色为快速寻域（寻找某个对象在集合中区域位置）</p><p>在重写equals方法的同时，必须重写hashCode方法。为什么这么说呢？<br>1、让equals方法和hashCode方法始终在逻辑上保持一致性<br>2、即让equals认为相等的两个对象，这两个对象同时调用hashCode方法，返回的值也是一样的</p><h3 id="Java8新特性"><a href="#Java8新特性" class="headerlink" title="Java8新特性"></a>Java8新特性</h3><p>Lambda 表达式 − Lambda允许把函数作为一个方法的参数（函数作为参数传递进方法中。</p><p>方法引用 − 方法引用提供了非常有用的语法，可以直接引用已有Java类或对象（实例）的方法或构造器。与lambda联合使用，方法引用可以使语言的构造更紧凑简洁，减少冗余代码。</p><p>默认方法 − 默认方法就是一个在接口里面有了一个实现的方法。</p><p>新工具 − 新的编译工具，如：Nashorn引擎 jjs、 类依赖分析器jdeps。</p><p>Stream API −新添加的Stream API（java.util.stream） 把真正的函数式编程风格引入到Java中。</p><p>Date Time API − 加强对日期与时间的处理。</p><p>Optional 类 − Optional 类已经成为 Java 8 类库的一部分，用来解决空指针异常。</p><p>Nashorn, JavaScript 引擎 − Java 8提供了一个新的Nashorn javascript引擎，它允许我们在JVM上运行特定的javascript应用。</p><h3 id="Java-NIO框架对比"><a href="#Java-NIO框架对比" class="headerlink" title="Java NIO框架对比"></a>Java NIO框架对比</h3><p>Mina</p><p>Mina(Multipurpose Infrastructure for Network Applications) 是 Apache 组织一个较新的项目，它为开发高性能和高可用性的网络应用程序提供了非常便利的框架。当前发行的 Mina 版本2.04支持基于 Java NIO 技术的 TCP/UDP 应用程序开发、串口通讯程序，Mina 所支持的功能也在进一步的扩展中。</p><p>Netty</p><p>Netty是一款异步的事件驱动的网络应用框架和工具，用于快速开发可维护的高性能、高扩展性协议服务器和客户端。也就是说，Netty是一个NIO客户端/服务器框架，支持快速、简单地开发网络应用，如协议服务器和客户端。它极大简化了网络编程，如TCP和UDP套接字服务器。</p><p>Grizzly</p><p>Grizzly是一种应用程序框架，专门解决编写成千上万用户访问服务器时候产生的各种问题。使用JAVA NIO作为基础，并隐藏其编程的复杂性。容易使用的高性能的API。带来非阻塞socketd到协议处理层。利用高性能的缓冲和缓冲管理使用高性能的线程池。</p><p>xSocket</p><p>xSocket是一个轻量级的基于nio的服务器框架用于开发高性能、可扩展、多线程的服务器。该框架封装了线程处理、异步读/写等方面。（只是对Java的NIO做了最简单的封装，以便于开发使用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;面向对象和面向过程&quot;&gt;&lt;a href=&quot;#面向对象和面向过程&quot; class=&quot;headerlink&quot; title=&quot;面向对象和面向过程&quot;&gt;&lt;/a&gt;面向对象和面向过程&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;面向过程：是一种是事件为中心的编程思想。就是分析出解决问题所需的步骤，然
      
    
    </summary>
    
      <category term="Java" scheme="http://ylovex.cn/categories/Java/"/>
    
    
      <category term="Java" scheme="http://ylovex.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>my first blog</title>
    <link href="http://ylovex.cn/2019/05/02/my-first-blog/"/>
    <id>http://ylovex.cn/2019/05/02/my-first-blog/</id>
    <published>2019-05-02T13:41:41.000Z</published>
    <updated>2019-07-04T05:28:02.029Z</updated>
    
    <content type="html"><![CDATA[<p>Desire is the starting point of all achievement</p><p>渴望是所有成就的原点。</p><p>love xy </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Desire is the starting point of all achievement&lt;/p&gt;
&lt;p&gt;渴望是所有成就的原点。&lt;/p&gt;
&lt;p&gt;love xy &lt;/p&gt;

      
    
    </summary>
    
      <category term="生活" scheme="http://ylovex.cn/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="Life" scheme="http://ylovex.cn/tags/Life/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://ylovex.cn/2019/05/01/hello-world/"/>
    <id>http://ylovex.cn/2019/05/01/hello-world/</id>
    <published>2019-05-01T12:07:05.000Z</published>
    <updated>2019-07-04T05:25:29.915Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
