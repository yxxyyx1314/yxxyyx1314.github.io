<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>人生如逆旅，我亦是行人</title>
  
  <subtitle>Desire is the starting point of all achievement</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ylovex.cn/"/>
  <updated>2019-07-30T14:54:34.943Z</updated>
  <id>http://ylovex.cn/</id>
  
  <author>
    <name>Yang Peng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Redis设计与实现笔记八</title>
    <link href="http://ylovex.cn/2019/07/30/Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E7%AC%94%E8%AE%B0%E5%85%AB/"/>
    <id>http://ylovex.cn/2019/07/30/Redis设计与实现笔记八/</id>
    <published>2019-07-30T13:06:26.000Z</published>
    <updated>2019-07-30T14:54:34.943Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>Redis服务器将所有的数据库都保存在服务器状态redisServer结构的db数组中，db数组的每项都是一个redisDb结构，每个redisDb结构都代表一个数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">typedef struct redisDb &#123;</span><br><span class="line"></span><br><span class="line">    // 数据库键空间，保存着数据库中的所有键值对</span><br><span class="line">    dict *dict;                 /* The keyspace for this DB */</span><br><span class="line"></span><br><span class="line">    // 键的过期时间，字典的键为键，字典的值为过期事件 UNIX 时间戳</span><br><span class="line">    dict *expires;              /* Timeout of keys with a timeout set */</span><br><span class="line"></span><br><span class="line">    // 正处于阻塞状态的键</span><br><span class="line">    dict *blocking_keys;        /* Keys with clients waiting for data (BLPOP) */</span><br><span class="line"></span><br><span class="line">    // 可以解除阻塞的键</span><br><span class="line">    dict *ready_keys;           /* Blocked keys that received a PUSH */</span><br><span class="line"></span><br><span class="line">    // 正在被 WATCH 命令监视的键</span><br><span class="line">    dict *watched_keys;         /* WATCHED keys for MULTI/EXEC CAS */</span><br><span class="line"></span><br><span class="line">    struct evictionPoolEntry *eviction_pool;    /* Eviction pool of keys */</span><br><span class="line"></span><br><span class="line">    // 数据库号码</span><br><span class="line">    int id;                     /* Database ID */</span><br><span class="line"></span><br><span class="line">    // 数据库的键的平均 TTL ，统计信息</span><br><span class="line">    long long avg_ttl;          /* Average TTL, just for stats */</span><br><span class="line"></span><br><span class="line">&#125; redisDb;</span><br></pre></td></tr></table></figure><p>初始化服务器时候，根据redisServer中的dbnum属性决定创建数据库个数，默认为16，默认情况使用0号数据库，通过SELECT命令可以切换目标数据库</p><p>客户端状态redisClient结构的db属性记录了客户端当前目标数据库。</p><h4 id="数据库键空间"><a href="#数据库键空间" class="headerlink" title="数据库键空间"></a>数据库键空间</h4><p>redisDb结构的dict属性保存了数据库中的所有键值对，</p><p>键空间的键也就是数据库的键，每个键都是一个字符串对象</p><p>键空间的值也就是数据库的值，每个值可以是字符串对象、列表对象、哈希表对象、集合对象和有序集合对象中的任意一种</p><p><img src="201907300001.png" alt="313142"></p><h5 id="读写键空间时的维护操作"><a href="#读写键空间时的维护操作" class="headerlink" title="读写键空间时的维护操作"></a>读写键空间时的维护操作</h5><p>当使用Redis命令对数据库进行读写时，服务器不仅会对键空间执行指定的读写操作，还会执行一些额外的维护操作，比如</p><ol><li>在读取一个键后（读操作和写操作都要对键进行读取），服务器会根据键是否存在来更新服务器的键空间命中（hit）次数或键空间不命中（miss）次数，这两个值可以在INFO stats命令的keyspace_hits keyspace_misses属性查看</li><li>在读取一个键之后，服务器会更新键的LRU（最后一次使用）时间，这个值可以用于计算键的闲置时间，使用OBJECT idletime<key> 命令可以查看键的闲置时间</key></li><li>如果服务器在读取一个键时发现键已经过期，那么服务器会先删除这个过期键，然后才执行余下的其他操作</li><li>如果有客户端使用WATCH命令监视了某个键，那么服务器在对被监视键进行修改后，会将这个键标记为脏（dirty）从而让事务程序注意到这个键已经被修改过</li><li>服务器每次修改一个键后，都会对脏键计数器值增一，这个计数器会触发服务器的持久化以及复制操作</li><li>如果服务器开启了数据库通知功能，那么在对键进行修改后，服务器将按配置发送相应的数据库通知</li></ol><h5 id="设置键生存时间或过期时间"><a href="#设置键生存时间或过期时间" class="headerlink" title="设置键生存时间或过期时间"></a>设置键生存时间或过期时间</h5><p>有四个不同的命令可以用于设置键的生存时间或过期时间</p><p>EXPIRE<key><ttl> 用于将键key的生存时间设置为ttl秒</ttl></key></p><p>PEXPIRE<key><ttl> 用于将生存时间设置为ttl毫秒</ttl></key></p><p>EXPIREAT<key><timestamp> 用于将过期时间设置为timestamp所指定的秒数时间戳</timestamp></key></p><p>PEXPIREAT<key><timestamp> 用于将过期时间设置为timestamp所指定的毫秒数时间戳</timestamp></key></p><p>实际上，EXPIRE、PEXPIRE、EXPIREAT都是通过PEXPIREAT实现</p><p>redisDb结构的expires字典保存了数据库中所有键的过期时间</p><h5 id="移除过期时间"><a href="#移除过期时间" class="headerlink" title="移除过期时间"></a>移除过期时间</h5><p>PERSIST命令可以移除一个键的过期时间</p><h5 id="计算并返回过期时间"><a href="#计算并返回过期时间" class="headerlink" title="计算并返回过期时间"></a>计算并返回过期时间</h5><p>TTL命令和PTTL命令</p><h5 id="过期键判断"><a href="#过期键判断" class="headerlink" title="过期键判断"></a>过期键判断</h5><p>检查给定键是否存在于过期字典，如果存在那么取得键的过期时间</p><p>检查当前UNIX时间戳是否大于键的过期时候：如果是的话，那么键已经过期</p><h4 id="过期键删除策略"><a href="#过期键删除策略" class="headerlink" title="过期键删除策略"></a>过期键删除策略</h4><h5 id="定时删除"><a href="#定时删除" class="headerlink" title="定时删除"></a>定时删除</h5><p>在设置键的过期时间的同时，创建一个定时器，让定时器在键过期时机来临时，立即执行对键的删除操作</p><h5 id="惰性删除"><a href="#惰性删除" class="headerlink" title="惰性删除"></a>惰性删除</h5><p>放任键过期不管，但是每次从键空间中获取键时，都检查取得的键是否过期，如果过期的话就删除该键，如果没有过期就返回改建</p><h5 id="定期删除"><a href="#定期删除" class="headerlink" title="定期删除"></a>定期删除</h5><p>每隔一段时间，程序就对数据库进行一次检查，删除里面的过期键。</p><p>Redis服务器实际使用的是惰性删除和定期删除两种策略：通过配合使用这两种删除策略，服务器可以很好地在合理使用CPU时间和避免浪费内存空间之间取得平衡</p><p>惰性删除策略由db.c中的expireIfNeeded函数实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line"> * 检查 key 是否已经过期，如果是的话，将它从数据库中删除。</span><br><span class="line"> *</span><br><span class="line"> * 返回 0 表示键没有过期时间，或者键未过期。</span><br><span class="line"> *</span><br><span class="line"> * 返回 1 表示键已经因为过期而被删除了。</span><br><span class="line"> */</span><br><span class="line">int expireIfNeeded(redisDb *db, robj *key) &#123;</span><br><span class="line"></span><br><span class="line">    // 取出键的过期时间</span><br><span class="line">    mstime_t when = getExpire(db,key);</span><br><span class="line">    mstime_t now;</span><br><span class="line"></span><br><span class="line">    // 没有过期时间</span><br><span class="line">    if (when &lt; 0) return 0; /* No expire for this key */</span><br><span class="line"></span><br><span class="line">    /* Don&apos;t expire anything while loading. It will be done later. */</span><br><span class="line">    // 如果服务器正在进行载入，那么不进行任何过期检查</span><br><span class="line">    if (server.loading) return 0;</span><br><span class="line"></span><br><span class="line">    /* If we are in the context of a Lua script, we claim that time is</span><br><span class="line">     * blocked to when the Lua script started. This way a key can expire</span><br><span class="line">     * only the first time it is accessed and not in the middle of the</span><br><span class="line">     * script execution, making propagation to slaves / AOF consistent.</span><br><span class="line">     * See issue #1525 on Github for more information. */</span><br><span class="line">    now = server.lua_caller ? server.lua_time_start : mstime();</span><br><span class="line"></span><br><span class="line">    /* If we are running in the context of a slave, return ASAP:</span><br><span class="line">     * the slave key expiration is controlled by the master that will</span><br><span class="line">     * send us synthesized DEL operations for expired keys.</span><br><span class="line">     *</span><br><span class="line">     * Still we try to return the right information to the caller, </span><br><span class="line">     * that is, 0 if we think the key should be still valid, 1 if</span><br><span class="line">     * we think the key is expired at this time. */</span><br><span class="line">    // 当服务器运行在 replication 模式时</span><br><span class="line">    // 附属节点并不主动删除 key</span><br><span class="line">    // 它只返回一个逻辑上正确的返回值</span><br><span class="line">    // 真正的删除操作要等待主节点发来删除命令时才执行</span><br><span class="line">    // 从而保证数据的同步</span><br><span class="line">    if (server.masterhost != NULL) return now &gt; when;</span><br><span class="line"></span><br><span class="line">    // 运行到这里，表示键带有过期时间，并且服务器为主节点</span><br><span class="line"></span><br><span class="line">    /* Return when this key has not expired */</span><br><span class="line">    // 如果未过期，返回 0</span><br><span class="line">    if (now &lt;= when) return 0;</span><br><span class="line"></span><br><span class="line">    /* Delete the key */</span><br><span class="line">    server.stat_expiredkeys++;</span><br><span class="line"></span><br><span class="line">    // 向 AOF 文件和附属节点传播过期信息</span><br><span class="line">    propagateExpire(db,key);</span><br><span class="line"></span><br><span class="line">    // 发送事件通知</span><br><span class="line">    notifyKeyspaceEvent(REDIS_NOTIFY_EXPIRED,</span><br><span class="line">        &quot;expired&quot;,key,db-&gt;id);</span><br><span class="line"></span><br><span class="line">    // 将过期键从数据库中删除</span><br><span class="line">    return dbDelete(db,key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="201907300002.png" alt="31214"></p><p>定期删除策略由redis.c中的activeExpireCycle实现，每当Redis服务器周期性操作redis.c/serverCron函数时，activeExpireCycle函数就会被调用，它在规定时间内，分多次遍历服务器中的各个数据库，从数据库的expire字典中随机检查一部分键的过期时间并删除其中过期键</p><h4 id="AOF、RDB和复制功能对过期键处理"><a href="#AOF、RDB和复制功能对过期键处理" class="headerlink" title="AOF、RDB和复制功能对过期键处理"></a>AOF、RDB和复制功能对过期键处理</h4><h5 id="生成RDB文件"><a href="#生成RDB文件" class="headerlink" title="生成RDB文件"></a>生成RDB文件</h5><p>在执行SAVE命令或者BGSAVE命令创建一个新RDB文件，程序会对数据库中的键进行检查，已经过期键不会被保存到新创建的RDB文件中</p><h5 id="载入RDB文件"><a href="#载入RDB文件" class="headerlink" title="载入RDB文件"></a>载入RDB文件</h5><p>在启动Redis服务器时，如果服务器开启了RDB功能，那么服务器将对RDB文件进行载入</p><p>如果服务器以主服务器模式运行，那么在载入RDB文件时，程序会对文件中保存的键进行检查，未过期的键会被载入到数据库中，过期键被忽略</p><p>如果服务器以从服务器运行，所有键都会载入。</p><h5 id="AOF文件写入"><a href="#AOF文件写入" class="headerlink" title="AOF文件写入"></a>AOF文件写入</h5><p>当服务器以AOF持久化模式运行时，如果数据库中的某个键已经过期，但它还没有被惰性删除或者定期删除，那么AOF文件不会因为这个过期键产生任何影响</p><p>当过期键被惰性删除后，程序会向AOF文件追加一条DEL命令，来显示地记录该键已被删除</p><h5 id="AOF重写"><a href="#AOF重写" class="headerlink" title="AOF重写"></a>AOF重写</h5><p>在执行AOF重写的过程中，程序会对数据库中的键进行检查，已过期的键不会被保存到重写后的AOF文件中</p><h5 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h5><p>主服务器在删除一个过期键之后，会显式地向所有从服务器发送一个DEL命令，告知从服务器删除这个过期键</p><p>从服务器在执行客户端发送的读命令时，即使碰到过期键也不会将过期的键删除，而是继续像处理未过期的键一样来处理过期键</p><p>从服务器只有在接到主服务器发来的DEL命令后，才会删除过期键</p><h4 id="数据库通知"><a href="#数据库通知" class="headerlink" title="数据库通知"></a>数据库通知</h4><p>可以让客户端通过订阅给定的频道或者模式，来获知数据库中键的变换，以及数据库中命令的执行情况\</p><p>发送数据库通知的功能是由notify.c/notifyKeyspaceEvent函数实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">/* The API provided to the rest of the Redis core is a simple function:</span><br><span class="line"> *</span><br><span class="line"> * notifyKeyspaceEvent(char *event, robj *key, int dbid);</span><br><span class="line"> *</span><br><span class="line"> * &apos;event&apos; is a C string representing the event name.</span><br><span class="line"> *</span><br><span class="line"> * event 参数是一个字符串表示的事件名</span><br><span class="line"> *</span><br><span class="line"> * &apos;key&apos; is a Redis object representing the key name.</span><br><span class="line"> *</span><br><span class="line"> * key 参数是一个 Redis 对象表示的键名</span><br><span class="line"> *</span><br><span class="line"> * &apos;dbid&apos; is the database ID where the key lives.  </span><br><span class="line"> *</span><br><span class="line"> * dbid 参数为键所在的数据库</span><br><span class="line"> */</span><br><span class="line">void notifyKeyspaceEvent(int type, char *event, robj *key, int dbid) &#123;</span><br><span class="line">    sds chan;</span><br><span class="line">    robj *chanobj, *eventobj;</span><br><span class="line">    int len = -1;</span><br><span class="line">    char buf[24];</span><br><span class="line"></span><br><span class="line">    /* If notifications for this class of events are off, return ASAP. */</span><br><span class="line">    // 如果服务器配置为不发送 type 类型的通知，那么直接返回</span><br><span class="line">    if (!(server.notify_keyspace_events &amp; type)) return;</span><br><span class="line"></span><br><span class="line">    // 事件的名字</span><br><span class="line">    eventobj = createStringObject(event,strlen(event));</span><br><span class="line"></span><br><span class="line">    /* __keyspace@&lt;db&gt;__:&lt;key&gt; &lt;event&gt; notifications. */</span><br><span class="line">    // 发送键空间通知</span><br><span class="line">    if (server.notify_keyspace_events &amp; REDIS_NOTIFY_KEYSPACE) &#123;</span><br><span class="line"></span><br><span class="line">        // 构建频道对象</span><br><span class="line">        chan = sdsnewlen(&quot;__keyspace@&quot;,11);</span><br><span class="line">        len = ll2string(buf,sizeof(buf),dbid);</span><br><span class="line">        chan = sdscatlen(chan, buf, len);</span><br><span class="line">        chan = sdscatlen(chan, &quot;__:&quot;, 3);</span><br><span class="line">        chan = sdscatsds(chan, key-&gt;ptr);</span><br><span class="line"></span><br><span class="line">        chanobj = createObject(REDIS_STRING, chan);</span><br><span class="line"></span><br><span class="line">        // 通过 publish 命令发送通知</span><br><span class="line">        pubsubPublishMessage(chanobj, eventobj);</span><br><span class="line"></span><br><span class="line">        // 释放频道对象</span><br><span class="line">        decrRefCount(chanobj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /* __keyevente@&lt;db&gt;__:&lt;event&gt; &lt;key&gt; notifications. */</span><br><span class="line">    // 发送键事件通知</span><br><span class="line">    if (server.notify_keyspace_events &amp; REDIS_NOTIFY_KEYEVENT) &#123;</span><br><span class="line"></span><br><span class="line">        // 构建频道对象</span><br><span class="line">        chan = sdsnewlen(&quot;__keyevent@&quot;,11);</span><br><span class="line">        // 如果在前面发送键空间通知的时候计算了 len ，那么它就不会是 -1</span><br><span class="line">        // 这可以避免计算两次 buf 的长度</span><br><span class="line">        if (len == -1) len = ll2string(buf,sizeof(buf),dbid);</span><br><span class="line">        chan = sdscatlen(chan, buf, len);</span><br><span class="line">        chan = sdscatlen(chan, &quot;__:&quot;, 3);</span><br><span class="line">        chan = sdscatsds(chan, eventobj-&gt;ptr);</span><br><span class="line"></span><br><span class="line">        chanobj = createObject(REDIS_STRING, chan);</span><br><span class="line"></span><br><span class="line">        // 通过 publish 命令发送通知</span><br><span class="line">        pubsubPublishMessage(chanobj, key);</span><br><span class="line"></span><br><span class="line">        // 释放频道对象</span><br><span class="line">        decrRefCount(chanobj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 释放事件对象</span><br><span class="line">    decrRefCount(eventobj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="redisServer结构"><a href="#redisServer结构" class="headerlink" title="redisServer结构"></a>redisServer结构</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br></pre></td><td class="code"><pre><span class="line">struct redisServer &#123;</span><br><span class="line"></span><br><span class="line">    /* General */</span><br><span class="line"></span><br><span class="line">    // 配置文件的绝对路径</span><br><span class="line">    char *configfile;           /* Absolute config file path, or NULL */</span><br><span class="line"></span><br><span class="line">    // serverCron() 每秒调用的次数</span><br><span class="line">    int hz;                     /* serverCron() calls frequency in hertz */</span><br><span class="line"></span><br><span class="line">    // 数据库</span><br><span class="line">    redisDb *db;</span><br><span class="line"></span><br><span class="line">    // 命令表（受到 rename 配置选项的作用）</span><br><span class="line">    dict *commands;             /* Command table */</span><br><span class="line">    // 命令表（无 rename 配置选项的作用）</span><br><span class="line">    dict *orig_commands;        /* Command table before command renaming. */</span><br><span class="line"></span><br><span class="line">    // 事件状态</span><br><span class="line">    aeEventLoop *el;</span><br><span class="line"></span><br><span class="line">    // 最近一次使用时钟</span><br><span class="line">    unsigned lruclock:REDIS_LRU_BITS; /* Clock for LRU eviction */</span><br><span class="line"></span><br><span class="line">    // 关闭服务器的标识</span><br><span class="line">    int shutdown_asap;          /* SHUTDOWN needed ASAP */</span><br><span class="line"></span><br><span class="line">    // 在执行 serverCron() 时进行渐进式 rehash</span><br><span class="line">    int activerehashing;        /* Incremental rehash in serverCron() */</span><br><span class="line"></span><br><span class="line">    // 是否设置了密码</span><br><span class="line">    char *requirepass;          /* Pass for AUTH command, or NULL */</span><br><span class="line"></span><br><span class="line">    // PID 文件</span><br><span class="line">    char *pidfile;              /* PID file path */</span><br><span class="line"></span><br><span class="line">    // 架构类型</span><br><span class="line">    int arch_bits;              /* 32 or 64 depending on sizeof(long) */</span><br><span class="line"></span><br><span class="line">    // serverCron() 函数的运行次数计数器</span><br><span class="line">    int cronloops;              /* Number of times the cron function run */</span><br><span class="line"></span><br><span class="line">    // 本服务器的 RUN ID</span><br><span class="line">    char runid[REDIS_RUN_ID_SIZE+1];  /* ID always different at every exec. */</span><br><span class="line"></span><br><span class="line">    // 服务器是否运行在 SENTINEL 模式</span><br><span class="line">    int sentinel_mode;          /* True if this instance is a Sentinel. */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /* Networking */</span><br><span class="line"></span><br><span class="line">    // TCP 监听端口</span><br><span class="line">    int port;                   /* TCP listening port */</span><br><span class="line"></span><br><span class="line">    int tcp_backlog;            /* TCP listen() backlog */</span><br><span class="line"></span><br><span class="line">    // 地址</span><br><span class="line">    char *bindaddr[REDIS_BINDADDR_MAX]; /* Addresses we should bind to */</span><br><span class="line">    // 地址数量</span><br><span class="line">    int bindaddr_count;         /* Number of addresses in server.bindaddr[] */</span><br><span class="line"></span><br><span class="line">    // UNIX 套接字</span><br><span class="line">    char *unixsocket;           /* UNIX socket path */</span><br><span class="line">    mode_t unixsocketperm;      /* UNIX socket permission */</span><br><span class="line"></span><br><span class="line">    // 描述符</span><br><span class="line">    int ipfd[REDIS_BINDADDR_MAX]; /* TCP socket file descriptors */</span><br><span class="line">    // 描述符数量</span><br><span class="line">    int ipfd_count;             /* Used slots in ipfd[] */</span><br><span class="line"></span><br><span class="line">    // UNIX 套接字文件描述符</span><br><span class="line">    int sofd;                   /* Unix socket file descriptor */</span><br><span class="line"></span><br><span class="line">    int cfd[REDIS_BINDADDR_MAX];/* Cluster bus listening socket */</span><br><span class="line">    int cfd_count;              /* Used slots in cfd[] */</span><br><span class="line"></span><br><span class="line">    // 一个链表，保存了所有客户端状态结构</span><br><span class="line">    list *clients;              /* List of active clients */</span><br><span class="line">    // 链表，保存了所有待关闭的客户端</span><br><span class="line">    list *clients_to_close;     /* Clients to close asynchronously */</span><br><span class="line"></span><br><span class="line">    // 链表，保存了所有从服务器，以及所有监视器</span><br><span class="line">    list *slaves, *monitors;    /* List of slaves and MONITORs */</span><br><span class="line"></span><br><span class="line">    // 服务器的当前客户端，仅用于崩溃报告</span><br><span class="line">    redisClient *current_client; /* Current client, only used on crash report */</span><br><span class="line"></span><br><span class="line">    int clients_paused;         /* True if clients are currently paused */</span><br><span class="line">    mstime_t clients_pause_end_time; /* Time when we undo clients_paused */</span><br><span class="line"></span><br><span class="line">    // 网络错误</span><br><span class="line">    char neterr[ANET_ERR_LEN];   /* Error buffer for anet.c */</span><br><span class="line"></span><br><span class="line">    // MIGRATE 缓存</span><br><span class="line">    dict *migrate_cached_sockets;/* MIGRATE cached sockets */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /* RDB / AOF loading information */</span><br><span class="line"></span><br><span class="line">    // 这个值为真时，表示服务器正在进行载入</span><br><span class="line">    int loading;                /* We are loading data from disk if true */</span><br><span class="line"></span><br><span class="line">    // 正在载入的数据的大小</span><br><span class="line">    off_t loading_total_bytes;</span><br><span class="line"></span><br><span class="line">    // 已载入数据的大小</span><br><span class="line">    off_t loading_loaded_bytes;</span><br><span class="line"></span><br><span class="line">    // 开始进行载入的时间</span><br><span class="line">    time_t loading_start_time;</span><br><span class="line">    off_t loading_process_events_interval_bytes;</span><br><span class="line"></span><br><span class="line">    /* Fast pointers to often looked up command */</span><br><span class="line">    // 常用命令的快捷连接</span><br><span class="line">    struct redisCommand *delCommand, *multiCommand, *lpushCommand, *lpopCommand,</span><br><span class="line">                        *rpopCommand;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /* Fields used only for stats */</span><br><span class="line"></span><br><span class="line">    // 服务器启动时间</span><br><span class="line">    time_t stat_starttime;          /* Server start time */</span><br><span class="line"></span><br><span class="line">    // 已处理命令的数量</span><br><span class="line">    long long stat_numcommands;     /* Number of processed commands */</span><br><span class="line"></span><br><span class="line">    // 服务器接到的连接请求数量</span><br><span class="line">    long long stat_numconnections;  /* Number of connections received */</span><br><span class="line"></span><br><span class="line">    // 已过期的键数量</span><br><span class="line">    long long stat_expiredkeys;     /* Number of expired keys */</span><br><span class="line"></span><br><span class="line">    // 因为回收内存而被释放的过期键的数量</span><br><span class="line">    long long stat_evictedkeys;     /* Number of evicted keys (maxmemory) */</span><br><span class="line"></span><br><span class="line">    // 成功查找键的次数</span><br><span class="line">    long long stat_keyspace_hits;   /* Number of successful lookups of keys */</span><br><span class="line"></span><br><span class="line">    // 查找键失败的次数</span><br><span class="line">    long long stat_keyspace_misses; /* Number of failed lookups of keys */</span><br><span class="line"></span><br><span class="line">    // 已使用内存峰值</span><br><span class="line">    size_t stat_peak_memory;        /* Max used memory record */</span><br><span class="line"></span><br><span class="line">    // 最后一次执行 fork() 时消耗的时间</span><br><span class="line">    long long stat_fork_time;       /* Time needed to perform latest fork() */</span><br><span class="line"></span><br><span class="line">    // 服务器因为客户端数量过多而拒绝客户端连接的次数</span><br><span class="line">    long long stat_rejected_conn;   /* Clients rejected because of maxclients */</span><br><span class="line"></span><br><span class="line">    // 执行 full sync 的次数</span><br><span class="line">    long long stat_sync_full;       /* Number of full resyncs with slaves. */</span><br><span class="line"></span><br><span class="line">    // PSYNC 成功执行的次数</span><br><span class="line">    long long stat_sync_partial_ok; /* Number of accepted PSYNC requests. */</span><br><span class="line"></span><br><span class="line">    // PSYNC 执行失败的次数</span><br><span class="line">    long long stat_sync_partial_err;/* Number of unaccepted PSYNC requests. */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /* slowlog */</span><br><span class="line"></span><br><span class="line">    // 保存了所有慢查询日志的链表</span><br><span class="line">    list *slowlog;                  /* SLOWLOG list of commands */</span><br><span class="line"></span><br><span class="line">    // 下一条慢查询日志的 ID</span><br><span class="line">    long long slowlog_entry_id;     /* SLOWLOG current entry ID */</span><br><span class="line"></span><br><span class="line">    // 服务器配置 slowlog-log-slower-than 选项的值</span><br><span class="line">    long long slowlog_log_slower_than; /* SLOWLOG time limit (to get logged) */</span><br><span class="line"></span><br><span class="line">    // 服务器配置 slowlog-max-len 选项的值</span><br><span class="line">    unsigned long slowlog_max_len;     /* SLOWLOG max number of items logged */</span><br><span class="line">    size_t resident_set_size;       /* RSS sampled in serverCron(). */</span><br><span class="line">    /* The following two are used to track instantaneous &quot;load&quot; in terms</span><br><span class="line">     * of operations per second. */</span><br><span class="line">    // 最后一次进行抽样的时间</span><br><span class="line">    long long ops_sec_last_sample_time; /* Timestamp of last sample (in ms) */</span><br><span class="line">    // 最后一次抽样时，服务器已执行命令的数量</span><br><span class="line">    long long ops_sec_last_sample_ops;  /* numcommands in last sample */</span><br><span class="line">    // 抽样结果</span><br><span class="line">    long long ops_sec_samples[REDIS_OPS_SEC_SAMPLES];</span><br><span class="line">    // 数组索引，用于保存抽样结果，并在需要时回绕到 0</span><br><span class="line">    int ops_sec_idx;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /* Configuration */</span><br><span class="line"></span><br><span class="line">    // 日志可见性</span><br><span class="line">    int verbosity;                  /* Loglevel in redis.conf */</span><br><span class="line"></span><br><span class="line">    // 客户端最大空转时间</span><br><span class="line">    int maxidletime;                /* Client timeout in seconds */</span><br><span class="line"></span><br><span class="line">    // 是否开启 SO_KEEPALIVE 选项</span><br><span class="line">    int tcpkeepalive;               /* Set SO_KEEPALIVE if non-zero. */</span><br><span class="line">    int active_expire_enabled;      /* Can be disabled for testing purposes. */</span><br><span class="line">    size_t client_max_querybuf_len; /* Limit for client query buffer length */</span><br><span class="line">    int dbnum;                      /* Total number of configured DBs */</span><br><span class="line">    int daemonize;                  /* True if running as a daemon */</span><br><span class="line">    // 客户端输出缓冲区大小限制</span><br><span class="line">    // 数组的元素有 REDIS_CLIENT_LIMIT_NUM_CLASSES 个</span><br><span class="line">    // 每个代表一类客户端：普通、从服务器、pubsub，诸如此类</span><br><span class="line">    clientBufferLimitsConfig client_obuf_limits[REDIS_CLIENT_LIMIT_NUM_CLASSES];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /* AOF persistence */</span><br><span class="line"></span><br><span class="line">    // AOF 状态（开启/关闭/可写）</span><br><span class="line">    int aof_state;                  /* REDIS_AOF_(ON|OFF|WAIT_REWRITE) */</span><br><span class="line"></span><br><span class="line">    // 所使用的 fsync 策略（每个写入/每秒/从不）</span><br><span class="line">    int aof_fsync;                  /* Kind of fsync() policy */</span><br><span class="line">    char *aof_filename;             /* Name of the AOF file */</span><br><span class="line">    int aof_no_fsync_on_rewrite;    /* Don&apos;t fsync if a rewrite is in prog. */</span><br><span class="line">    int aof_rewrite_perc;           /* Rewrite AOF if % growth is &gt; M and... */</span><br><span class="line">    off_t aof_rewrite_min_size;     /* the AOF file is at least N bytes. */</span><br><span class="line"></span><br><span class="line">    // 最后一次执行 BGREWRITEAOF 时， AOF 文件的大小</span><br><span class="line">    off_t aof_rewrite_base_size;    /* AOF size on latest startup or rewrite. */</span><br><span class="line"></span><br><span class="line">    // AOF 文件的当前字节大小</span><br><span class="line">    off_t aof_current_size;         /* AOF current size. */</span><br><span class="line">    int aof_rewrite_scheduled;      /* Rewrite once BGSAVE terminates. */</span><br><span class="line"></span><br><span class="line">    // 负责进行 AOF 重写的子进程 ID</span><br><span class="line">    pid_t aof_child_pid;            /* PID if rewriting process */</span><br><span class="line"></span><br><span class="line">    // AOF 重写缓存链表，链接着多个缓存块</span><br><span class="line">    list *aof_rewrite_buf_blocks;   /* Hold changes during an AOF rewrite. */</span><br><span class="line"></span><br><span class="line">    // AOF 缓冲区</span><br><span class="line">    sds aof_buf;      /* AOF buffer, written before entering the event loop */</span><br><span class="line"></span><br><span class="line">    // AOF 文件的描述符</span><br><span class="line">    int aof_fd;       /* File descriptor of currently selected AOF file */</span><br><span class="line"></span><br><span class="line">    // AOF 的当前目标数据库</span><br><span class="line">    int aof_selected_db; /* Currently selected DB in AOF */</span><br><span class="line"></span><br><span class="line">    // 推迟 write 操作的时间</span><br><span class="line">    time_t aof_flush_postponed_start; /* UNIX time of postponed AOF flush */</span><br><span class="line"></span><br><span class="line">    // 最后一直执行 fsync 的时间</span><br><span class="line">    time_t aof_last_fsync;            /* UNIX time of last fsync() */</span><br><span class="line">    time_t aof_rewrite_time_last;   /* Time used by last AOF rewrite run. */</span><br><span class="line"></span><br><span class="line">    // AOF 重写的开始时间</span><br><span class="line">    time_t aof_rewrite_time_start;  /* Current AOF rewrite start time. */</span><br><span class="line"></span><br><span class="line">    // 最后一次执行 BGREWRITEAOF 的结果</span><br><span class="line">    int aof_lastbgrewrite_status;   /* REDIS_OK or REDIS_ERR */</span><br><span class="line"></span><br><span class="line">    // 记录 AOF 的 write 操作被推迟了多少次</span><br><span class="line">    unsigned long aof_delayed_fsync;  /* delayed AOF fsync() counter */</span><br><span class="line"></span><br><span class="line">    // 指示是否需要每写入一定量的数据，就主动执行一次 fsync()</span><br><span class="line">    int aof_rewrite_incremental_fsync;/* fsync incrementally while rewriting? */</span><br><span class="line">    int aof_last_write_status;      /* REDIS_OK or REDIS_ERR */</span><br><span class="line">    int aof_last_write_errno;       /* Valid if aof_last_write_status is ERR */</span><br><span class="line">    /* RDB persistence */</span><br><span class="line"></span><br><span class="line">    // 自从上次 SAVE 执行以来，数据库被修改的次数</span><br><span class="line">    long long dirty;                /* Changes to DB from the last save */</span><br><span class="line"></span><br><span class="line">    // BGSAVE 执行前的数据库被修改次数</span><br><span class="line">    long long dirty_before_bgsave;  /* Used to restore dirty on failed BGSAVE */</span><br><span class="line"></span><br><span class="line">    // 负责执行 BGSAVE 的子进程的 ID</span><br><span class="line">    // 没在执行 BGSAVE 时，设为 -1</span><br><span class="line">    pid_t rdb_child_pid;            /* PID of RDB saving child */</span><br><span class="line">    struct saveparam *saveparams;   /* Save points array for RDB */</span><br><span class="line">    int saveparamslen;              /* Number of saving points */</span><br><span class="line">    char *rdb_filename;             /* Name of RDB file */</span><br><span class="line">    int rdb_compression;            /* Use compression in RDB? */</span><br><span class="line">    int rdb_checksum;               /* Use RDB checksum? */</span><br><span class="line"></span><br><span class="line">    // 最后一次完成 SAVE 的时间</span><br><span class="line">    time_t lastsave;                /* Unix time of last successful save */</span><br><span class="line"></span><br><span class="line">    // 最后一次尝试执行 BGSAVE 的时间</span><br><span class="line">    time_t lastbgsave_try;          /* Unix time of last attempted bgsave */</span><br><span class="line"></span><br><span class="line">    // 最近一次 BGSAVE 执行耗费的时间</span><br><span class="line">    time_t rdb_save_time_last;      /* Time used by last RDB save run. */</span><br><span class="line"></span><br><span class="line">    // 数据库最近一次开始执行 BGSAVE 的时间</span><br><span class="line">    time_t rdb_save_time_start;     /* Current RDB save start time. */</span><br><span class="line"></span><br><span class="line">    // 最后一次执行 SAVE 的状态</span><br><span class="line">    int lastbgsave_status;          /* REDIS_OK or REDIS_ERR */</span><br><span class="line">    int stop_writes_on_bgsave_err;  /* Don&apos;t allow writes if can&apos;t BGSAVE */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /* Propagation of commands in AOF / replication */</span><br><span class="line">    redisOpArray also_propagate;    /* Additional command to propagate. */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /* Logging */</span><br><span class="line">    char *logfile;                  /* Path of log file */</span><br><span class="line">    int syslog_enabled;             /* Is syslog enabled? */</span><br><span class="line">    char *syslog_ident;             /* Syslog ident */</span><br><span class="line">    int syslog_facility;            /* Syslog facility */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /* Replication (master) */</span><br><span class="line">    int slaveseldb;                 /* Last SELECTed DB in replication output */</span><br><span class="line">    // 全局复制偏移量（一个累计值）</span><br><span class="line">    long long master_repl_offset;   /* Global replication offset */</span><br><span class="line">    // 主服务器发送 PING 的频率</span><br><span class="line">    int repl_ping_slave_period;     /* Master pings the slave every N seconds */</span><br><span class="line"></span><br><span class="line">    // backlog 本身</span><br><span class="line">    char *repl_backlog;             /* Replication backlog for partial syncs */</span><br><span class="line">    // backlog 的长度</span><br><span class="line">    long long repl_backlog_size;    /* Backlog circular buffer size */</span><br><span class="line">    // backlog 中数据的长度</span><br><span class="line">    long long repl_backlog_histlen; /* Backlog actual data length */</span><br><span class="line">    // backlog 的当前索引</span><br><span class="line">    long long repl_backlog_idx;     /* Backlog circular buffer current offset */</span><br><span class="line">    // backlog 中可以被还原的第一个字节的偏移量</span><br><span class="line">    long long repl_backlog_off;     /* Replication offset of first byte in the</span><br><span class="line">                                       backlog buffer. */</span><br><span class="line">    // backlog 的过期时间</span><br><span class="line">    time_t repl_backlog_time_limit; /* Time without slaves after the backlog</span><br><span class="line">                                       gets released. */</span><br><span class="line"></span><br><span class="line">    // 距离上一次有从服务器的时间</span><br><span class="line">    time_t repl_no_slaves_since;    /* We have no slaves since that time.</span><br><span class="line">                                       Only valid if server.slaves len is 0. */</span><br><span class="line"></span><br><span class="line">    // 是否开启最小数量从服务器写入功能</span><br><span class="line">    int repl_min_slaves_to_write;   /* Min number of slaves to write. */</span><br><span class="line">    // 定义最小数量从服务器的最大延迟值</span><br><span class="line">    int repl_min_slaves_max_lag;    /* Max lag of &lt;count&gt; slaves to write. */</span><br><span class="line">    // 延迟良好的从服务器的数量</span><br><span class="line">    int repl_good_slaves_count;     /* Number of slaves with lag &lt;= max_lag. */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /* Replication (slave) */</span><br><span class="line">    // 主服务器的验证密码</span><br><span class="line">    char *masterauth;               /* AUTH with this password with master */</span><br><span class="line">    // 主服务器的地址</span><br><span class="line">    char *masterhost;               /* Hostname of master */</span><br><span class="line">    // 主服务器的端口</span><br><span class="line">    int masterport;                 /* Port of master */</span><br><span class="line">    // 超时时间</span><br><span class="line">    int repl_timeout;               /* Timeout after N seconds of master idle */</span><br><span class="line">    // 主服务器所对应的客户端</span><br><span class="line">    redisClient *master;     /* Client that is master for this slave */</span><br><span class="line">    // 被缓存的主服务器，PSYNC 时使用</span><br><span class="line">    redisClient *cached_master; /* Cached master to be reused for PSYNC. */</span><br><span class="line">    int repl_syncio_timeout; /* Timeout for synchronous I/O calls */</span><br><span class="line">    // 复制的状态（服务器是从服务器时使用）</span><br><span class="line">    int repl_state;          /* Replication status if the instance is a slave */</span><br><span class="line">    // RDB 文件的大小</span><br><span class="line">    off_t repl_transfer_size; /* Size of RDB to read from master during sync. */</span><br><span class="line">    // 已读 RDB 文件内容的字节数</span><br><span class="line">    off_t repl_transfer_read; /* Amount of RDB read from master during sync. */</span><br><span class="line">    // 最近一次执行 fsync 时的偏移量</span><br><span class="line">    // 用于 sync_file_range 函数</span><br><span class="line">    off_t repl_transfer_last_fsync_off; /* Offset when we fsync-ed last time. */</span><br><span class="line">    // 主服务器的套接字</span><br><span class="line">    int repl_transfer_s;     /* Slave -&gt; Master SYNC socket */</span><br><span class="line">    // 保存 RDB 文件的临时文件的描述符</span><br><span class="line">    int repl_transfer_fd;    /* Slave -&gt; Master SYNC temp file descriptor */</span><br><span class="line">    // 保存 RDB 文件的临时文件名字</span><br><span class="line">    char *repl_transfer_tmpfile; /* Slave-&gt; master SYNC temp file name */</span><br><span class="line">    // 最近一次读入 RDB 内容的时间</span><br><span class="line">    time_t repl_transfer_lastio; /* Unix time of the latest read, for timeout */</span><br><span class="line">    int repl_serve_stale_data; /* Serve stale data when link is down? */</span><br><span class="line">    // 是否只读从服务器？</span><br><span class="line">    int repl_slave_ro;          /* Slave is read only? */</span><br><span class="line">    // 连接断开的时长</span><br><span class="line">    time_t repl_down_since; /* Unix time at which link with master went down */</span><br><span class="line">    // 是否要在 SYNC 之后关闭 NODELAY ？</span><br><span class="line">    int repl_disable_tcp_nodelay;   /* Disable TCP_NODELAY after SYNC? */</span><br><span class="line">    // 从服务器优先级</span><br><span class="line">    int slave_priority;             /* Reported in INFO and used by Sentinel. */</span><br><span class="line">    // 本服务器（从服务器）当前主服务器的 RUN ID</span><br><span class="line">    char repl_master_runid[REDIS_RUN_ID_SIZE+1];  /* Master run id for PSYNC. */</span><br><span class="line">    // 初始化偏移量</span><br><span class="line">    long long repl_master_initial_offset;         /* Master PSYNC offset. */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /* Replication script cache. */</span><br><span class="line">    // 复制脚本缓存</span><br><span class="line">    // 字典</span><br><span class="line">    dict *repl_scriptcache_dict;        /* SHA1 all slaves are aware of. */</span><br><span class="line">    // FIFO 队列</span><br><span class="line">    list *repl_scriptcache_fifo;        /* First in, first out LRU eviction. */</span><br><span class="line">    // 缓存的大小</span><br><span class="line">    int repl_scriptcache_size;          /* Max number of elements. */</span><br><span class="line"></span><br><span class="line">    /* Synchronous replication. */</span><br><span class="line">    list *clients_waiting_acks;         /* Clients waiting in WAIT command. */</span><br><span class="line">    int get_ack_from_slaves;            /* If true we send REPLCONF GETACK. */</span><br><span class="line">    /* Limits */</span><br><span class="line">    int maxclients;                 /* Max number of simultaneous clients */</span><br><span class="line">    unsigned long long maxmemory;   /* Max number of memory bytes to use */</span><br><span class="line">    int maxmemory_policy;           /* Policy for key eviction */</span><br><span class="line">    int maxmemory_samples;          /* Pricision of random sampling */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /* Blocked clients */</span><br><span class="line">    unsigned int bpop_blocked_clients; /* Number of clients blocked by lists */</span><br><span class="line">    list *unblocked_clients; /* list of clients to unblock before next loop */</span><br><span class="line">    list *ready_keys;        /* List of readyList structures for BLPOP &amp; co */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /* Sort parameters - qsort_r() is only available under BSD so we</span><br><span class="line">     * have to take this state global, in order to pass it to sortCompare() */</span><br><span class="line">    int sort_desc;</span><br><span class="line">    int sort_alpha;</span><br><span class="line">    int sort_bypattern;</span><br><span class="line">    int sort_store;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /* Zip structure config, see redis.conf for more information  */</span><br><span class="line">    size_t hash_max_ziplist_entries;</span><br><span class="line">    size_t hash_max_ziplist_value;</span><br><span class="line">    size_t list_max_ziplist_entries;</span><br><span class="line">    size_t list_max_ziplist_value;</span><br><span class="line">    size_t set_max_intset_entries;</span><br><span class="line">    size_t zset_max_ziplist_entries;</span><br><span class="line">    size_t zset_max_ziplist_value;</span><br><span class="line">    size_t hll_sparse_max_bytes;</span><br><span class="line">    time_t unixtime;        /* Unix time sampled every cron cycle. */</span><br><span class="line">    long long mstime;       /* Like &apos;unixtime&apos; but with milliseconds resolution. */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /* Pubsub */</span><br><span class="line">    // 字典，键为频道，值为链表</span><br><span class="line">    // 链表中保存了所有订阅某个频道的客户端</span><br><span class="line">    // 新客户端总是被添加到链表的表尾</span><br><span class="line">    dict *pubsub_channels;  /* Map channels to list of subscribed clients */</span><br><span class="line"></span><br><span class="line">    // 这个链表记录了客户端订阅的所有模式的名字</span><br><span class="line">    list *pubsub_patterns;  /* A list of pubsub_patterns */</span><br><span class="line"></span><br><span class="line">    int notify_keyspace_events; /* Events to propagate via Pub/Sub. This is an</span><br><span class="line">                                   xor of REDIS_NOTIFY... flags. */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /* Cluster */</span><br><span class="line"></span><br><span class="line">    int cluster_enabled;      /* Is cluster enabled? */</span><br><span class="line">    mstime_t cluster_node_timeout; /* Cluster node timeout. */</span><br><span class="line">    char *cluster_configfile; /* Cluster auto-generated config file name. */</span><br><span class="line">    struct clusterState *cluster;  /* State of the cluster */</span><br><span class="line"></span><br><span class="line">    int cluster_migration_barrier; /* Cluster replicas migration barrier. */</span><br><span class="line">    /* Scripting */</span><br><span class="line"></span><br><span class="line">    // Lua 环境</span><br><span class="line">    lua_State *lua; /* The Lua interpreter. We use just one for all clients */</span><br><span class="line">    </span><br><span class="line">    // 复制执行 Lua 脚本中的 Redis 命令的伪客户端</span><br><span class="line">    redisClient *lua_client;   /* The &quot;fake client&quot; to query Redis from Lua */</span><br><span class="line"></span><br><span class="line">    // 当前正在执行 EVAL 命令的客户端，如果没有就是 NULL</span><br><span class="line">    redisClient *lua_caller;   /* The client running EVAL right now, or NULL */</span><br><span class="line"></span><br><span class="line">    // 一个字典，值为 Lua 脚本，键为脚本的 SHA1 校验和</span><br><span class="line">    dict *lua_scripts;         /* A dictionary of SHA1 -&gt; Lua scripts */</span><br><span class="line">    // Lua 脚本的执行时限</span><br><span class="line">    mstime_t lua_time_limit;  /* Script timeout in milliseconds */</span><br><span class="line">    // 脚本开始执行的时间</span><br><span class="line">    mstime_t lua_time_start;  /* Start time of script, milliseconds time */</span><br><span class="line"></span><br><span class="line">    // 脚本是否执行过写命令</span><br><span class="line">    int lua_write_dirty;  /* True if a write command was called during the</span><br><span class="line">                             execution of the current script. */</span><br><span class="line"></span><br><span class="line">    // 脚本是否执行过带有随机性质的命令</span><br><span class="line">    int lua_random_dirty; /* True if a random command was called during the</span><br><span class="line">                             execution of the current script. */</span><br><span class="line"></span><br><span class="line">    // 脚本是否超时</span><br><span class="line">    int lua_timedout;     /* True if we reached the time limit for script</span><br><span class="line">                             execution. */</span><br><span class="line"></span><br><span class="line">    // 是否要杀死脚本</span><br><span class="line">    int lua_kill;         /* Kill the script if true. */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /* Assert &amp; bug reporting */</span><br><span class="line"></span><br><span class="line">    char *assert_failed;</span><br><span class="line">    char *assert_file;</span><br><span class="line">    int assert_line;</span><br><span class="line">    int bug_report_start; /* True if bug report header was already logged. */</span><br><span class="line">    int watchdog_period;  /* Software watchdog period in ms. 0 = off */</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;数据库&quot;&gt;&lt;a href=&quot;#数据库&quot; class=&quot;headerlink&quot; title=&quot;数据库&quot;&gt;&lt;/a&gt;数据库&lt;/h3&gt;&lt;p&gt;Redis服务器将所有的数据库都保存在服务器状态redisServer结构的db数组中，db数组的每项都是一个redisDb结构，每
      
    
    </summary>
    
      <category term="Redis" scheme="http://ylovex.cn/categories/Redis/"/>
    
    
      <category term="Redis" scheme="http://ylovex.cn/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-二叉树的序列化与反序列化</title>
    <link href="http://ylovex.cn/2019/07/27/LeetCode-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://ylovex.cn/2019/07/27/LeetCode-二叉树的序列化与反序列化/</id>
    <published>2019-07-26T23:43:07.000Z</published>
    <updated>2019-07-30T23:59:19.661Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a>题目来源</h3><p><a href="https://leetcode-cn.com/problems/serialize-and-deserialize-binary-tree/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/serialize-and-deserialize-binary-tree/</a></p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>序列化是将一个数据结构或者对象转换为连续的比特位的操作，进而可以将转换后的数据存储在一个文件或者内存中，同时也可以通过网络传输到另一个计算机环境，采取相反方式重构得到原数据。</p><p>请设计一个算法来实现二叉树的序列化与反序列化。这里不限定你的序列 / 反序列化算法执行逻辑，你只需要保证一个二叉树可以被序列化为一个字符串并且将这个字符串反序列化为原始的树结构。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>根据前序遍历的顺序来序列化二叉树，因为前序遍历是从根节点开始的，在遍历到null节点的时候，可以将null节点序列化为字符串”null“，反序列化也是按照前序遍历递归的重建二叉树。</p><h3 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">package le;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayDeque;</span><br><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.Queue;</span><br><span class="line"></span><br><span class="line">public class le_297 &#123;</span><br><span class="line">    class TreeNode&#123;</span><br><span class="line">        int val;</span><br><span class="line">        TreeNode left;</span><br><span class="line">        TreeNode right;</span><br><span class="line">        TreeNode(int x)&#123;val=x;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String serialize(TreeNode root)&#123;</span><br><span class="line">        if(root==null)&#123;</span><br><span class="line">            return &quot;null,&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder stringBuilder = new StringBuilder();</span><br><span class="line">        stringBuilder.append(root.val + &quot;,&quot;);</span><br><span class="line">        stringBuilder.append(serialize(root.left));</span><br><span class="line">        stringBuilder.append(serialize(root.right));</span><br><span class="line">        return stringBuilder.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public TreeNode deserialize(String data)&#123;</span><br><span class="line">        String[] strings = data.split(&quot;,&quot;);</span><br><span class="line">        Queue&lt;String&gt; queue = new ArrayDeque&lt;&gt;(Arrays.asList(strings));</span><br><span class="line">        return func(queue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private TreeNode func(Queue&lt;String&gt; queue) &#123;</span><br><span class="line">        String string = queue.remove();</span><br><span class="line">        if(&quot;null&quot;.equals(string))&#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        TreeNode node = new TreeNode(Integer.parseInt(string));</span><br><span class="line">        node.left = func(queue);</span><br><span class="line">        node.right = func(queue);</span><br><span class="line">        return node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目来源&quot;&gt;&lt;a href=&quot;#题目来源&quot; class=&quot;headerlink&quot; title=&quot;题目来源&quot;&gt;&lt;/a&gt;题目来源&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/serialize-and-deseri
      
    
    </summary>
    
      <category term="leetcode" scheme="http://ylovex.cn/categories/leetcode/"/>
    
    
      <category term="code" scheme="http://ylovex.cn/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>java基础面试题总结</title>
    <link href="http://ylovex.cn/2019/07/25/java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <id>http://ylovex.cn/2019/07/25/java基础面试题总结/</id>
    <published>2019-07-25T13:06:02.000Z</published>
    <updated>2019-07-30T13:09:56.368Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JavaSE部分"><a href="#JavaSE部分" class="headerlink" title="JavaSE部分"></a>JavaSE部分</h2><h3 id="1、Java基础"><a href="#1、Java基础" class="headerlink" title="1、Java基础"></a>1、Java基础</h3><h5 id="为什么重写equals还要重写hashcode"><a href="#为什么重写equals还要重写hashcode" class="headerlink" title="为什么重写equals还要重写hashcode"></a>为什么重写equals还要重写hashcode</h5><p>java编程里有关约定：如果两个对象根据equals方法比较是相等的，那么调用这两个对象的任意一个hashcode方法都必须产生相同的结果。</p><p>为了正常的使用集合类，比如在HashSet中加对象的时候，会首先用到对象的hashCode值，如果不相等就认为肯定不是一个对象，从而可以省去equals的调用开销，如果两个对象 equals 相等，但是 hashCode 不相等，会导致在 HashSet 中认为是两个不相等的对象，两个对象都会被加入到 HashSet，可能会导致程序异常。</p><h5 id="说一下map的分类和常见的情况"><a href="#说一下map的分类和常见的情况" class="headerlink" title="说一下map的分类和常见的情况"></a>说一下map的分类和常见的情况</h5><p>HashMap：最常用的Map，根据键的hashcode值来存储数据，根据键可以直接获得他的值（因为相同的键hashcode值相同，在地址为hashcode值的地方存储的就是值，所以根据键可以直接获得值），具有很快的访问速度，遍历时，取得数据的顺序完全是随机的，HashMap最多只允许一条记录的键为null，允许多条记录的值为null，HashMap不支持线程同步，即任意时刻可以有多个线程同时写HashMap，这样对导致数据不一致，如果需要同步，可以使用synchronziedMap的方法使得HashMap具有同步的能力或者使用concurrentHashMap</p><p>HashTable：与HashMap类似，不同的是，它不允许记录的键或值为空，支持线程同步，即任意时刻只能有一个线程写HashTable，因此也导致HashTable在写入时比较慢!</p><p>LinkedHasMap：是HahsMap的一个子类，但它保持了记录的插入顺序，遍历时先得到的肯定是先插入的，也可以在构造时带参数，按照应用次数排序，在遍历时会比HahsMap慢，不过有个例外，当HashMap的容量很大，实际数据少时，遍历起来会比LinkedHashMap慢（因为它是链啊），因为HashMap的遍历速度和它容量有关，LinkedHashMap遍历速度只与数据多少有关</p><p>TreeMap：实现了sortMap接口，能够把保存的记录按照键排序（默认升序），也可以指定排序比较器，遍历时得到的数据是排过序的</p><h5 id="Object若不重写hashCode-的话，hashCode-如何计算出来的？"><a href="#Object若不重写hashCode-的话，hashCode-如何计算出来的？" class="headerlink" title="Object若不重写hashCode()的话，hashCode()如何计算出来的？"></a>Object若不重写hashCode()的话，hashCode()如何计算出来的？</h5><p>Object的hashcode方法是本地方法，也就是用c语言或者c++实现的，是通过该对象的内存地址进行hash计算得到的。</p><h5 id="比较的是什么？"><a href="#比较的是什么？" class="headerlink" title="==比较的是什么？"></a>==比较的是什么？</h5><p>“==”判断的是两个对象的内存地址是否一样，适用于原始数据类型和枚举类型（它们的变量存储的是值本身，而引用类型变量存储的是引用）；equals是Object类的方法，Object对它的实现是比较内存地址，我们可以重写这个方法来自定义“相等”这个概念。比如类库中的String、Date等类就对这个方法进行了重写。</p><p>综上，对于枚举类型和原始数据类型的相等性比较，应该使用”==”；对于引用类型的相等性比较，应该使用equals方法。</p><h5 id="若对一个类不重写，它的equals-方法是如何比较的？"><a href="#若对一个类不重写，它的equals-方法是如何比较的？" class="headerlink" title="若对一个类不重写，它的equals()方法是如何比较的？"></a>若对一个类不重写，它的equals()方法是如何比较的？</h5><p>如果没有对equals方法进行重写，则比较的是引用类型的变量所指向的对象的地址；</p><p>诸如String、Date等类对equals方法进行了重写的话，比较的是所指向的对象的内容。</p><h5 id="java8新特性"><a href="#java8新特性" class="headerlink" title="java8新特性"></a>java8新特性</h5><p>接口的默认方法实现与静态方法、Lambda表达式、函数式接口、方法与构造函数引用、新的日期与时间API、流式处理等重要特性。</p><h5 id="说说Lamda表达式的优缺点。"><a href="#说说Lamda表达式的优缺点。" class="headerlink" title="说说Lamda表达式的优缺点。"></a>说说Lamda表达式的优缺点。</h5><p>优点：1. 简洁。2. 非常容易并行计算。3. 可能代表未来的编程趋势。</p><p>缺点：1. 若不用并行计算，很多时候计算速度没有比传统的 for 循环快。（并行计算有时需要预热才显示出效率优势）2. 不容易调试。3. 若其他程序员没有学过 lambda 表达式，代码不容易让其他语言的程序员看懂。</p><h5 id="一个十进制的数在内存中是怎么存的？"><a href="#一个十进制的数在内存中是怎么存的？" class="headerlink" title="一个十进制的数在内存中是怎么存的？"></a>一个十进制的数在内存中是怎么存的？</h5><p>以二进制补码形式存储，最高位是符号位，正数的补码是它的原码，负数的补码是它的反码加1，在求反码时符号位不变，符号位为1，其他位取反</p><h5 id="为啥有时会出现4-0-3-6-0-40000001这种现象？"><a href="#为啥有时会出现4-0-3-6-0-40000001这种现象？" class="headerlink" title="为啥有时会出现4.0-3.6=0.40000001这种现象？"></a>为啥有时会出现4.0-3.6=0.40000001这种现象？</h5><p>2进制的小数无法精确的表达10进制小数，计算机在计算10进制小数的过程中要先转换为2进制进行计算，这个过程中出现了误差。</p><h5 id="Java支持的数据类型有哪些？什么是自动拆装箱？"><a href="#Java支持的数据类型有哪些？什么是自动拆装箱？" class="headerlink" title="Java支持的数据类型有哪些？什么是自动拆装箱？"></a>Java支持的数据类型有哪些？什么是自动拆装箱？</h5><p>基本数据类型：<br>整数值型：byte,short,int,long,<br>字符型：char<br>浮点类型：float,double<br>布尔型：boolean<br>整数默认int型，小数默认是double型。Float和long类型的必须加后缀。</p><p>首先知道String是引用类型不是基本类型，引用类型声明的变量是指该变量在内存中实际存储的是一个引用地址，实体在堆中。引用类型包括类、接口、数组等。String类还是final修饰的。</p><p>而包装类就属于引用类型，自动装箱和拆箱就是基本类型和引用类型之间的转换，至于为什么要转换，因为基本类型转换为引用类型后，就可以new对象，从而调用包装类中封装好的方法进行基本类型之间的转换或者toString（当然用类名直接调用也可以，便于一眼看出该方法是静态的），还有就是如果集合中想存放基本类型，泛型的限定类型只能是对应的包装类型。</p><h5 id="什么是值传递和引用传递？"><a href="#什么是值传递和引用传递？" class="headerlink" title="什么是值传递和引用传递？"></a>什么是值传递和引用传递？</h5><p>1、值传递</p><p>在方法的调用过程中，实参把它的实际值传递给形参，此传递过程就是将实参的值复制一份传递到函数中，这样如果在函数中对该值（形参的值）进行了操作将不会影响实参的值。因为是直接复制，所以这种方式在传递大量数据时，运行效率会特别低下。</p><p>2、引用传递</p><p>引用传递弥补了值传递的不足，如果传递的数据量很大，直接复过去的话，会占用大量的内存空间，而引用传递就是将对象的地址值传递过去，函数接收的是原始值的首地址值。在方法的执行过程中，形参和实参的内容相同，指向同一块内存地址，也就是说操作的其实都是源数据，所以方法的执行将会影响到实际对象。</p><h5 id="数组-Array-和列表-ArrayList-有什么区别？什么时候应该使用Array而不是ArrayList？"><a href="#数组-Array-和列表-ArrayList-有什么区别？什么时候应该使用Array而不是ArrayList？" class="headerlink" title="数组(Array)和列表(ArrayList)有什么区别？什么时候应该使用Array而不是ArrayList？"></a>数组(Array)和列表(ArrayList)有什么区别？什么时候应该使用Array而不是ArrayList？</h5><p>1、存储内容比较：<br>Array 数组可以包含基本类型和对象类型，<br>ArrayList 却只能包含对象类型。<br>Array 数组在存放的时候一定是同种类型的元素。ArrayList 就不一定了 。</p><p>2、空间大小比较：<br>Array 数组的空间大小是固定的,所以需要事前确定合适的空间大小。<br>ArrayList 的空间是动态增长的,而且，每次添加新的元素的时候都会检查内部数组的空间是否足够。</p><p>3.方法上的比较：<br>ArrayList 方法上比 Array 更多样化，比如添加全部 addAll()、删除全部 removeAll()、返回迭代器 iterator() 等。</p><p>适用场景：</p><p>如果想要保存一些在整个程序运行期间都会存在而且不变的数据，我们可以将它们放进一个全局数组里， 但是如果我们单纯只是想要以数组的形式保存数据，而不对数据进行增加等操作，只是方便我们进行查找的话，那么，我们就选择 ArrayList。</p><p>如果我们需要对元素进行频繁的移动或删除，或者是处理的是超大量的数据，那么，使用 ArrayList 就真的不是一个好的选择，因为它的效率很低，使用数组进行这样的动作就很麻烦，那么，我们可以考虑选择 LinkedList。</p><h5 id="你了解大O符号-big-O-notation-么？你能给出不同数据结构的例子么？"><a href="#你了解大O符号-big-O-notation-么？你能给出不同数据结构的例子么？" class="headerlink" title="你了解大O符号(big-O notation)么？你能给出不同数据结构的例子么？"></a>你了解大O符号(big-O notation)么？你能给出不同数据结构的例子么？</h5><p>大O符号表示一个程序运行时所需要的渐进时间复杂度上界。</p><p>其函数表示是：对于函数f(n),g(n),如果存在一个常数c，使得f(n)&lt;=c*g(n),则f(n)=O(g(n));</p><p>大O描述当数据结构中的元素增加时，算法的规模和性能在最坏情景下有多好。</p><p>大O还可以描述其它行为，比如内存消耗。因为集合类实际上是数据结构，因此我们一般使用大O符号基于时间，内存，性能选择最好的实现。大O符号可以对大量数据性能给予一个很好的说明。</p><h5 id="String是最基本的数据类型吗"><a href="#String是最基本的数据类型吗" class="headerlink" title="String是最基本的数据类型吗?"></a>String是最基本的数据类型吗?</h5><p>不是，是一个final修饰的java类</p><h5 id="int-和-Integer-有什么区别"><a href="#int-和-Integer-有什么区别" class="headerlink" title="int 和 Integer 有什么区别"></a>int 和 Integer 有什么区别</h5><p>1、Integer是int的包装类，int则是java的一种基本数据类型<br>2、Integer变量必须实例化后才能使用，而int变量不需要<br>3、Integer实际是对象的引用，当new一个Integer时，实际上是生成一个指针指向此对象；而int则是直接存储数据值<br>4、Integer的默认值是null，int的默认值是0</p><h5 id="String-和StringBuffer的区别"><a href="#String-和StringBuffer的区别" class="headerlink" title="String 和StringBuffer的区别"></a>String 和StringBuffer的区别</h5><p>String: 不可变的字符序列，若要向其中添加新字符需要创建一个新的String对象<br>StringBuilder: 可变字符序列，支持向其中添加新字符（无需创建新对象）<br>StringBuffer: 可以看作线程安全版的StringBuilder</p><h5 id="我们在web应用开发过程中经常遇到输出某种编码的字符，如iso8859-1等，如何输出一个某种编码的字符串？"><a href="#我们在web应用开发过程中经常遇到输出某种编码的字符，如iso8859-1等，如何输出一个某种编码的字符串？" class="headerlink" title="我们在web应用开发过程中经常遇到输出某种编码的字符，如iso8859-1等，如何输出一个某种编码的字符串？"></a>我们在web应用开发过程中经常遇到输出某种编码的字符，如iso8859-1等，如何输出一个某种编码的字符串？</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public String translate (String str) &#123;</span><br><span class="line">        </span><br><span class="line">        String tempStr = &quot;&quot;;</span><br><span class="line">        </span><br><span class="line">        try &#123;</span><br><span class="line">            tempStr = new String(str.getBytes(&quot;ISO-8859-1&quot;), &quot;GBK&quot;);</span><br><span class="line">            tempStr = tempStr.trim();</span><br><span class="line">        &#125;catch (Exception e) &#123;</span><br><span class="line">            System.err.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        return tempStr;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h5 id="Java中的四种引用及其应用场景是什么？"><a href="#Java中的四种引用及其应用场景是什么？" class="headerlink" title="Java中的四种引用及其应用场景是什么？"></a>Java中的四种引用及其应用场景是什么？</h5><p>强引用: 通常我们使用new操作符创建一个对象时所返回的引用即为强引用</p><p>软引用: 若一个对象只能通过软引用到达，那么这个对象在内存不足时会被回收，可用于图片缓存中，内存不足时系统会自动回收不再使用的Bitmap</p><p>弱引用: 若一个对象只能通过弱引用到达，那么它就会被回收（即使内存充足），同样可用于图片缓存中，这时候只要Bitmap不再使用就会被回收</p><p>虚引用: 虚引用是Java中最“弱”的引用，通过它甚至无法获取被引用的对象，它存在的唯一作用就是当它指向的对象回收时，它本身会被加入到引用队列中，这样我们可以知道它指向的对象何时被销毁。</p><h5 id="amp-和-amp-amp-的区别？"><a href="#amp-和-amp-amp-的区别？" class="headerlink" title="&amp;和&amp;&amp;的区别？"></a>&amp;和&amp;&amp;的区别？</h5><p>Java中&amp;&amp;和&amp;都是表示与的逻辑运算符，都表示逻辑运输符and，当两边的表达式都为true的时候，整个运算结果才为true，否则为false。</p><p>&amp;&amp;的短路功能，当第一个表达式的值为false的时候，则不再计算第二个表达式；&amp;则两个表达式都执行。</p><p>&amp;可以用作位运算符，当&amp;两边的表达式不是Boolean类型的时候，&amp;表示按位操作</p><h5 id="在Java中，如何跳出当前的多重嵌套循环？"><a href="#在Java中，如何跳出当前的多重嵌套循环？" class="headerlink" title="在Java中，如何跳出当前的多重嵌套循环？"></a>在Java中，如何跳出当前的多重嵌套循环？</h5><p>在Java中，要想跳出多重循环，可以在外面的循环语句前定义一个标号，然后在里层循环体的代码中使用带有标号的break 语句，即可跳出外层循环。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ok:</span><br><span class="line">    for(int i=0;i&lt;10;i++)    &#123;</span><br><span class="line">        for(int j=0;j&lt;10;j++)  &#123;</span><br><span class="line">            System.out.println(“i=” + i + “,j=” + j);</span><br><span class="line">            if(j == 5) break ok;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">for(int i=0;i&lt;4;i++)&#123;</span><br><span class="line">                for(int j=0;j&lt;5;j++)&#123;</span><br><span class="line">                    System.out.println(&quot;i=&quot;+i+&quot;; j=&quot;+j);</span><br><span class="line">                    if(j==3)&#123;</span><br><span class="line">                        i=4;</span><br><span class="line">                        break;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>或者让外层的循环条件表达式的结果可以受到里层循环体代码的控制，例如，要在二维数组中查找到某个数字。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int arr[][] = &#123;&#123;1,2,3&#125;,&#123;4,5,6,7&#125;,&#123;9&#125;&#125;;</span><br><span class="line">boolean found = false;</span><br><span class="line">for(int i=0;i&lt;arr.length &amp;&amp; !found;i++)    &#123;</span><br><span class="line">        for(int j=0;j&lt;arr[i].length;j++)&#123;</span><br><span class="line">            System.out.println(“i=” + i + “,j=” + j);</span><br><span class="line">            if(arr[i][j]  == 5) &#123;</span><br><span class="line">                found = true;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="你能比较一下Java和JavaSciprt吗？"><a href="#你能比较一下Java和JavaSciprt吗？" class="headerlink" title="你能比较一下Java和JavaSciprt吗？"></a>你能比较一下Java和JavaSciprt吗？</h5><p>1）基于对象和面向对象：Java是一种真正的面向对象的语言，即使是开发简单的程序，必须设计对象；JavaScript是种脚本语言，它可以用来制作与网络无关的，与用户交互作用的复杂软件。它是一种基于对象（Object-Based）和事件驱动（Event-Driven）的编程语言。因而它本身提供了非常丰富的内部对象供设计人员使用；<br>2）解释和编译：Java 的源代码在执行之前，必须经过编译；JavaScript 是一种解释性编程语言，其源代码不需经过编译，由浏览器解释执行；<br>3）强类型变量和类型弱变量：Java采用强类型变量检查，即所有变量在编译之前必须作声明；JavaScript中变量声明，采用其弱类型。即变量在使用前不需作声明，而是解释器在运行时检查其数据类型；</p><p>4）代码格式不一样。</p><h5 id="简述正则表达式及其用途。"><a href="#简述正则表达式及其用途。" class="headerlink" title="简述正则表达式及其用途。"></a>简述正则表达式及其用途。</h5><p>在编写处理字符串的程序时，经常会有查找符合某些复杂规则的字符串的需要。正则表达式就是用于描述这些规则的工具。换句话说，正则表达式就是记录文本规则的代码。计算机处理的信息更多的时候不是数值而是字符串，正则表达式就是在进行字符串匹配和处理的时候最为强大的工具，绝大多数语言都提供了对正则表达式的支持。</p><h5 id="Java中是如何支持正则表达式操作的？"><a href="#Java中是如何支持正则表达式操作的？" class="headerlink" title="Java中是如何支持正则表达式操作的？"></a>Java中是如何支持正则表达式操作的？</h5><p>ava中的String类提供了支持正则表达式操作的方法，包括：matches()、replaceAll()、replaceFirst()、split()。此外，Java中可以用Pattern类表示正则表达式对象，它提供了丰富的API进行各种正则表达式操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">面试题： - 如果要从字符串中截取第一个英文左括号之前的字符串，例如：北京市(朝阳区)(西城区)(海淀区)，截取结果为：北京市，那么正则表达式怎么写？</span><br><span class="line"></span><br><span class="line">import java.util.regex.Matcher;</span><br><span class="line">import java.util.regex.Pattern;</span><br><span class="line"> </span><br><span class="line">class RegExpTest &#123;</span><br><span class="line"> </span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        String str = &quot;北京市(朝阳区)(西城区)(海淀区)&quot;;</span><br><span class="line">        Pattern p = Pattern.compile(&quot;.*?(?=\\()&quot;);</span><br><span class="line">        Matcher m = p.matcher(str);</span><br><span class="line">        if(m.find()) &#123;</span><br><span class="line">            System.out.println(m.group());</span><br><span class="line">     、   &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="请你说说Java和PHP的区别？"><a href="#请你说说Java和PHP的区别？" class="headerlink" title="请你说说Java和PHP的区别？"></a>请你说说Java和PHP的区别？</h5><p>PHP暂时还不支持像Java那样JIT运行时编译热点代码,但是PHP具有opcache机制,能够把脚本对应的opcode缓存在内存,PHP7中还支持配置opcache.file_cache导出opcode到文件.第三方的Facebook HHVM也支持JIT.另外PHP官方基于LLVM围绕opcache机制构建的Zend JIT分支也正在开发测试中.在php-src/Zend/bench.php测试显示,PHP JIT分支速度是PHP 5.4的10倍.<br>PHP的库函数用C实现,而Java核心运行时类库(jdk/jre/lib/rt.jar,大于60MB)用Java编写(jdk/src.zip), 所以Java应用运行的时候,用户编写的代码以及引用的类库和框架都要在JVM上解释执行. Java的HotSpot机制,直到有方法被执行10000次才会触发JIT编译, 在此之前运行在解释模式下,以避免出现JIT编译花费的时间比方法解释执行消耗的时间还要多的情况.</p><p>PHP内置模板引擎,自身就是模板语言.而Java Web需要使用JSP容器如Tomcat或第三方模板引擎.</p><p>PHP也可以运行在多线程模式下,比如Apache的event MPM和Facebook的HHVM都是多线程架构.不管是多进程还是多线程的PHP Web运行模式,都不需要PHP开发者关心和控制,也就是说PHP开发者不需要写代码参与进程和线程的管理,这些都由PHP-FPM/HHVM/Apache实现.PHP-FPM进程管理和并发实现并不需要PHP开发者关心,而Java多线程编程需要Java开发者编码参与.PHP一个worker进程崩溃,master进程会自动新建一个新的worker进程,并不会导致PHP服务崩溃.而Java多线程编程稍有不慎(比如没有捕获异常)就会导致JVM崩溃退出.对于PHP-FPM和Apache MOD_PHP来说,服务进程常驻内存,但一次请求释放一次资源,这种内存释放非常彻底. PHP基于引用计数的GC甚至都还没发挥作用程序就已经结束了。</p><h3 id="2、关键字"><a href="#2、关键字" class="headerlink" title="2、关键字"></a>2、关键字</h3><h5 id="介绍一下Syncronized锁，如果用这个关键字修饰一个静态方法，锁住了什么？如果修饰成员方法，锁住了什么？"><a href="#介绍一下Syncronized锁，如果用这个关键字修饰一个静态方法，锁住了什么？如果修饰成员方法，锁住了什么？" class="headerlink" title="介绍一下Syncronized锁，如果用这个关键字修饰一个静态方法，锁住了什么？如果修饰成员方法，锁住了什么？"></a>介绍一下Syncronized锁，如果用这个关键字修饰一个静态方法，锁住了什么？如果修饰成员方法，锁住了什么？</h5><p> 在synchronized里面，包含有三种常见的锁状态：<br>对于普通的同步方法：<br>锁是当前的对象<br>对于静态函数的同步方法：<br>锁是指引用当前类的class对象<br>对于同步方法块的内容：<br>锁是指Synchonized括号里配置的对象</p><h5 id="介绍一下volatile？"><a href="#介绍一下volatile？" class="headerlink" title="介绍一下volatile？"></a>介绍一下volatile？</h5><p>volatile作为java中的关键词之一，用以声明变量的值可能随时会被别的线程修改，使用volatile修饰的变量会强制将修改的值立即写入主存，主存中值的更新会使缓存中的值失效(非volatile变量不具备这样的特性，非volatile变量的值会被缓存，线程A更新了这个值，线程B读取这个变量的值时可能读到的并不是是线程A更新后的值)。volatile会禁止指令重排 volatile具有可见性、有序性，不具备原子性。 注意，volatile不具备原子性，这是volatile与java中的synchronized、java.util.concurrent.locks.Lock最大的功能差异，这一点在面试中也是非常容易问到的点</p><h5 id="锁有了解嘛，说一下Synchronized和lock"><a href="#锁有了解嘛，说一下Synchronized和lock" class="headerlink" title="锁有了解嘛，说一下Synchronized和lock"></a>锁有了解嘛，说一下Synchronized和lock</h5><p>Lock是一个接口，而synchronized是关键字。</p><p>synchronized会自动释放锁，而Lock必须手动释放锁。</p><p>Lock可以让等待锁的线程响应中断，而synchronized不会，线程会一直等待下去。</p><p>通过Lock可以知道线程有没有拿到锁，而synchronized不能。</p><p>Lock能提高多个线程读操作的效率。</p><p>synchronized能锁住类、方法和代码块，而Lock是块范围内的</p><h5 id="讲一讲Java里面的final关键字怎么用的？"><a href="#讲一讲Java里面的final关键字怎么用的？" class="headerlink" title="讲一讲Java里面的final关键字怎么用的？"></a>讲一讲Java里面的final关键字怎么用的？</h5><p>(1)修饰类：表示该类不能被继承；</p><p>(2)修饰方法：表示方法不能被重写；</p><p>(3)修饰变量：表示变量只能赋值一次且赋值以后值不能被修改（常量）</p><h3 id="3、面向对象"><a href="#3、面向对象" class="headerlink" title="3、面向对象"></a>3、面向对象</h3><h5 id="wait方法底层原理"><a href="#wait方法底层原理" class="headerlink" title="wait方法底层原理"></a>wait方法底层原理</h5><p>object中的方法，可以暂停线程，期间会释放对象锁，不像sleep方法，线程休眠期依然持有锁，wait方法的线程，必须调用notify或notifyAll方法唤醒线程！</p><h5 id="Java有哪些特性，举个多态的例子。"><a href="#Java有哪些特性，举个多态的例子。" class="headerlink" title="Java有哪些特性，举个多态的例子。"></a>Java有哪些特性，举个多态的例子。</h5><p>继承、封装、多态。多态的主要特征就是父类引用指向子类对象，生活中的例子：Animal animal = new Dog();</p><h5 id="String为啥不可变？"><a href="#String为啥不可变？" class="headerlink" title="String为啥不可变？"></a>String为啥不可变？</h5><p>string是final修饰，不可变，同时string底层是字符串数组也是final修饰，这样做首先是安全，比如hashset中用string做为键，不会出现string变化，导致违反唯一键。另外节约内存。</p><h5 id="类和对象的区别"><a href="#类和对象的区别" class="headerlink" title="类和对象的区别"></a>类和对象的区别</h5><p>1，类是一个抽象的概念，它不存在于现实中的时间/空间里，类只是为所有的对象定义了抽象的属性与行为。就好像“Person（人）”这个类，它虽然可以包含很多个体，但它本身不存在于现实世界上。</p><p>2，对象是类的一个具体。它是一个实实在在存在的东西。</p><p>3，类是一个静态的概念，类本身不携带任何数据。当没有为类创建任何对象时，类本身不存在于内存空间中。</p><p>4，对象是一个动态的概念。每一个对象都存在着有别于其它对象的属于自己的独特的属性和行为。对象的属性可以随着它自己的行为而发生改变。</p><h5 id="请列举你所知道的Object类的方法。"><a href="#请列举你所知道的Object类的方法。" class="headerlink" title="请列举你所知道的Object类的方法。"></a>请列举你所知道的Object类的方法。</h5><p>getClass():用于返回当前运行时对象的Class对象，使用了final关键字修饰，故不允许子类重写；</p><p>equals():用于比较两个对象的地址是否相同，即两个引用是否指向同一个对象；</p><p>clone():用于创建并返回当前对象的一份拷贝；</p><p>toString():返回类的名字@实例的哈希码的16进制字符串；</p><p>notify():唤醒等待队列中的其中一个线程；</p><p>notifyAll():唤醒线程等待队列中的所有线程；</p><p>wait(long timeout):让一个线程等待一段时间。</p><h5 id="重载和重写的区别？相同参数不同返回值能重载吗？"><a href="#重载和重写的区别？相同参数不同返回值能重载吗？" class="headerlink" title="重载和重写的区别？相同参数不同返回值能重载吗？"></a>重载和重写的区别？相同参数不同返回值能重载吗？</h5><p>重载：同名不同参，参数的类型和个数没有具体的限制，一般构造方法使用的比较多，他展现的是编译时的多态性</p><p>重写：是对父类的方法重新进行定义在继承父类的方法的时候可以通过重写保证和定义特定于自己的行为，它展现的是运行时的多态性</p><p>返回值类型作为函数运行之后的一个状态，他是保持方法的调用者与被调用者进行通信的关键，并不能作为某个方法的标识，所以通过返回类型并不能区分重载的方法，应该根据所要区分的方法的方法名是否相同并且方法中所带的参数去区分</p><h5 id="”static”关键字是什么意思？Java中是否可以覆盖-override-一个private或者是static的方法？"><a href="#”static”关键字是什么意思？Java中是否可以覆盖-override-一个private或者是static的方法？" class="headerlink" title="”static”关键字是什么意思？Java中是否可以覆盖(override)一个private或者是static的方法？"></a>”static”关键字是什么意思？Java中是否可以覆盖(override)一个private或者是static的方法？</h5><p> “static”关键字表明一个成员变量或者是成员方法可以在没有所属的类的实例变量的情况下被访问。</p><p>Java中static方法不能被覆盖，因为方法覆盖是基于运行时动态绑定的，而static方法是编译时静态绑定的。static方法跟类的任何实例都不相关，所以概念上不适用。</p><p>java中也不可以覆盖private的方法，因为private修饰的变量和方法只能在当前类中使用，如果是其他的类继承当前类是不能访问到private变量或方法的，当然也不能覆盖。</p><h5 id="String能继承吗？"><a href="#String能继承吗？" class="headerlink" title="String能继承吗？"></a>String能继承吗？</h5><p>不能被继承，因为String类有final修饰符，而final修饰的类是不能被继承的。</p><h5 id="StringBuffer和StringBuilder有什么区别，底层实现上呢？"><a href="#StringBuffer和StringBuilder有什么区别，底层实现上呢？" class="headerlink" title="StringBuffer和StringBuilder有什么区别，底层实现上呢？"></a>StringBuffer和StringBuilder有什么区别，底层实现上呢？</h5><p>StringBuffer 与 StringBuilder 中的方法和功能完全是等价的，</p><p>只是StringBuffer 中的方法大都采用了 synchronized 关键字进行修饰，因此是线程安全的，</p><p>而 StringBuilder 没有这个修饰，可以被认为是线程不安全的。 </p><p>在单线程程序下，StringBuilder效率更快，因为它不需要加锁，不具备多线程安全</p><p>而StringBuffer则每次都需要判断锁，效率相对更低</p><h5 id="类加载机制，双亲委派模型，好处是什么？"><a href="#类加载机制，双亲委派模型，好处是什么？" class="headerlink" title="类加载机制，双亲委派模型，好处是什么？"></a>类加载机制，双亲委派模型，好处是什么？</h5><p>类加载，JVM第一次使用到这个类时需要对，这个类的信息进行加载。一个类只会加载一次，之后这个类的信息放在堆空间，静态属性放在方法区。<br>JVM类加载器从上到下一共分为三类</p><ol><li>启动类加载器(Bootstrap ClassLoader)：负责加载 JAVA_HOME\lib 目录中的，或通过-Xbootclasspath参数指定路径中的，且被虚拟机认可（按文件名识别，如rt.jar）的类。</li><li>扩展类加载器(Extension ClassLoader)：负责加载 JAVA_HOME\lib\ext 目录中的，或通过java.ext.dirs系统变量指定路径中的类库。</li><li>应用程序类加载器(Application ClassLoader)：负责加载用户路径（classpath）上的类库。</li></ol><p>当一个加载器不管是应用程序类加载器还是我们自定义的类加载器在进行类加载的时候它首先不会自己去加载，它首先会把加载任务委派给自己的父类加载器，比如现在有个类需要我们的自定义类加载器来加载，其实它首先会把它交给应用程序类加载器，应用程序类加载器又会把任务交给扩展类加载器，一直往上提交，直到启动类加载器。启动类加载器如果在自己的扫描范围内能找到类，它就会去加载，如果它找不到，它就会交给它的下一级子加载器去加载，以此类推，这就是双亲委派模型。<br>为什么jdk里要提出双亲委派模型？</p><p>可以保证我们的类有一个合适的优先级，例如Object类，它是我们系统中所有类的根类，采用双亲委派模型以后，不管是哪个类加载器来加载Object类，哪怕这个加载器是自定义类加载器，通过双亲委派模型，最终都是由启动类加载器去加载的，这样就可以保证Object这个类在程序的各个类加载器环境中都是同一个类。在虚拟机里觉得一个类是不是唯一有两个因素，第一个就是这个类本身，第二个就是加载这个类的类加载器，如果同一个类由不同的类加载器去加载，在虚拟机看来，这两个类是不同的类。</p><h5 id="静态变量存在哪"><a href="#静态变量存在哪" class="headerlink" title="静态变量存在哪?"></a>静态变量存在哪?</h5><p>静态变量在方法区的静态存储区，但方法区既可以在堆上又可以位于栈（not java栈）上，static 变量保存在 Class 实例的尾部。<br>Class 对象存在堆中。</p><h5 id="讲讲什么是泛型？"><a href="#讲讲什么是泛型？" class="headerlink" title="讲讲什么是泛型？"></a>讲讲什么是泛型？</h5><p>泛型，即“参数化类型”。一提到参数，最熟悉的就是定义方法时有形参，然后调用此方法时传递实参。那么参数化类型怎么理解呢？</p><p>顾名思义，就是将类型由原来的具体的类型参数化，类似于方法中的变量参数，此时类型也定义成参数形式（可以称之为类型形参），</p><p>然后在使用/调用时传入具体的类型（类型实参）。</p><p>泛型的本质是为了参数化类型（在不创建新的类型的情况下，通过泛型指定的不同类型来控制形参具体限制的类型）。也就是说在泛型使用过程中，</p><p>操作的数据类型被指定为一个参数，这种参数类型可以用在类、接口和方法中，分别被称为泛型类、泛型接口、泛型方法。</p><h5 id="解释extends-和super-泛型限定符-上界不存下界不取"><a href="#解释extends-和super-泛型限定符-上界不存下界不取" class="headerlink" title="解释extends 和super 泛型限定符-上界不存下界不取"></a>解释extends 和super 泛型限定符-上界不存下界不取</h5><p>extends 指定上界限，只能传入本类和子类<br>super 指定下界限，只能传入本类和父类</p><h5 id="是否可以在static环境中访问非static变量？"><a href="#是否可以在static环境中访问非static变量？" class="headerlink" title="是否可以在static环境中访问非static变量？"></a>是否可以在static环境中访问非static变量？</h5><p>这个要从java的内存机制去分析，首先当你New 一个对象的时候，并不是先在堆中为对象开辟内存空间，而是先将类中的静态方法（带有static修饰的静态函数）的代码加载到一个叫做方法区的地方，然后再在堆内存中创建对象。所以说静态方法会随着类的加载而被加载。当你new一个对象时，该对象存在于对内存中，this关键字一般指该对象，但是如果没有new对象，而是通过类名调用该类的静态方法也可以。</p><p>程序最终都是在内存中执行，变量只有在内存中占有一席之地时才会被访问，类的静态成员（变态和方法）属于类本身，在类加载的时候就会分配内存，可以通过类名直接去访问，非静态成员（变量和方法）属于类的对象，所以只有在类的对象禅师（创建实例）的时候才会分配内存，然后通过类的对象去访问。</p><p>在一个类的静态成员中去访问非静态成员之所以会出错是因为在类的非静态成员不存在的时候静态成员就已经存在了，访问一个内存中不存在的东西当然会出错。</p><p>那类是什么时候被加载呢？在需要调用的时候被加载</p><h5 id="谈谈如何通过反射创建对象？"><a href="#谈谈如何通过反射创建对象？" class="headerlink" title="谈谈如何通过反射创建对象？"></a>谈谈如何通过反射创建对象？</h5><p>方法1：通过类对象调用newInstance()方法，例如：String.class.newInstance()<br>方法2：通过类对象的getConstructor()或getDeclaredConstructor()方法获得构造器（Constructor）对象并调用其newInstance()方法创建对象，例如：String.class.getConstructor(String.class).newInstance(“Hello”);</p><h5 id="Java支持多继承么？"><a href="#Java支持多继承么？" class="headerlink" title="Java支持多继承么？"></a>Java支持多继承么？</h5><p>java不支持多继承，只支持单继承（即一个类只能有一个父类）。但是java接口支持多继承，即一个子接口可以有多个父接口。（接口的作用是用来扩展对象的功能，一个子接口继承多个父接口，说明子接口扩展了多个功能，当类实现接口时，类就扩展了相应的功能）</p><h5 id="接口和抽象类的区别是什么？"><a href="#接口和抽象类的区别是什么？" class="headerlink" title="接口和抽象类的区别是什么？"></a>接口和抽象类的区别是什么？</h5><p>一 接口和抽象类的相似性</p><ol><li>接口和抽象类都不能被实例化，它们都位于继承树的顶端，用于被其他类实现和继承。</li><li>接口和抽象类都可以包含抽象方法，实现接口或继承抽象类的普通子类都必须实现这些抽象方法。 </li></ol><p>二 接口和抽象类的区别</p><ol><li>（不能为普通方法提供方法体）接口里只能包含抽象方法，静态方法和默认方法（加default），不能为普通方法提供方法实现，抽象类则完全可以包含普通方法，接口中的普通方法默认为抽象方法。</li><li>(public static final 赋值)抽象类中的成员变量可以是各种类型的，而接口中的成员变量只能是 public static final 类型的，并且必须赋值，否则通不过编译。</li><li>（是否有构造器）接口不能包含构造器，抽象类可以包含构造器，抽象类里的构造器并不是用于创建对象，而是让其子类调用这些构造器来完成属于抽象类的初始化操作。</li><li>（不能包含初始化块）接口里不能包含初始化块，但抽象类里完全可以包含初始化块。</li><li>（继承一个抽象类、多个接口）一个类只能继承一个抽象类，而一个类却可以实现多个接口。</li></ol><h5 id="Comparable和Comparator接口是干什么的？列出它们的区别。"><a href="#Comparable和Comparator接口是干什么的？列出它们的区别。" class="headerlink" title="Comparable和Comparator接口是干什么的？列出它们的区别。"></a>Comparable和Comparator接口是干什么的？列出它们的区别。</h5><p>Comparable接口位于 java.lang包下，Comparator接口位于java.util包下。</p><p>Comparable:    内部比较器，一个类如果想要使用    Collections.sort(list) 方法进行排序，则需要实现该接口</p><p>Comparator:    外部比较器用于对那些没有实现Comparable接口或者对已经实现的Comparable中的排序规则不满意进行排序.无需改变类的结构，更加灵活。（策略模式）</p><h5 id="面向对象的特征有哪些方面"><a href="#面向对象的特征有哪些方面" class="headerlink" title="面向对象的特征有哪些方面"></a>面向对象的特征有哪些方面</h5><p>（1）继承：就是保留父类的属性，开扩新的东西。通过子类可以实现继承，子类继承父类的所有状态和行为，同时添加自身的状态和行为。</p><p>（2）封装：就是类的私有化。将代码及处理数据绑定在一起的一种编程机制，该机制保证程序和数据不受外部干扰。</p><p>（3）多态：是允许将父对象设置成为和一个和多个它的子对象相等的技术。包括重载和重写。重载为编译时多态，重写是运行时多态。</p><h5 id="final-finally-finalize的区别。"><a href="#final-finally-finalize的区别。" class="headerlink" title="final, finally, finalize的区别。"></a>final, finally, finalize的区别。</h5><p>final 可以用来修饰类、方法、变量，分别有不同的意义，final 修饰的 class 代表不可以继承扩展，final 的变量是不可以修改的，而 final 的方法也是不可以重写的（override）。</p><p>finally 则是 Java 保证重点代码一定要被执行的一种机制。我们可以使用 try-finally 或者 try-catch-finally 来进行类似关闭 JDBC 连接、保证 unlock 锁等动作。</p><p>finalize 是基础类 java.lang.Object 的一个方法，它的设计目的是保证对象在被垃圾收集前完成特定资源的回收。finalize 机制现在已经不推荐使用，并且在 JDK 9 开始被标记为 deprecated</p><h5 id="Overload和Override的区别。Overloaded的方法是否可以改变返回值的类型"><a href="#Overload和Override的区别。Overloaded的方法是否可以改变返回值的类型" class="headerlink" title="Overload和Override的区别。Overloaded的方法是否可以改变返回值的类型?"></a>Overload和Override的区别。Overloaded的方法是否可以改变返回值的类型?</h5><p>方法的重写Override和重载Overload是Java多态性的不同表现。重写Override是父类与子类之间多态性的一种表现。重载Overload是一个类中多态性的一种表现。如果在子类中定义某方法与其父类有相同的名称和参数，那么我们说该方法被重写了。子类的对象使用这个方法时，将调用子类中的定义。对子类而言，父类中的定义如同被“屏蔽”了一样。关于重载，如果在一个类中定义了多个同名的方法，它们或有不同的参数个数或有不同的参数类型，也就是参数签名不同，这种情况出现方法的重载。重载的方法是可以改变返回值的类型。</p><p>每个重载的方法都必须有一个独一无二的参数类型列表。甚至参数顺序不同也足以区分两个方法，在区分重载方法时候，以类名和方法的形参作为标准，不以方法的返回值来区分。</p><h5 id="Static-Nested-Class-和-Inner-Class的不同"><a href="#Static-Nested-Class-和-Inner-Class的不同" class="headerlink" title="Static Nested Class 和 Inner Class的不同"></a>Static Nested Class 和 Inner Class的不同</h5><p>Nested Class 一般是C++的说法，Inner Class 一般是JAVA的说法。<br>Nested class分为静态Static nested class 的和非静态的 inner class,<br>静态的Static nested class是不可以直接调用它的外部类enclosing class的，但是可以通过外部类的引用来调用，就像你在一个类中写了main方法一样。<br>非静态类inner class 可以自由的引用外部类的属性和方法，但是它与一个实例绑定在了一起，不可以定义静态的属性、方法 。<br>Inner Class（内部类）定义在类中的类。<br>Nested Class（嵌套类）是静态（static）内部类。1. 要创建嵌套类的对象，并不需要其外围类的对象。 2. 不能从嵌套类的对象中访问非静态的外围类对象。</p><h5 id="当一个对象被当作参数传递到一个方法后，此方法可改变这个对象的属性，并可返回变化后的结果，那么这里到底是值传递还是引用传递"><a href="#当一个对象被当作参数传递到一个方法后，此方法可改变这个对象的属性，并可返回变化后的结果，那么这里到底是值传递还是引用传递" class="headerlink" title="当一个对象被当作参数传递到一个方法后，此方法可改变这个对象的属性，并可返回变化后的结果，那么这里到底是值传递还是引用传递?"></a>当一个对象被当作参数传递到一个方法后，此方法可改变这个对象的属性，并可返回变化后的结果，那么这里到底是值传递还是引用传递?</h5><p>传递的是值，只不过这个值是引用的地址值，地址值指向对象，所以改变的对象的内容，地址并没有改变</p><h5 id="Java的接口和C-的虚类的相同和不同处。"><a href="#Java的接口和C-的虚类的相同和不同处。" class="headerlink" title="Java的接口和C++的虚类的相同和不同处。"></a>Java的接口和C++的虚类的相同和不同处。</h5><p>C++虚类相当于java中的抽象类，与接口的不同处是：</p><p>　　1.一个子类只能继承一个抽象类（虚类），但能实现多个接口</p><p>　　2.一个抽象类可以有构造方法，接口没有构造方法</p><p>　　3.一个抽象类中的方法不一定是抽象方法，即其中的方法可以有实现（有方法体），接口中的方法都是抽象方法，不能有方法体，只有方法声明</p><p>　　4.一个抽象类可以是public、private、protected、default，接口只有public</p><p>　　5.一个抽象类中的方法可以是public、private、protected、default，接口中的方法只能是public和default修饰，实际上都是public的abstract方法</p><p>相同之处是：</p><p>　　都不能实例化。</p><h5 id="JAVA语言如何进行异常处理，关键字：throws-throw-try-catch-finally分别代表什么意义？在try块中可以抛出异常吗？"><a href="#JAVA语言如何进行异常处理，关键字：throws-throw-try-catch-finally分别代表什么意义？在try块中可以抛出异常吗？" class="headerlink" title="JAVA语言如何进行异常处理，关键字：throws,throw,try,catch,finally分别代表什么意义？在try块中可以抛出异常吗？"></a>JAVA语言如何进行异常处理，关键字：throws,throw,try,catch,finally分别代表什么意义？在try块中可以抛出异常吗？</h5><p>throws是获取异常<br>throw是抛出异常<br>try是将会发生异常的语句括起来，从而进行异常的处理，<br>catch是如果有异常就会执行他里面的语句，<br>而finally不论是否有异常都会进行执行的语句。</p><h5 id="内部类可以引用他包含类的成员吗？有没有什么限制？"><a href="#内部类可以引用他包含类的成员吗？有没有什么限制？" class="headerlink" title="内部类可以引用他包含类的成员吗？有没有什么限制？"></a>内部类可以引用他包含类的成员吗？有没有什么限制？</h5><p>当内部类为静态内部类时他只能调用外部类的静态方法。如果内部类为非静态内部类时则调用无限制。<br>主要是编译时就会加载静态类，而非静态类在运行时才会加载。所以如果静态类部类无法调用非静态外部类</p><h5 id="两个对象值相同-x-equals-y-true-，但却可有不同的hash-code说法是否正确？"><a href="#两个对象值相同-x-equals-y-true-，但却可有不同的hash-code说法是否正确？" class="headerlink" title="两个对象值相同(x.equals(y) == true)，但却可有不同的hash code说法是否正确？"></a>两个对象值相同(x.equals(y) == true)，但却可有不同的hash code说法是否正确？</h5><p>如果此对象重写了equals方法，那么可能出现这两个对象的equals相同，而hashcode不同。因此可以说它是对的。 但是，如果此对象继承Object，没有重写equals方法，那么就使用Object的equals方法，Object对象的equals方法默认是用==实现的，那么如果equals相同，hashcode一定相同。</p><h5 id="如何通过反射获取和设置对象私有字段的值？"><a href="#如何通过反射获取和设置对象私有字段的值？" class="headerlink" title="如何通过反射获取和设置对象私有字段的值？"></a>如何通过反射获取和设置对象私有字段的值？</h5><p>getDeclaredField方法</p><p>并且要设置访问权限为true ，setAccessible(true)</p><h5 id="谈一下面向对象的”六原则一法则”。"><a href="#谈一下面向对象的”六原则一法则”。" class="headerlink" title="谈一下面向对象的”六原则一法则”。"></a>谈一下面向对象的”六原则一法则”。</h5><p>单一职责原则，里氏替换原则，依赖倒置原则，开闭原则，接口隔离原则，合成聚合复用原则和迪米特法则</p><p>单一职责原则：一个类只做它该做的事情。(单一职责原则想表达的就是”高内聚”，写代码最终极的原则只有六个字”高内聚、低耦合”)</p><p>开闭原则：软件实体应当对扩展开放，对修改关闭。(在理想的状态下，当我们需要为一个软件系统增加新功能时，只需要从原来的系统派生出一些新类就可以，不需要修改原来的任何一行代码。要做到开闭有两个要点：①抽象是关键，一个系统中如果没有抽象类或接口系统就没有扩展点;②封装可变性，将系统中的各种可变因素封装到一个继承结构中，如果多个可变因素混杂在一起，系统将变得复杂而换乱)</p><p>依赖倒转原则：面向接口编程。(该原则说得直白和具体一些就是声明方法的参数类型、方法的返回类型、变量的引用类型时，尽可能使用抽象类型而不用具体类型，因为抽象类型可以被它的任何一个子类型所替代)</p><p>里氏替换原则：任何时候都可以用子类型替换掉父类型。(子类一定是增加父类的能力而不是减少父类的能力，因为子类比父类的能力更多，把能力多的对象当成能力少的对象来用当然没有任何问题。)</p><p>接口隔离原则：接口要小而专，绝不能大而全。(臃肿的接口是对接口的污染，既然接口表示能力，那么一个接口只应该描述一种能力，接口也应该是高度内聚的。Java中的接口代表能力、代表约定、代表角色，能否正确的使用接口一定是编程水平高低的重要标识。)</p><p>合成聚合复用原则：优先使用聚合或合成关系复用代码。(通过继承来复用代码是面向对象程序设计中被滥用得最多的东西，记住：任何时候都不要继承工具类，工具是可以拥有并可以使用的，而不是拿来继承的。)</p><p>迪米特法则：迪米特法则又叫最少知识原则，一个对象应当对其他对象有尽可能少的了解。(迪米特法则简单的说就是如何做到”低耦合”，门面模式和调停者模式就是对迪米特法则的践行。Java Web开发中作为前端控制器的Servlet或Filter不就是一个门面吗，浏览器对服务器的运作方式一无所知，但是通过前端控制器就能够根据你的请求得到相应的服务。调停者模式也可以举一个简单的例子来说明，例如一台计算机，CPU、内存、硬盘、显卡、声卡各种设备需要相互配合才能很好的工作。迪米特法则用通俗的话来将就是不要和陌生人打交道，如果真的需要，找一个自己的朋友，让他替你和陌生人打交道。)</p><h5 id="请问Query接口的list方法和iterate方法有什么区别？"><a href="#请问Query接口的list方法和iterate方法有什么区别？" class="headerlink" title="请问Query接口的list方法和iterate方法有什么区别？"></a>请问Query接口的list方法和iterate方法有什么区别？</h5><p>对于Query接口的list()方法与iterate()方法来说，都可以实现获取查询的对象，但是list()方法返回的每个对象都是完整的（对象中的每个属性都被表中的字段填充上了），而iterator()方法所返回的对象中仅包含了主键值（标识符），只有当你对iterator中的对象进行操作时，Hibernate才会向数据库再次发送SQL语句来获取该对象的属性值。</p><h5 id="Java中，什么是构造函数？什么是构造函数重载？什么是复制构造函数？"><a href="#Java中，什么是构造函数？什么是构造函数重载？什么是复制构造函数？" class="headerlink" title="Java中，什么是构造函数？什么是构造函数重载？什么是复制构造函数？"></a>Java中，什么是构造函数？什么是构造函数重载？什么是复制构造函数？</h5><p>当新对象被创建的时候，构造方法会被调用。每一个类都有构造方法。在程序员没有给类提供构造方法的情况下，Java编译器会为这个类创建一个默认的构造方法。<br>Java中构造方法重载和方法重载很相似。可以为一个类创建多个构造方法。每一个构造方法必须有它自己唯一的参数列表。</p><p>Java不支持像C++中那样的复制构造方法，这个不同点是因为如果你不自己写构造方法的情况下，Java不会创建默认的复制构造方法。</p><h5 id="hashCode-和equals-方法有什么联系？"><a href="#hashCode-和equals-方法有什么联系？" class="headerlink" title="hashCode()和equals()方法有什么联系？"></a>hashCode()和equals()方法有什么联系？</h5><p>前提： 谈到hashCode就不得不说equals方法，二者均是Object类里的方法。由于Object类是所有类的基类，所以一切类里都可以重写这两个方法。</p><p>原则 1 ： 如果 x.equals(y) 返回 “true”，那么 x 和 y 的 hashCode() 必须相等 ；</p><p>原则 2 ： 如果 x.equals(y) 返回 “false”，那么 x 和 y 的 hashCode() 有可能相等，也有可能不等 ；</p><p>原则 3 ： 如果 x 和 y 的 hashCode() 不相等，那么 x.equals(y) 一定返回 “false” ；</p><p>原则 4 ： 一般来讲，equals 这个方法是给用户调用的，而 hashcode 方法一般用户不会去调用 ；</p><p>原则 5 ： 当一个对象类型作为集合对象的元素时，那么这个对象应该拥有自己的equals()和hashCode()设计，而且要遵守前面所说的几个原则。</p><h3 id="4、集合"><a href="#4、集合" class="headerlink" title="4、集合"></a>4、集合</h3><h5 id="Map和ConcurrentHashMap的区别？"><a href="#Map和ConcurrentHashMap的区别？" class="headerlink" title="Map和ConcurrentHashMap的区别？"></a>Map和ConcurrentHashMap的区别？</h5><p>首先Map是接口，一般而言concurrentHashMap是线程安全的，具体实现<br>在1.7采取的segment分段锁，有点类似于16个线程安全的hashtable组合成了一个concurrenthashmap，不同分段操作不需要上锁，同一个分段才需要上锁，读不上锁，写上锁。锁的粒度更加精细。而1.8采取的AQS和CAS来实现【用了不少volatile】。</p><h5 id="hashMap内部具体如何实现的？"><a href="#hashMap内部具体如何实现的？" class="headerlink" title="hashMap内部具体如何实现的？"></a>hashMap内部具体如何实现的？</h5><p>HashMap的底层是基于数组+链接的一个复合数据结构,非同步的 允许null键值 继承于map接口来实现,通过put和get方法来进行数据的操作.数组被分为一个个的bucket.哈希值决定了键值对在数组中的位置.具有相同哈希值的键值对会组成链表,当链表长度超过阀值(8)的时候回触发树化,链表转换成红黑树.</p><h5 id="如果hashMap的key是一个自定义的类，怎么办？"><a href="#如果hashMap的key是一个自定义的类，怎么办？" class="headerlink" title="如果hashMap的key是一个自定义的类，怎么办？"></a>如果hashMap的key是一个自定义的类，怎么办？</h5><p>没问题，但是最好要重写hashcode方法，否则可能会出现对象是equals的，但放入hashset时却作为不同对象的问题。</p><h5 id="ArrayList和LinkedList的区别，如果一直在list的尾部添加元素，用哪个效率高？"><a href="#ArrayList和LinkedList的区别，如果一直在list的尾部添加元素，用哪个效率高？" class="headerlink" title="ArrayList和LinkedList的区别，如果一直在list的尾部添加元素，用哪个效率高？"></a>ArrayList和LinkedList的区别，如果一直在list的尾部添加元素，用哪个效率高？</h5><p>ArrayList 底层数据结构是一中线性的数据结构 ArrayList 可以理解为动态数组，它的容量能动态增长，该容量是指用来存储列表的数组的大小，随着向ArrayList中不断添加元素，其容量也自动增长， ArrayList 容许包括null在内所有的元素 ArrayList 是List接口的非同步实现 ArrayList 是有序 LinkedList 基于链表的list接口的非同步实现 LinkedList 是容许包括null在内的所有元素 LinkedList 是有序的 ArrayList 访问任意位置，效率高 LinkedList 两端数据操作效率高</p><h5 id="HashMap底层，负载因子，为啥是2-n？"><a href="#HashMap底层，负载因子，为啥是2-n？" class="headerlink" title="HashMap底层，负载因子，为啥是2^n？"></a>HashMap底层，负载因子，为啥是2^n？</h5><p>HashMap为了存取高效，要尽量较少碰撞，就是要尽量把数据分配均匀，每个链表长度大致相同，这个实现就在把数据存到哪个链表中的算法； 这个算法实际就是取模，hash%length，计算机中直接求余效率不如位移运算，源码中做了优化hash&amp;(length-1)， hash%length==hash&amp;(length-1)的前提是length是2的n次方； 为什么这样能均匀分布减少碰撞呢？2的n次方实际就是1后面n个0，2的n次方-1  实际就是n个1； 例如长度为9时候，3&amp;(9-1)=0  2&amp;(9-1)=0 ，都在0上，碰撞了； 例如长度为8时候，3&amp;(8-1)=3  2&amp;(8-1)=2 ，不同位置上，不碰撞； 其实就是按位“与”的时候，每一位都能  &amp;1  ，也就是和1111……1111111进行与运算</p><h5 id="ConcurrentHashMap锁加在了哪些地方？"><a href="#ConcurrentHashMap锁加在了哪些地方？" class="headerlink" title="ConcurrentHashMap锁加在了哪些地方？"></a>ConcurrentHashMap锁加在了哪些地方？</h5><p>1.7中不同的Segment，ConcurrentHashMap将数据分段，在读写的时候只加到相应的数据段上，这样在多线程的时候，可以读写其他段的数据，提高效率</p><p>1.8 中取消了segments字段，直接采用transient volatile HashEntry&lt;k,v&gt;[] table保存数据，采用table数组元素作为锁，从而实现了对每一行数据进行加锁，进一步减少并发冲突的概率。  </p><h5 id="TreeMap底层，红黑树原理？"><a href="#TreeMap底层，红黑树原理？" class="headerlink" title="TreeMap底层，红黑树原理？"></a>TreeMap底层，红黑树原理？</h5><p>TreeMap 的实现就是红黑树数据结构，也就说是一棵自平衡的排序二叉树，这样就可以保证当需要快速检索指定节点</p><h5 id="ArrayList是否会越界？"><a href="#ArrayList是否会越界？" class="headerlink" title="ArrayList是否会越界？"></a>ArrayList是否会越界？</h5><p>会的，底层是数组实现，是数组就一定会有越界的问题存在</p><h5 id="什么是TreeMap"><a href="#什么是TreeMap" class="headerlink" title="什么是TreeMap?"></a>什么是TreeMap?</h5><p>TreeMap继承AbstractMap，实现NavigableMap、Cloneable、Serializable三个接口,能按自然顺序或自定义顺序遍历</p><h5 id="ConcurrentHashMap的原理是什么？"><a href="#ConcurrentHashMap的原理是什么？" class="headerlink" title="ConcurrentHashMap的原理是什么？"></a>ConcurrentHashMap的原理是什么？</h5><p>底层采用分段的数组+链表实现，线程安全<br>通过把整个Map分为N个Segment，可以提供相同的线程安全，但是效率提升N倍，默认提升16倍。(读操作不加锁，由于HashEntry的value变量是 volatile的，也能保证读取到最新的值。)<br>Hashtable的synchronized是针对整张Hash表的，即每次锁住整张表让线程独占，ConcurrentHashMap允许多个修改操作并发进行，其关键在于使用了锁分离技术<br>有些方法需要跨段，比如size()和containsValue()，它们可能需要锁定整个表而而不仅仅是某个段，这需要按顺序锁定所有段，操作完毕后，又按顺序释放所有段的锁<br>扩容：段内扩容（段内元素超过该段对应Entry数组长度的75%触发扩容，不会对整个Map进行扩容），插入前检测需不需要扩容，有效避免无效扩容</p><p><a href="https://www.cnblogs.com/heyonggang/p/9112731.html" target="_blank" rel="noopener">https://www.cnblogs.com/heyonggang/p/9112731.html</a></p><p><a href="https://www.cnblogs.com/banjinbaijiu/p/9147434.html" target="_blank" rel="noopener">https://www.cnblogs.com/banjinbaijiu/p/9147434.html</a></p><h5 id="Java集合类框架的基本接口有哪些？"><a href="#Java集合类框架的基本接口有哪些？" class="headerlink" title="Java集合类框架的基本接口有哪些？"></a>Java集合类框架的基本接口有哪些？</h5><p>总共有两大接口：Collection 和Map ，一个元素集合，一个是键值对集合； 其中List和Set接口继承了Collection接口，一个是有序元素集合，一个是无序元素集合； 而ArrayList和 LinkedList 实现了List接口，HashSet实现了Set接口，这几个都比较常用； HashMap 和HashTable实现了Map接口，并且HashTable是线程安全的，但是HashMap性能更好；</p><h5 id="为什么集合类没有实现Cloneable和Serializable接口？"><a href="#为什么集合类没有实现Cloneable和Serializable接口？" class="headerlink" title="为什么集合类没有实现Cloneable和Serializable接口？"></a>为什么集合类没有实现Cloneable和Serializable接口？</h5><p>Cloneable.接口是用于浅克隆，而Serializable接口是用于深克隆，标识性接口，之所以用到克隆，有时需要把对象信息保存到本地磁盘，防止在传输时出现乱序，而那些容器没有这个必要，只是用来存储数据</p><h5 id="什么是迭代器？"><a href="#什么是迭代器？" class="headerlink" title="什么是迭代器？"></a>什么是迭代器？</h5><p>迭代器是一种设计模式，它是一个对象，它可以遍历并选择序列中的对象，而开发人员不需要了解该序列的底层结构。迭代器通常被称为“轻量级”对象，因为创建它的代价小。<br>Java中的Iterator功能比较简单，并且只能单向移动：<br>　　(1) 使用方法iterator()要求容器返回一个Iterator。第一次调用Iterator的next()方法时，它返回序列的第一个元素。注意：iterator()方法是java.lang.Iterable接口,被Collection继承。<br>　　(2) 使用next()获得序列中的下一个元素。<br>　　(3) 使用hasNext()检查序列中是否还有元素。<br>　　(4) 使用remove()将迭代器新返回的元素删除。</p><p>Iterator是Java迭代器最简单的实现，为List设计的ListIterator具有更多的功能，它可以从两个方向遍历List，也可以从List中插入和删除元素。</p><h5 id="Iterator和ListIterator的区别是什么？"><a href="#Iterator和ListIterator的区别是什么？" class="headerlink" title="Iterator和ListIterator的区别是什么？"></a>Iterator和ListIterator的区别是什么？</h5><ol><li>iterator()方法在set和list接口中都有定义，但是ListIterator（）仅存在于list接口中（或实现类中）；</li><li>ListIterator有add()方法，可以向List中添加对象，而Iterator不能</li><li>ListIterator和Iterator都有hasNext()和next()方法，可以实现顺序向后遍历，但是ListIterator有hasPrevious()和previous()方法，可以实现逆向（顺序向前）遍历。Iterator就不可以。</li><li>ListIterator可以定位当前的索引位置，nextIndex()和previousIndex()可以实现。Iterator没有此功能。</li><li>都可实现删除对象，但是ListIterator可以实现对象的修改，set()方法可以实现。Iierator仅能遍历，不能修改。　　</li></ol><p>　　因为ListIterator的这些功能，可以实现对LinkedList等List数据结构的操作。其实，数组对象也可以用迭代器来实现。</p><h5 id="快速失败-fail-fast-和安全失败-fail-safe-的区别是什么？"><a href="#快速失败-fail-fast-和安全失败-fail-safe-的区别是什么？" class="headerlink" title="快速失败(fail-fast)和安全失败(fail-safe)的区别是什么？"></a>快速失败(fail-fast)和安全失败(fail-safe)的区别是什么？</h5><p>Iterator的安全失败是基于对底层集合做拷贝，因此，它不受源集合上修改的影响。java.util包下面的所有的集合类都是快速失败的，而java.util.concurrent包下面的所有的类都是安全失败的。快速失败的迭代器会抛出ConcurrentModificationException异常，而安全失败的迭代器永远不会抛出这样的异常</p><p><a href="https://blog.csdn.net/qq_31780525/article/details/77431970" target="_blank" rel="noopener">https://blog.csdn.net/qq_31780525/article/details/77431970</a></p><h5 id="HashMap和Hashtable有什么区别？"><a href="#HashMap和Hashtable有什么区别？" class="headerlink" title="HashMap和Hashtable有什么区别？"></a>HashMap和Hashtable有什么区别？</h5><p>线程安全性不同</p><p><a href="https://blog.csdn.net/wangxing233/article/details/79452946" target="_blank" rel="noopener">https://blog.csdn.net/wangxing233/article/details/79452946</a></p><h5 id="ArrayList-Vector-LinkedList的存储性能和特性是什么？"><a href="#ArrayList-Vector-LinkedList的存储性能和特性是什么？" class="headerlink" title="ArrayList,Vector,LinkedList的存储性能和特性是什么？"></a>ArrayList,Vector,LinkedList的存储性能和特性是什么？</h5><p>ArrayList 和Vector他们底层的实现都是一样的，都是使用数组方式存储数据，此数组元素数大于实际存储的数据以便增加和插入元素，它们都允许直接按序号索引元素，但是插入元素要涉及数组元素移动等内存操作，所以索引数据快而插入数据慢。</p><p>  Vector中的方法由于添加了synchronized修饰，因此Vector是线程安全的容器，但性能上较ArrayList差，因此已经是Java中的遗留容器。</p><p>  LinkedList使用双向链表实现存储（将内存中零散的内存单元通过附加的引用关联起来，形成一个可以按序号索引的线性结构，这种链式存储方式与数组的连续存储方式相比，内存的利用率更高），按序号索引数据需要进行前向或后向遍历，但是插入数据时只需要记录本项的前后项即可，所以插入速度较快。            </p><p>  Vector属于遗留容器（Java早期的版本中提供的容器，除此之外，Hashtable、Dictionary、BitSet、Stack、Properties都是遗留容器），已经不推荐使用，但是由于ArrayList和LinkedListed都是非线程安全的，如果遇到多个线程操作同一个容器的场景，则可以通过工具类Collections中的synchronizedList方法将其转换成线程安全的容器后再使用（这是对装潢模式的应用，将已有对象传入另一个类的构造器中创建新的对象来增强实现）。</p><h5 id="Collection-和-Collections的区别。"><a href="#Collection-和-Collections的区别。" class="headerlink" title="Collection 和 Collections的区别。"></a>Collection 和 Collections的区别。</h5><p>java.util.Collection 是一个集合框架的父接口。它提供了对集合对象进行基本操作的通用接口方法。Collection接口在Java 类库中有很多具体的实现。Collection接口的意义是为各种具体的集合提供了最大化的统一操作方式。</p><p>java.util.Collections 是一个包装类。它包含有各种有关集合操作的静态多态方法。此类不能实例化，就像一个工具类，服务于Java的Collection框架。他提供一系列静态方法实现对各种集合的搜索、排序、线程安全化等操作。</p><h5 id="List、Set、Map是否继承自Collection接口？"><a href="#List、Set、Map是否继承自Collection接口？" class="headerlink" title="List、Set、Map是否继承自Collection接口？"></a>List、Set、Map是否继承自Collection接口？</h5><p>List，Set是，Map不是</p><h5 id="List、Map、Set三个接口存取元素时，各有什么特点？"><a href="#List、Map、Set三个接口存取元素时，各有什么特点？" class="headerlink" title="List、Map、Set三个接口存取元素时，各有什么特点？"></a>List、Map、Set三个接口存取元素时，各有什么特点？</h5><p>Set里面不允许有重复的元素，</p><p>存元素：add方法有一个boolean的返回值，当集合中没有某个元素，此时add方法可成功加入该元素时，则返回true；当集合含有与某个元素equals相等的元素时，此时add方法无法加入该元素，返回结果为false。</p><p>取元素：没法说取第几个，只能以Iterator接口取得所有的元素，再逐一遍历各个元素。</p><p>List表示有先后顺序的集合，</p><p>存元素：多次调用add(Object)方法时，每次加入的对象按先来后到的顺序排序，也可以插队，即调用add(int index,Object)方法，就可以指定当前对象在集合中的存放位置。</p><p>取元素：方法1：Iterator接口取得所有，逐一遍历各个元素</p><p>​              方法2：调用get(index i)来明确说明取第几个。</p><p>Map是双列的集合，存放用put方法:put(obj key,obj value)，每次存储时，要存储一对key/value，不能存储重复的key，这个重复的规则也是按equals比较相等。</p><p>取元素：用get(Object key)方法根据key获得相应的value。</p><p>​               也可以获得所有的key的集合，还可以获得所有的value的集合，</p><p>​               还可以获得key和value组合成的Map.Entry对象的集合。</p><h3 id="5、线程"><a href="#5、线程" class="headerlink" title="5、线程"></a>5、线程</h3><h5 id="多线程中的i-线程安全吗？为什么？"><a href="#多线程中的i-线程安全吗？为什么？" class="headerlink" title="多线程中的i++线程安全吗？为什么？"></a>多线程中的i++线程安全吗？为什么？</h5><p>i++和++i都是i=i+1的意思，但是过程有些许区别：<br>i++：先赋值再自加。（例如：i=1；a=1+i++；结果为a=1+1=2，语句执行完后i再进行自加为2）<br>++i：先自加再赋值。（例如：i=1；a=1+++i；结果为a=1+（1+1）=3，i先自加为2再进行运算）<br>但是在单独使用时没有区别：如for(int i=0;i&lt;10;i++）{ }和for(int i=0;i&lt;10;++i) { }没有区别。</p><p>i++和++i的线程安全分为两种情况：<br>1、如果i是局部变量（在方法里定义的），那么是线程安全的。因为局部变量是线程私有的，别的线程访问不到，其实也可以说没有线程安不安全之说，因为别的线程对他造不成影响。<br>2、如果i是全局变量（类的成员变量），那么是线程不安全的。因为如果是全局变量的话，同一进程中的不同线程都有可能访问到。</p><p>如果有大量线程同时执行i++操作，i变量的副本拷贝到每个线程的线程栈，当同时有两个线程栈以上的线程读取线程变量，假如此时是1的话，那么同时执行i++操作，再写入到全局变量，最后两个线程执行完，i会等于3而不会是2，所以，出现不安全性。</p><h5 id="如何线程安全的实现一个计数器？"><a href="#如何线程安全的实现一个计数器？" class="headerlink" title="如何线程安全的实现一个计数器？"></a>如何线程安全的实现一个计数器？</h5><p>Java 提供了一组atomic class来帮助我们简化同步处理。基本工作原理是使用了同步synchronized的方法实现了对一个long, integer, 对象的增、减、赋值（更新）操作.</p><h5 id="多线程同步的方法"><a href="#多线程同步的方法" class="headerlink" title="多线程同步的方法"></a>多线程同步的方法</h5><p>synchronized关键字、wait和notify、重入锁、阻塞队列等</p><p><a href="https://blog.csdn.net/scgyus/article/details/79499650" target="_blank" rel="noopener">https://blog.csdn.net/scgyus/article/details/79499650</a></p><h5 id="介绍一下生产者消费者模式？"><a href="#介绍一下生产者消费者模式？" class="headerlink" title="介绍一下生产者消费者模式？"></a>介绍一下生产者消费者模式？</h5><p>生产者消费者模式：通过一个容器来解决生产者和消费者的强耦合关系，生产者生成数据无需等待消费者索取，消费者无需直接索要数据。两者并不进行任何通讯，而是通过容器来进行操作<br>作用：解耦、支持并发、支持忙闲不均。</p><h5 id="线程，进程，然后线程创建有很大开销，怎么优化？"><a href="#线程，进程，然后线程创建有很大开销，怎么优化？" class="headerlink" title="线程，进程，然后线程创建有很大开销，怎么优化？"></a>线程，进程，然后线程创建有很大开销，怎么优化？</h5><p>线程池。</p><h5 id="线程池运行流程，参数，策略"><a href="#线程池运行流程，参数，策略" class="headerlink" title="线程池运行流程，参数，策略"></a>线程池运行流程，参数，策略</h5><p>线程池的工作流程：当一个任务通过execute(Runnable)方法欲添加到线程池时：</p><ol><li>如果此时线程池中的数量小于corePoolSize，即使线程池中的线程都处于空闲状态，也要创建新的线程来处理被添加的任务。</li><li>如果此时线程池中的数量等于 corePoolSize，但是缓冲队列 workQueue未满，那么任务被放入缓冲队列。</li><li>如果此时线程池中的数量大于corePoolSize，缓冲队列workQueue满，并且线程池中的数量小于maximumPoolSize，建新的线程来处理被添加的任务。</li><li>如果此时线程池中的数量大于corePoolSize，缓冲队列workQueue满，并且线程池中的数量等于maximumPoolSize，那么通过<br>handler所指定的策略来处理此任务。也就是：处理任务的优先级为：核心线程corePoolSize、任务队列workQueue、最大线程maximumPoolSize，如果三者都满了，使用handler处理被拒绝的任务。</li><li>当线程池中的线程数量大于<br>corePoolSize时，如果某线程空闲时间超过keepAliveTime，线程将被终止。这样，线程池可以动态的调整池中的线程数。</li></ol><p>举个例子来说明一下线程池中的工作流程：<br>假设队列大小为 10，corePoolSize 为 3，maximumPoolSize 为 6，那么当加入 20 个任务时，执行的顺序就是这样的：首先执行任务 1、2、3，然后任务 4<del>13 被放入队列。这时候队列满了，任务 14、15、16 会被马上执行，而任务 17</del>20 则会抛出异常。最终顺序是：1、2、3、14、15、16、4、5、6、7、8、9、10、11、12、13。</p><p>7个参数：</p><ol><li>corePoolSize： 线程池维护线程的最少数量（也叫核心线程池数量）</li><li>maximumPoolSize：线程池维护线程的最大数量</li><li>keepAliveTime： 线程池维护线程所允许的空闲时间</li><li>unit： 线程池维护线程所允许的空闲时间的单位</li><li>workQueue： 线程池所使用的缓冲队列</li><li>threadFactory：线程创建的工厂</li><li>handler： 线程池对拒绝任务的处理策略</li></ol><p>任务拒绝策略：当线程池的任务缓存队列已满并且线程池中的线程数目达到maximumPoolSize，如果还有任务到来就会采取任务拒绝策略，通常有以下四种策略：</p><ol><li>ThreadPoolExecutor.AbortPolicy:丢弃任务并抛出RejectedExecutionException异常。</li><li>ThreadPoolExecutor.DiscardPolicy：也是丢弃任务，但是不抛出异常。</li><li>ThreadPoolExecutor.DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）</li><li>ThreadPoolExecutor.CallerRunsPolicy：由调用线程处理该任务</li><li>自定义策略，如果在使用过程中，Java对我们提供给我们的四种策略都不符合我们的要求，那我们可以自定义策略。</li></ol><h5 id="讲一下AQS吧。"><a href="#讲一下AQS吧。" class="headerlink" title="讲一下AQS吧。"></a>讲一下AQS吧。</h5><p>AQS是一个并发包的基础组件，用来实现各种锁，各种同步组件。它包含了state变量，加锁线程，等待队列并发中的核心组件。</p><p>AQS的实现依赖内部的同步队列（FIFO双向队列），如果当前线程获取同步状态失败，AQS会将该线程以及等待状态等信息构造成一个Node，将其加入同步队列的尾部，同时阻塞当前线程，当同步状态释放时，唤醒队列的头节点。</p><p><a href="https://www.cnblogs.com/waterystone/p/4920797.html" target="_blank" rel="noopener">https://www.cnblogs.com/waterystone/p/4920797.html</a></p><h5 id="创建线程的方法，哪个更好，为什么？"><a href="#创建线程的方法，哪个更好，为什么？" class="headerlink" title="创建线程的方法，哪个更好，为什么？"></a>创建线程的方法，哪个更好，为什么？</h5><p>需要从Java.lang.Thread类派生一个新的线程类，重载它的run()方法；  实现Runnalbe接口，重载Runnalbe接口中的run()方法。  实现Runnalbe接口更好，使用实现Runnable接口的方式创建的线程可以处理同一资源，从而实现资源的共享.  </p><h5 id="Java中有几种方式启动一个线程？"><a href="#Java中有几种方式启动一个线程？" class="headerlink" title="Java中有几种方式启动一个线程？"></a>Java中有几种方式启动一个线程？</h5><p>1、继承Thread类，新建一个当前类对象，并且运行其start()方法</p><p>2、实现Runnable接口，然后新建当前类对象，接着新建Thread对象时把当前类对象传进去，最后运行Thread对象的start()方法</p><p>3、实现Callable接口，新建当前类对象，在新建FutureTask类对象时传入当前类对象，接着新建Thread类对象时传入FutureTask类对象，最后运行Thread对象的start()方法</p><h5 id="Java中有几种线程池？"><a href="#Java中有几种线程池？" class="headerlink" title="Java中有几种线程池？"></a>Java中有几种线程池？</h5><p>Java通过Executors提供四种线程池，分别为：<br>newCachedThreadPool创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。<br>newFixedThreadPool 创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。<br>newScheduledThreadPool 创建一个定长线程池，支持定时及周期性任务执行。<br>newSingleThreadExecutor 创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。</p><p>自定义线程池：通过修改五大核心参数来控制</p><h5 id="线程池有什么好处？"><a href="#线程池有什么好处？" class="headerlink" title="线程池有什么好处？"></a>线程池有什么好处？</h5><p>1、线程池的重用<br>线程的创建和销毁的开销是巨大的，而通过线程池的重用大大减少了这些不必要的开销，当然既然少了这么多消费内存的开销，其线程执行速度也是突飞猛进的提升。<br>2、控制线程池的并发数<br>3、线程池可以对线程进行管理</p><p>线程池可以提供定时、定期、单线程、并发数控制等功能。比如通过ScheduledThreadPool线程池来执行S秒后，每隔N秒执行一次的任务。</p><h5 id="如何理解Java多线程回调方法？"><a href="#如何理解Java多线程回调方法？" class="headerlink" title="如何理解Java多线程回调方法？"></a>如何理解Java多线程回调方法？</h5><p>所谓回调，就是客户程序C调用服务程序S中的某个方法A，然后S又在某个时候反过来调用C中的某个方法B，对于C来说，这个B便叫做回调方法。<br>下面看一个实际例子来理解：</p><p>本示例设置一个提问者，一个回答者，而回答者需要回答提问者一个很深奥的问题时，这时需要很多时间去查找，提问者又开始做其他的事情，</p><p>等回答者找到答案后，再把答案告诉提问者。</p><h5 id="概括的解释下线程的几种可用状态。"><a href="#概括的解释下线程的几种可用状态。" class="headerlink" title="概括的解释下线程的几种可用状态。"></a>概括的解释下线程的几种可用状态。</h5><p>新建状态(New)：<br>当用new操作符创建一个线程时， 例如new Thread®，线程还没有开始运行，此时线程处在新建状态。 当一个线程处于新生状态时，程序还没有开始运行线程中的代码</p><p>就绪状态(Runnable)<br>一个新创建的线程并不自动开始运行，要执行线程，必须调用线程的start()方法。当线程对象调用start()方法即启动了线程，start()方法创建线程运行的系统资源，并调度线程运行run()方法。当start()方法返回后，线程就处于就绪状态。<br>处于就绪状态的线程并不一定立即运行run()方法，线程还必须同其他线程竞争CPU时间，只有获得CPU时间才可以运行线程。因为在单CPU的计算机系统中，不可能同时运行多个线程，一个时刻仅有一个线程处于运行状态。因此此时可能有多个线程处于就绪状态。对多个处于就绪状态的线程是由Java运行时系统的线程调度程序(thread scheduler)来调度的。</p><p>运行状态(Running)<br>当线程获得CPU时间后，它才进入运行状态，真正开始执行run()方法.</p><p>阻塞状态(Blocked)<br>线程运行过程中，可能由于各种原因进入阻塞状态:<br>1&gt;线程通过调用sleep方法进入睡眠状态；<br>2&gt;线程调用一个在I/O上被阻塞的操作，即该操作在输入输出操作完成之前不会返回到它的调用者；<br>3&gt;线程试图得到一个锁，而该锁正被其他线程持有；<br>4&gt;线程在等待某个触发条件；<br>…所谓阻塞状态是正在运行的线程没有运行结束，暂时让出CPU，这时其他处于就绪状态的线程就可以获得CPU时间，进入运行状态。</p><p>5.死亡状态(Dead)<br>有两个原因会导致线程死亡：<br>1) run方法正常退出而自然死亡，<br>2) 一个未捕获的异常终止了run方法而使线程猝死。<br>为了确定线程在当前是否存活着（就是要么是可运行的，要么是被阻塞了），需要使用isAlive方法。如果是可运行或被阻塞，这个方法返回true； 如果线程仍旧是new状态且不是可运行的， 或者线程死亡了，则返回false</p><h5 id="同步方法和同步代码块的区别是什么？"><a href="#同步方法和同步代码块的区别是什么？" class="headerlink" title="同步方法和同步代码块的区别是什么？"></a>同步方法和同步代码块的区别是什么？</h5><p>语法不同。 同步块需要注明锁定对象，同步方法默认锁定this。  在静态方法中，都是默认锁定类对象。 在考虑性能方面，最好使用同步块来减少锁定范围提高并发效率。</p><h5 id="在监视器-Monitor-内部，是如何做线程同步的？程序应该做哪种级别的同步？"><a href="#在监视器-Monitor-内部，是如何做线程同步的？程序应该做哪种级别的同步？" class="headerlink" title="在监视器(Monitor)内部，是如何做线程同步的？程序应该做哪种级别的同步？"></a>在监视器(Monitor)内部，是如何做线程同步的？程序应该做哪种级别的同步？</h5><p>在 java 虚拟机中, 每个对象( Object 和 class )通过某种逻辑关联监视器,每个监视器和一个对象引用相关联, 为了实现监视器的互斥功能, 每个对象都关联着一把锁.</p><p>一旦方法或者代码块被 synchronized 修饰, 那么这个部分就放入了监视器的监视区域, 确保一次只能有一个线程执行该部分的代码, 线程在获取锁之前不允许执行该部分的代码</p><p>另外 java 还提供了显式监视器( Lock )和隐式监视器( synchronized )两种锁方案</p><h5 id="sleep-和-wait-有什么区别？"><a href="#sleep-和-wait-有什么区别？" class="headerlink" title="sleep() 和 wait() 有什么区别？"></a>sleep() 和 wait() 有什么区别？</h5><p>相同点:都可让线程处于冻结状态.<br>不同点:<br>1.wait()可以设置线程冻结的时间,也可以不设置冻结的时间,而sleep()必须设置冻结的时间.<br>2.wait()释放cpu资源,同时也释放了锁,而sleep()释放cpu资源,但不释放锁.</p><h5 id="同步和异步有何异同，在什么情况下分别使用他们？举例说明。"><a href="#同步和异步有何异同，在什么情况下分别使用他们？举例说明。" class="headerlink" title="同步和异步有何异同，在什么情况下分别使用他们？举例说明。"></a>同步和异步有何异同，在什么情况下分别使用他们？举例说明。</h5><p>同步异步：指的是需不需要等待返回结果；</p><p>同步：需要不断轮询数据是否准备好了，或者一直在等待数据准备好</p><p>异步：发送一个请求就立即返回，然后去干别的事情，当数据准备号了会通知进行相关处理。(同步的实时性比较号，异步的并发性能比较号)<br>阻塞和非阻塞：是指需不需要阻塞线程</p><p>阻塞：当前线程不执行别的事情，一直再等待</p><p>非阻塞：当前线程可以干别事情，间隔一段时间检查一下上次的数据有没有准备好；</p><h5 id="设计4个线程，其中两个线程每次对j增加1，另外两个线程对j每次减少1。使用内部类实现线程，对j增减的时候没有考虑顺序问题。"><a href="#设计4个线程，其中两个线程每次对j增加1，另外两个线程对j每次减少1。使用内部类实现线程，对j增减的时候没有考虑顺序问题。" class="headerlink" title="设计4个线程，其中两个线程每次对j增加1，另外两个线程对j每次减少1。使用内部类实现线程，对j增减的时候没有考虑顺序问题。"></a>设计4个线程，其中两个线程每次对j增加1，另外两个线程对j每次减少1。使用内部类实现线程，对j增减的时候没有考虑顺序问题。</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">链接：https://www.nowcoder.com/questionTerminal/8db05d0b47044b3f9605860451d63d25</span><br><span class="line">来源：牛客网</span><br><span class="line"></span><br><span class="line">class Resource</span><br><span class="line">&#123;</span><br><span class="line">    private int j=0;</span><br><span class="line">    //j增加1</span><br><span class="line">    public synchronized void add()&#123;</span><br><span class="line">        j++;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+&quot;...add...&quot;+&quot;目前j的值为：&quot;+j);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">    //j减少1</span><br><span class="line">    public synchronized void des()&#123;</span><br><span class="line">        j--;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+&quot;-des-&quot;+&quot;目前j的值为：&quot;+j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">class FourThreadTest</span><br><span class="line">&#123;</span><br><span class="line">    //创建Resource对象</span><br><span class="line">    private Resource resource = new Resource();</span><br><span class="line">    public static void main(String[] args)</span><br><span class="line">    &#123;</span><br><span class="line">        FourThreadTest fourThread = new FourThreadTest();</span><br><span class="line">        fourThread.test();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public void test()&#123;</span><br><span class="line">        for(int i=0;i&lt;2;i++)&#123;</span><br><span class="line">            new Thread(new Runnable()&#123;</span><br><span class="line">                public void run()&#123;</span><br><span class="line">                    while(true)&#123;</span><br><span class="line">                        try</span><br><span class="line">                        &#123;</span><br><span class="line">                            Thread.sleep((long)(Math.random()*1000));</span><br><span class="line">                        &#125;</span><br><span class="line">                        catch (InterruptedException e)</span><br><span class="line">                        &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                        resource.add();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line"> </span><br><span class="line">            new Thread(new Runnable()&#123;</span><br><span class="line">                public void run()&#123;</span><br><span class="line">                    while(true)&#123;</span><br><span class="line">                        try</span><br><span class="line">                        &#123;</span><br><span class="line">                            Thread.sleep((long)(Math.random()*1000));</span><br><span class="line">                        &#125;</span><br><span class="line">                        catch (InterruptedException e)</span><br><span class="line">                        &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                        resource.des();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="启动一个线程是用run-还是start"><a href="#启动一个线程是用run-还是start" class="headerlink" title="启动一个线程是用run()还是start()?"></a>启动一个线程是用run()还是start()?</h5><p>start（）；</p><h5 id="请说出你所知道的线程同步的方法"><a href="#请说出你所知道的线程同步的方法" class="headerlink" title="请说出你所知道的线程同步的方法"></a>请说出你所知道的线程同步的方法</h5><p>1 同步方法 2 同步块 3 wait 和 notify 4 volatile 5 Lock : ReentrantLock 6局部变量比如ThreadLocal 7 blockqueue</p><h5 id="stop-和suspend-方法为何不推荐使用？"><a href="#stop-和suspend-方法为何不推荐使用？" class="headerlink" title="stop()和suspend()方法为何不推荐使用？"></a>stop()和suspend()方法为何不推荐使用？</h5><p>stop会导致不安全，为啥呢，如果在同步块执行一半时，stop来了，后面还没执行完呢，锁没了，线程退出了，别的线程又可以操作你的数据了，所以就是线程不安全了。 suspend会导致死锁，因为挂起后，是不释放锁的，别人也就阻塞着，如果没人唤醒，那就一直死锁。</p><h5 id="线程的sleep-方法和yield-方法有什么区别？"><a href="#线程的sleep-方法和yield-方法有什么区别？" class="headerlink" title="线程的sleep()方法和yield()方法有什么区别？"></a>线程的sleep()方法和yield()方法有什么区别？</h5><p>1.sleep()方法给其他线程机会不考虑线程的优先级别，而yield()方法只会给相同运行级别或更高运行级别的线程运行<br>2.线程执行sleep()方法就会进入阻塞状态，执行yield()方法会转入就绪状态<br>3.sleep()方法声明抛出InterruptException，而yield（）没有声明任何异常<br>4.sleep（）方法比yield方法具有更好的移植性</p><h5 id="当一个线程进入一个对象的synchronized方法A之后，其它线程是否可进入此对象的synchronized方法B？"><a href="#当一个线程进入一个对象的synchronized方法A之后，其它线程是否可进入此对象的synchronized方法B？" class="headerlink" title="当一个线程进入一个对象的synchronized方法A之后，其它线程是否可进入此对象的synchronized方法B？"></a>当一个线程进入一个对象的synchronized方法A之后，其它线程是否可进入此对象的synchronized方法B？</h5><p>不能。其它线程只能访问该对象的非同步方法，同步方法则不能进入。因为非静态方法上的synchronized修饰符要求执行方法时要获得对象的锁，如果已经进入A方法说明对象锁已经被取走，那么试图进入B方法的线程就只能在等锁池（注意不是等待池哦）中等待对象的锁。</p><h5 id="请说出与线程同步以及线程调度相关的方法。"><a href="#请说出与线程同步以及线程调度相关的方法。" class="headerlink" title="请说出与线程同步以及线程调度相关的方法。"></a>请说出与线程同步以及线程调度相关的方法。</h5><p>-wait()：使一个线程处于等待（阻塞）状态，并且释放所持有的对象的锁；</p><p>-sleep()：使一个正在运行的线程处于睡眠状态，是一个静态方法，调用此方法要处理InterruptedException异常；</p><p>-notify()：唤醒一个处于等待状态的线程，当然在调用此方法的时候，并不能确切的唤醒某一个等待状态的线程，而是由JVM确定唤醒哪个线程，而且与优先级无关；</p><p>-notityAll()：唤醒所有处于等待状态的线程，该方法并不是将对象的锁给所有线程，而是让它们竞争，只有获得锁的线程才能进入就绪状态；</p><h5 id="什么是线程池（thread-pool）？"><a href="#什么是线程池（thread-pool）？" class="headerlink" title="什么是线程池（thread pool）？"></a>什么是线程池（thread pool）？</h5><p>线程池就是用来存放已经创建过的线程的容器，有任务时直接从线程池里获取，可以节省时间。</p><h5 id="如何保证线程安全？"><a href="#如何保证线程安全？" class="headerlink" title="如何保证线程安全？"></a>如何保证线程安全？</h5><p>线程安全：<br>线程安全就是多线程访问时，采用了加锁机制，当一个线程访问该类的某个数据时，进行保护，其他线程不能进行访问直到该线程读取完，其他线程才可使用。不会出现数据不一致或者数据污染。 线程不安全就是不提供数据访问保护，有可能出现多个线程先后更改数据造成所得到的数据是脏数据。<br>如何保证呢：<br>1、使用线程安全的类；<br>2、使用synchronized同步代码块，或者用Lock锁；<br>由于线程安全问题，使用synchronized同步代码块 原理：当两个并发线程访问同一个对象object中的这个synchronized(this)同步代码块时，一个时间内只能有一个线程得到执行。 另一个线程必须等待当前线程执行完这个代码块以后才能执行该代码块。<br>3、多线程并发情况下，线程共享的变量改为方法局部级变量</p><h5 id="如何处理项目的高并发、大数据"><a href="#如何处理项目的高并发、大数据" class="headerlink" title="如何处理项目的高并发、大数据"></a>如何处理项目的高并发、大数据</h5><p>1.HTML静态化<br>2.文件服务器<br>3.负载均衡<br>4.反向代理<br>5.动静分离<br>6.数据库sql优化<br>7.缓存<br>8.数据库读写分离<br>9.数据库活跃数据分离<br>10.批量读取和延迟修改<br>11.数据库集群和库表散列</p><h3 id="6、锁"><a href="#6、锁" class="headerlink" title="6、锁"></a>6、锁</h3><h5 id="讲一下非公平锁和公平锁在reetrantlock里的实现。"><a href="#讲一下非公平锁和公平锁在reetrantlock里的实现。" class="headerlink" title="讲一下非公平锁和公平锁在reetrantlock里的实现。"></a>讲一下非公平锁和公平锁在reetrantlock里的实现。</h5><p>非公平锁: 当线程争夺锁的过程中，会先进行一次CAS尝试获取锁，若失败，则进入acquire(1)函数，进行一次tryAcquire再次尝试获取锁，若再次失败，那么就通过addWaiter将当前线程封装成node结点加入到Sync队列，这时候该线程只能乖乖等前面的线程执行完再轮到自己了。</p><p>公平锁: 当线程在获取锁的时候，会先判断Sync队列中是否有在等待获取资源的线程。若没有，则尝试获取锁，若有，那么就那么就通过addWaiter将当前线程封装成node结点加入到Sync队列中</p><h5 id="讲一下synchronized，可重入怎么实现。"><a href="#讲一下synchronized，可重入怎么实现。" class="headerlink" title="讲一下synchronized，可重入怎么实现。"></a>讲一下synchronized，可重入怎么实现。</h5><p>每个锁关联一个线程持有者和一个计数器。当计数器为0时表示该锁没有被任何线程持有，那么任何线程都都可能获得该锁而调用相应方法。当一个线程请求成功后，JVM会记下持有锁的线程，并将计数器计为1。此时其他线程请求该锁，则必须等待。而该持有锁的线程如果再次请求这个锁，就可以再次拿到这个锁，同时计数器会递增。当线程退出一个synchronized方法/块时，计数器会递减，如果计数器为0则释放该锁。</p><h5 id="对象锁（synchronized-method-）和类锁（static-sychronized-method-）的区别"><a href="#对象锁（synchronized-method-）和类锁（static-sychronized-method-）的区别" class="headerlink" title="对象锁（synchronized method{}）和类锁（static sychronized method{}）的区别"></a>对象锁（synchronized method{}）和类锁（static sychronized method{}）的区别</h5><p>对象锁也叫实例锁，对应synchronized关键字，当多个线程访问多个实例时，它们互不干扰，每个对象都拥有自己的锁，如果是单例模式下，那么就是变成和类锁一样的功能。对象锁防止在同一个时刻多个线程访问同一个对象的synchronized块。如果不是同一个对象就没有这样子的限制。</p><p>类锁对应的关键字是static sychronized，是一个全局锁，无论多少个对象否共享同一个锁（也可以锁定在该类的class上或者是classloader对象上），同样是保障同一个时刻多个线程同时访问同一个synchronized块，当一个线程在访问时，其他的线程等待。</p><h5 id="什么是死锁-deadlock-？"><a href="#什么是死锁-deadlock-？" class="headerlink" title="什么是死锁(deadlock)？"></a>什么是死锁(deadlock)？</h5><p>死锁 :是指两个或两个以上的进程在执行过程中,因争夺资源而造成的一种互相等待的现象,若无外力作用,它们都将无法推进下去。<br>原因：<br>（1） 因为系统资源不足。<br>（2） 资源分配不当等。<br>（3） 进程运行推进顺序不合适。<br>如果系统资源充足，进程的资源请求都能够得到满足，死锁出现的可能性就很低，否则就会因争夺有限的资源而陷入死锁。其次，进程运行推进顺序与速度不同，也可能产生死锁。<br>（1） 互斥条件：一个资源每次只能被一个进程使用。<br>（2） 不剥夺条件：进程已获得的资源，在末使用完之前，不能强行剥夺。<br>（3） 请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放。<br>（4） 循环等待条件：若干进程之间形成一种头尾相接的循环等待资源关系。<br>这四个条件是死锁的必要条件，只要系统发生死锁，这些条件必然成立，而只要上述条件之一不满足，就不会发生死锁。<br>死锁的解除与预防：<br>理解了死锁的原因，尤其是产生死锁的四个必要条件，就可以最大可能地避免、预防和解除死锁。所以，在系统设计、进程调度等方面注意如何不让这四个必要条件成立，如何确定资源的合理分配算法，避免进程永久占据系统资源。此外，也要防止进程在处于等待状态的情况下占用资源。因此，对资源的分配要给予合理的规划。</p><p>其中最简单的方法就是线程都是以同样的顺序加锁和释放锁，也就是破坏了第四个条件。</p><h5 id="如何确保N个线程可以访问N个资源同时又不导致死锁？"><a href="#如何确保N个线程可以访问N个资源同时又不导致死锁？" class="headerlink" title="如何确保N个线程可以访问N个资源同时又不导致死锁？"></a>如何确保N个线程可以访问N个资源同时又不导致死锁？</h5><p>四个条件是死锁的必要条件，只要破坏其中任意一个条件，就可以避免死锁，其中最简单的就是破环循环等待条件。按同一顺序访问对象，加载锁，释放锁。</p><h5 id="请你简述synchronized和java-util-concurrent-locks-Lock的异同？"><a href="#请你简述synchronized和java-util-concurrent-locks-Lock的异同？" class="headerlink" title="请你简述synchronized和java.util.concurrent.locks.Lock的异同？"></a>请你简述synchronized和java.util.concurrent.locks.Lock的异同？</h5><p>相同点：两者都是用来实现对某个资源的同步。<br>两者区别如下：<br>(1) 用法不一样。synchronized可以用于修饰方法，也可以用在代码块中。Lock需要指定起始和终点位置，一般放在try-finally结构中，try开始执行lock方法，finally中执行unlock方法。synchronized是托管给JVM执行的，Lock是通过代码执行的。<br>(2) 性能不一样。在资源竞争不激烈情况下，synchronized的性能比Lock好，而在资源竞争激烈时，synchronized的性能下降很快，而Lock基本保持不变。</p><p>锁机制不一样。synchronized获得锁和释放锁都是在块结构中，获取多个锁时必须以相反顺序释放，并且自动释放锁。Lock需要开发人员手动释放锁，并且放在finally中。</p><h3 id="7、JDK"><a href="#7、JDK" class="headerlink" title="7、JDK"></a>7、JDK</h3><h5 id="Java中的LongAdder和AtomicLong的区别"><a href="#Java中的LongAdder和AtomicLong的区别" class="headerlink" title="Java中的LongAdder和AtomicLong的区别"></a>Java中的LongAdder和AtomicLong的区别</h5><p>JDK1.8引入了LongAdder类。CAS机制就是，在一个死循环内，不断尝试修改目标值，直到修改成功。如果竞争不激烈，那么修改成功的概率就很高，否则，修改失败的的概率就很高，在大量修改失败时，这些原子操作就会进行多次循环尝试，因此性能就会受到影响。 结合ConcurrentHashMap的实现思想，应该可以想到对一种传统AtomicInteger等原子类的改进思路。虽然CAS操作没有锁，但是像减少粒度这种分离热点的思想依然可以使用。将AtomicInteger的内部核心数据value分离成一个数组，每个线程访问时，通过哈希等算法映射到其中一个数字进行计数，而最终的计数结果，则为这个数组的求和累加。热点数据value被分离成多个单元cell，每个cell独自维护内部的值，当前对象的实际值由所有的cell累计合成，这样热点就进行了有效的分离，提高了并行度。</p><h5 id="JDK和JRE的区别是什么？"><a href="#JDK和JRE的区别是什么？" class="headerlink" title="JDK和JRE的区别是什么？"></a>JDK和JRE的区别是什么？</h5><p>1.JDK</p><p>   JDK是Java Development Kit的缩写，是Java的开发工具包，主要包含了各种类库和工具，当然也包含了另外一个JRE.。那么为什么要包含另外一个JRE呢？而且&lt;JDK安装目录&gt;/JRE/bin目录下，包含有server一个文件夹~包含一个jvm.dll，这说明JDK提供了一个虚拟机。</p><p>   另外，JDK的bin目录下有各种Java程序需要用到的命令，与JRE的bin目录最明显的区别就是JDK文件下才有javac，这一点很好理解，因为JRE只是一个运行环境而已，与开发无关。正因为如此，具备开发功能的JDK所包含的JRE下才会同时有server的JVM，而仅仅作为运行环境的JRE下，只需要server的jvm.dll就够了。</p><p>  注意：JDK所提供的运行环境和工具度需要进行环境变量的配置以后，才能使用，最主要的配置就是把&lt;JDK安装目录&gt;/bin目录设置为Path环境变量值的一部分。</p><p>2.JRE</p><p> JRE是Java Runtime Environment的缩写，是Java程序的运行环境。既然是运行，当然要包含JVM，也就是所谓的Java虚拟机，还有所以的Java类库的class文件，都在lib目录下，并且都打包成了jar。</p><p>至于在Windows上的虚拟机是哪个文件呢？就是&lt;JRE安装目录&gt;/bin/server中的jvm.dll。</p><p>另外，安装JRE的时候安装程序会自动把JRE的java.exe添加到了系统变量中。系统变量Path的最前面有%SystemRoot%system32;%SystemRoot%;这样的配置，那样到Windows/system32目录下main去看看，会发现一个java.exe文件。这样就无需配置环境变量，也可以运行Java程序了。</p><p>3.JDK与JRE的区别</p><p>JDK是Java的开发工具，它不仅提供了Java程序运行所需的JRE，还提供了一系列的编译，运行等工具，如javac，java，javaw等。JRE只是Java程序的运行环境，它最核心的内容就是JVM（Java虚拟机）及核心类库。</p><p> 4.Tomcat和JDK是什么关系</p><p>tomcat是java的web项目运行容器之一；<br>jdk是java运行环境。也就是说java没有jdk肯定是没法编译运行的。<br>java运行必须依赖于jdk环境，但是不一定要用tomcat容器，如WebLogic、WebSphere等都是可以的。</p><h3 id="8、反射"><a href="#8、反射" class="headerlink" title="8、反射"></a>8、反射</h3><h5 id="反射的实现与作用"><a href="#反射的实现与作用" class="headerlink" title="反射的实现与作用"></a>反射的实现与作用</h5><p>它允许程序在运行时进行自我检查，同时也允许对其内部成员进行操作。反射机制提供的功能主要有：得到一个对象所属的类；获取一个类的所有成员变量和方法；在运行时创建对象；在运行时调用对象的方法</p><p><a href="https://blog.csdn.net/SongYuxinIT/article/details/81872066" target="_blank" rel="noopener">https://blog.csdn.net/SongYuxinIT/article/details/81872066</a></p><h3 id="9、JVM"><a href="#9、JVM" class="headerlink" title="9、JVM"></a>9、JVM</h3><h5 id="JVM回收算法和回收器，CMS采用哪种回收算法，怎么解决内存碎片问题？"><a href="#JVM回收算法和回收器，CMS采用哪种回收算法，怎么解决内存碎片问题？" class="headerlink" title="JVM回收算法和回收器，CMS采用哪种回收算法，怎么解决内存碎片问题？"></a>JVM回收算法和回收器，CMS采用哪种回收算法，怎么解决内存碎片问题？</h5><p>标记清除算法、复制算法、标记整理</p><p>CMS采用标记清除</p><p><a href="https://www.cnblogs.com/aspirant/p/8662690.html" target="_blank" rel="noopener">https://www.cnblogs.com/aspirant/p/8662690.html</a></p><h5 id="类加载过程"><a href="#类加载过程" class="headerlink" title="类加载过程"></a>类加载过程</h5><p>类加载过程分为：加载——验证——准备——解析——初始化<br>加载：又分为三个阶段：<br>（1）通过一个类的全限定名来获取定义此类的二进制字节流；<br>（2）将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构；</p><p>（3）在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口。</p><h5 id="JVM分区"><a href="#JVM分区" class="headerlink" title="JVM分区"></a>JVM分区</h5><p>Java堆，虚拟机栈，本地方法栈，方法区，程序计数器</p><h5 id="eden区，survial区"><a href="#eden区，survial区" class="headerlink" title="eden区，survial区?"></a>eden区，survial区?</h5><p>新生代有一个较大的Eden区和两个较小的Survivor区组成，绝大多数新创建的对象都是在Eden区分配的，其中大多数对象很快消亡。Eden是一块连续的内存，所以分配内存的速度很快。</p><p>首先，Eden满时，进行一次minor gc ，将存活 的对象复制到 To Survivor（以下简称To），清除Eden消亡的对象。当Eden再次满时，进行minor gc,To中能够晋升的移动到老年代，存活的对象复制到From。</p><p>清空Eden和To，如此切换（默认15），将存活的对象迁移到老年代</p><h5 id="JAVA虚拟机的作用"><a href="#JAVA虚拟机的作用" class="headerlink" title="JAVA虚拟机的作用?"></a>JAVA虚拟机的作用?</h5><p>解释运行字节码程序消除平台相关性。 jvm将java字节码解释为具体平台的具体指令。一般的高级语言如要在不同的平台上运行，至少需要编译成不同的目标代码。而引入JVM后，Java语言在不同平台上运行时不需要重新编译。Java语言使用模式Java虚拟机屏蔽了与具体平台相关的信息，使得Java语言编译程序只需生成在Java虚拟机上运行的目标代码（字节码），就可以在多种平台上不加修改地运行。Java虚拟机在执行字节码时，把字节码解释成具体平台上的机器指令执行。 </p><h5 id="GC中如何判断对象需要被回收？"><a href="#GC中如何判断对象需要被回收？" class="headerlink" title="GC中如何判断对象需要被回收？"></a>GC中如何判断对象需要被回收？</h5><p>gc用到垃圾回收机制算法，判断是否是垃圾，从而进行回收。 引用可达法法，程序运行从开始，每次引用对象，都将对引用的对象进行连接起来，到最后形成一张网，没有在这张网上的对象则被认为是垃圾对象。 还有引用计数法，对于对象的引用，每引用一次计数器加一，引用失败，计数器减一，当计数器一段时间为0，则可以被认为是垃圾。</p><h5 id="JAVA虚拟机中，哪些可作为ROOT对象？"><a href="#JAVA虚拟机中，哪些可作为ROOT对象？" class="headerlink" title="JAVA虚拟机中，哪些可作为ROOT对象？"></a>JAVA虚拟机中，哪些可作为ROOT对象？</h5><p>Java程序是怎么运行的？<br>1）加载类定义进入方法区<br>2）初始化类定义中的静态成员变量 &amp; 常量<br>3）执行入口类的main方法</p><p>在后续程序的执行过程会创建一些对象，并调用一些方法。<br>每调用一个方法，都会进行压栈，如果是Java方法，则压虚拟机栈；如果是native方法，则压本地方法栈。<br>在方法中也会创建一些对象，每创建一个对象，就会在堆中占据一块内存。<br>在方法中也会调用对象的方法。<br>在方法中也会调用类的静态成员变量 or 常量。</p><p>所以在进行垃圾回收的时候，可以从几个地方开始下手，然后一路往前走，最终没有触及的对象，都将被回收调。<br>这些root对象有哪些呢？<br>1）虚拟机栈中引用的对象<br>2）本地方法栈中引用的对象<br>3）方法区静态变量引用的对象</p><p>4）方法去常量引用的对象</p><h5 id="JVM内存模型是什么？"><a href="#JVM内存模型是什么？" class="headerlink" title="JVM内存模型是什么？"></a>JVM内存模型是什么？</h5><p><a href="https://blog.csdn.net/u011972171/article/details/80398771" target="_blank" rel="noopener">https://blog.csdn.net/u011972171/article/details/80398771</a></p><h5 id="jvm是如何实现线程？"><a href="#jvm是如何实现线程？" class="headerlink" title="jvm是如何实现线程？"></a>jvm是如何实现线程？</h5><p>.使用内核线程实现<br>内核线程(Kernel-Level Thread, KLT)就是直接由操作系统内核支持的线程。<br>用户态和内核态切换消耗内核资源<br>2 使用用户线程实现<br>3 用户线程加轻量级进程混合实现</p><p>java虚拟机的多线程是通过线程轮流切换分配处理执行时间的方式来实现的，在任何一个确定的时刻，一个处理器（对于多核处理器来说是一个内核）都只会执行一条程序中的指令。因此，为了线程切换后能恢复到正确的执行位置，每条线程都需要一个独立的程序计数器，各条线程之间计数器互不影响，独立存储。</p><p>简单点说，对于单核处理器，是通过快速切换线程执行指令来达到多线程的，因为单核处理器同时只能处理一条指令，只是这种切换速度很快，我们根本不会感知到。</p><h5 id="jvm最大内存限制多少"><a href="#jvm最大内存限制多少" class="headerlink" title="jvm最大内存限制多少"></a>jvm最大内存限制多少</h5><p>这个如果不使用-xx:Xmx -xx:Xms -xx:Permsize -xx:MaxPermsize参数进行设置的话，应该和不同版本的jdk的jvm最大内存限制相关吧。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">公司 JVM版本最大内存(兆)client最大内存(兆)server</span><br><span class="line">SUN 1.5.x14921520</span><br><span class="line">SUN 1.5.5(Linux)26342660</span><br><span class="line">SUN 1.4.215641564</span><br><span class="line">SUN 1.4.2(Linux)19001260</span><br><span class="line">IBM 1.4.2(Linux)2047N/A</span><br><span class="line">BEA JRockit 1.5 (U3)19091902</span><br></pre></td></tr></table></figure><h5 id="什么是Java虚拟机？为什么Java被称作是“平台无关的编程语言”？"><a href="#什么是Java虚拟机？为什么Java被称作是“平台无关的编程语言”？" class="headerlink" title="什么是Java虚拟机？为什么Java被称作是“平台无关的编程语言”？"></a>什么是Java虚拟机？为什么Java被称作是“平台无关的编程语言”？</h5><p>一、什么是java虚拟机？<br>java虚拟机是执行字节码文件（.class）的虚拟机进程。<br>java源程序（.java）被编译器编译成字节码文件（.class）。然后字节码文件，将由java虚拟机，解释成机器码（不同平台的机器码不同）。利用机器码操作硬件和操作系统<br>二、为什么java被称为平台无关的编程语言？</p><p>因为不同的平台装有不同的JVM，它们能够将相同的.class文件，解释成不同平台所需要的机器码。正是因为有JVM的存在，java被称为平台无关的编程语言</p><h5 id="描述一下JVM加载class文件的原理机制"><a href="#描述一下JVM加载class文件的原理机制" class="headerlink" title="描述一下JVM加载class文件的原理机制?"></a>描述一下JVM加载class文件的原理机制?</h5><p>委托机制，可见性机制，单一性机制 父类静态代码块，子类静态代码块，父类构造代码块和构造方法，子类构造代码块和构造方法。 启动类加载器，扩展类加载器，应用程序类加载器。双亲委派模型</p><h3 id="10、GC"><a href="#10、GC" class="headerlink" title="10、GC"></a>10、GC</h3><h5 id="java中内存泄露是啥，什么时候出现内存泄露？"><a href="#java中内存泄露是啥，什么时候出现内存泄露？" class="headerlink" title="java中内存泄露是啥，什么时候出现内存泄露？"></a>java中内存泄露是啥，什么时候出现内存泄露？</h5><p>java导致内存泄露的原因很明确：长生命周期的对象持有短生命周期对象的引用就很可能发生内存泄露，尽管短生命周期对象已经不再需要，但是因为长生命周期对象持有它的引用而导致不能被回收，这就是java中内存泄露的发生场景。<br>1.集合类，集合类仅仅有添加元素的方法，而没有相应的删除机制，导致内存被占用。这一点其实也不明确，这个集合类如果仅仅是局部变量，根本不会造成内存泄露，在方法栈退出后就没有引用了会被jvm正常回收。而如果这个集合类是全局性的变量（比如类中的静态属性，全局性的map等即有静态引用或final一直指向它），那么没有相应的删除机制，很可能导致集合所占用的内存只增不减，因此提供这样的删除机制或者定期清除策略非常必要。<br>2.单例模式。不正确使用单例模式是引起内存泄露的一个常见问题，单例对象在被初始化后将在JVM的整个生命周期中存在（以静态变量的方式），如果单例对象持有外部对象的引用，那么这个外部对象将不能被jvm正常回收，导致内存泄露</p><h5 id="minor-gc如果运行的很频繁，可能是什么原因引起的，minor-gc如果运行的很慢，可能是什么原因引起的"><a href="#minor-gc如果运行的很频繁，可能是什么原因引起的，minor-gc如果运行的很慢，可能是什么原因引起的" class="headerlink" title="minor gc如果运行的很频繁，可能是什么原因引起的，minor gc如果运行的很慢，可能是什么原因引起的?"></a>minor gc如果运行的很频繁，可能是什么原因引起的，minor gc如果运行的很慢，可能是什么原因引起的?</h5><p>minor gc运行的很频繁可能是什么原因引起的？<br>1、 产生了太多朝生夕灭的对象导致需要频繁minor gc</p><p>2、 新生代空间设置的比较小</p><p>minor gc运行的很慢有可能是什么原因引起的？<br>1、 新生代空间设置过大。</p><p>2、 对象引用链较长，进行可达性分析时间较长。</p><p>3、 新生代survivor区设置的比较小，清理后剩余的对象不能装进去需要移动到老年代，造成移动开销。</p><p>4、 内存分配担保失败，由minor gc转化为full gc</p><p>5、 采用的垃圾收集器效率较低，比如新生代使用serial收集器</p><h5 id="阐述GC算法"><a href="#阐述GC算法" class="headerlink" title="阐述GC算法"></a>阐述GC算法</h5><p>标记清除算法：首先先标记，然后统一把标记的对象依次清除，缺点是CPU消耗大，极易出现内存碎片，所以一般用于老年代。<br>复制算法：把内存区域分成俩块，每次只使用其中一块，然后把还存活的对象放在另一块中，清空原先的块，这样的话不会出现内存碎片。新生代常用的。<br>复制整理：指针碰撞，将使用过的对象移动到内存的一段，不用的放在另一端。<br>分代收集：根据不同代的区别，使用符合不同代的算法。</p><p>简单来说minorGC发生在新生代，频繁而且需要开销小，所以采取复制算法。<br>老年代：对象相较于新生代gc不频繁且对象少，采取标记清除或者标记整理算法。</p><h5 id="GC是什么-为什么要有GC"><a href="#GC是什么-为什么要有GC" class="headerlink" title="GC是什么? 为什么要有GC?"></a>GC是什么? 为什么要有GC?</h5><p>Java GC（Garbage Collection，垃圾收集，垃圾回收）机制，是Java与C++/C的主要区别之一，在使用JAVA的时候，一般不需要专门编写内存回收和垃圾清理代 码。这是因为在Java虚拟机中，存在自动内存管理和垃圾清扫机制。</p><p>电脑的内存大小的不变的，当我们使用对象的时候，如使用New关键字的时候，就会在内存中生产一个对象，但是我们在使用JAVA开发的时候，当一个对象使用完毕之后我们并没有手动的释放那个对象所占用的内存，就这样在使用程序的过程中，对象越来越多，当内存存放不了这么多对象的时候，电脑就会崩溃了，JAVA为了解决这个问题就推出了这个自动清除无用对象的功能，或者叫机制，这就是GC</p><h5 id="垃圾回收的优点和原理。并考虑2种回收机制"><a href="#垃圾回收的优点和原理。并考虑2种回收机制" class="headerlink" title="垃圾回收的优点和原理。并考虑2种回收机制"></a>垃圾回收的优点和原理。并考虑2种回收机制</h5><p>由于有个垃圾回收机制，java中的对象不再有“作用域”的概念，只有对象的引用才有作用域。垃圾回收可以有效的防止内存泄漏，有效的使用可以使用的内存。垃圾回收器通常是作为一个单独的低级别的线程运行，不可预知的情况下对内存堆中已经死亡的或者长时间没有使用的对象进行清除和回收，程序员不能实时的调用垃圾回收器对某个对象或所有对象进行垃圾回收，java语言没有提供释放已分配内存的显示操作方法。</p><p>回收机制有分代复制垃圾回收和标记垃圾回收、增量垃圾回收</p><h5 id="java中会存在内存泄漏吗，请简单描述。"><a href="#java中会存在内存泄漏吗，请简单描述。" class="headerlink" title="java中会存在内存泄漏吗，请简单描述。"></a>java中会存在内存泄漏吗，请简单描述。</h5><p>java中的内存泄露的情况：长生命周期的对象持有短生命周期对象的引用就很可能发生内存泄露，尽管短生命周期对象已经不再需要，但是因为长生命周期对象持有它的引用而导致不能被回收，这就是java中内存泄露的发生场景，通俗地说，就是程序员可能创建了一个对象，以后一直不再使用这个对象，这个对象却一直被引用，即这个对象无用但是却无法被垃圾回收器回收的，这就是java中可能出现内存泄露的情况，例如，缓存系统，我们加载了一个对象放在缓存中(例如放在一个全局map对象中)，然后一直不再使用它，这个对象一直被缓存引用，但却不再被使用。<br>检查java中的内存泄露，一定要让程序将各种分支情况都完整执行到程序结束，然后看某个对象是否被使用过，如果没有，则才能判定这个对象属于内存泄露。</p><p>如果一个外部类的实例对象的方法返回了一个内部类的实例对象，这个内部类对象被长期引用了，即使那个外部类实例对象不再被使用，但由于内部类持久外部类的实例对象，这个外部类对象将不会被垃圾回收，这也会造成内存泄露</p><p>内存泄露的另外一种情况：当一个对象被存储进HashSet集合中以后，就不能修改这个对象中的那些参与计算哈希值的字段了，否则，对象修改后的哈希值与最初存储进HashSet集合中时的哈希值就不同了，在这种情况下，即使在contains方法使用该对象的当前引用作为的参数去HashSet集合中检索对象，也将返回找不到对象的结果，这也会导致无法从HashSet集合中单独删除当前对象，造成内存泄露</p><p><a href="https://blog.csdn.net/coodlong/article/details/50836613" target="_blank" rel="noopener">https://blog.csdn.net/coodlong/article/details/50836613</a></p><h5 id="垃圾回收器的基本原理是什么？垃圾回收器可以马上回收内存吗？有什么办法主动通知虚拟机进行垃圾回收？（垃圾回收）"><a href="#垃圾回收器的基本原理是什么？垃圾回收器可以马上回收内存吗？有什么办法主动通知虚拟机进行垃圾回收？（垃圾回收）" class="headerlink" title="垃圾回收器的基本原理是什么？垃圾回收器可以马上回收内存吗？有什么办法主动通知虚拟机进行垃圾回收？（垃圾回收）"></a>垃圾回收器的基本原理是什么？垃圾回收器可以马上回收内存吗？有什么办法主动通知虚拟机进行垃圾回收？（垃圾回收）</h5><p>垃圾回收器是一个级别很低的线程,它通过不定时监测程序使用的内存中被占用的动态分配的内存内的对象是否还存在它的引用来判断是否该回收那个内存单元,如果不存在则回收,否则相反，并不是只要监测到就会回收的,因为垃圾回收器线程的低级别,所以当另一个级别比它高的线程跟他同时竞争运行时间时,前者优先运行,我们通过Thread或者继承Runnable的线程都级别都比它高,所以你无法知道垃圾回收器何时回收,System.gc()只是建议垃圾回收器进行回收处理,调用它并不能保证它回立即回收,</p><h3 id="11、IO和NIO、AIO"><a href="#11、IO和NIO、AIO" class="headerlink" title="11、IO和NIO、AIO"></a>11、IO和NIO、AIO</h3><h5 id="IO的基本常识"><a href="#IO的基本常识" class="headerlink" title="IO的基本常识"></a>IO的基本常识</h5><p>1.同步<br>用户进程触发IO操作并等待或者轮询的去查看IO操作是否完成<br>2.异步<br>用户触发IO操作以后,可以干别的事，IO操作完成以后再通知当前线程继续处理<br>3.阻塞<br>当一个线程调用 read() 或 write()时，该线程被阻塞，直到有一些数据被读取或写入，该线程在此期间不能执行其他任务<br>4.非阻塞<br>当线程从某通道进行读写数据时，若没有数据可用时，该线程可以进行其他任务。线程通常将非阻塞 IO 的空闲时间用于在其他通道上执行 IO 操作，所以单独的线程可以管理多个输入和输出通道。</p><p>BIO，NIO，AIO可以简述如下：<br>BIO是同步并阻塞，服务器实现模式为一个连接一个线程，即客户端有连接请求时服务器端就需要启动一个线程进行处理，如果这个连接不做任何事情会造成不必要的线程开销，当然可以通过线程池机制改善。<br>NIO是同步非阻塞，服务器实现模式为一个请求一个线程，即客户端发送的连接请求都会注册到多路复用器上，多路复用器轮询到连接有I/O请求时才启动一个线程进行处理。<br>AIO是异步非阻塞，服务器实现模式为一个有效请求一个线程，客户端的I/O请求都是由OS先完成了再通知服务器应用去启动线程进行处理。</p><p>BIO、NIO、AIO适用场景分析：<br>BIO方式适用于连接数目比较小且固定的架构，这种方式对服务器资源要求比较高<br>NIO方式适用于连接数目多且连接比较短的架构，可充分利用服务器资源</p><p>AIO方式使用于连接数目多且连接比较长的架构，充分调用OS参与并发操作</p><h5 id="怎么打印日志？"><a href="#怎么打印日志？" class="headerlink" title="怎么打印日志？"></a>怎么打印日志？</h5><p>使用log4j和slf4j实现日志打印</p><h5 id="运行时异常与一般异常有何异同？"><a href="#运行时异常与一般异常有何异同？" class="headerlink" title="运行时异常与一般异常有何异同？"></a>运行时异常与一般异常有何异同？</h5><p>异常表示程序运行过程中可能出现的非正常状态，运行时异常表示虚拟机的通常操作中可能遇到的异常，是一种常见运行错误。java编译器要求方法必须声明抛出可能发生的非运行时异常，但是并不要求必须声明抛出未被捕获的运行时异常。</p><h5 id="error和exception有什么区别"><a href="#error和exception有什么区别" class="headerlink" title="error和exception有什么区别?"></a>error和exception有什么区别?</h5><p>Exception：</p><p>1．可以是可被控制(checked) 或不可控制的(unchecked)。</p><p>2．表示一个由程序员导致的错误。</p><p>3．应该在应用程序级被处理。</p><p>Error：</p><p>1．总是不可控制的(unchecked)。</p><p>2．经常用来用于表示系统错误或低层资源的错误。</p><p>3．如何可能的话，应该在系统级被捕捉。</p><p><a href="https://blog.csdn.net/min996358312/article/details/65729617" target="_blank" rel="noopener">https://blog.csdn.net/min996358312/article/details/65729617</a></p><h5 id="给我一个你最常见到的runtime-exception"><a href="#给我一个你最常见到的runtime-exception" class="headerlink" title="给我一个你最常见到的runtime exception"></a>给我一个你最常见到的runtime exception</h5><p>1，当试图将对象强制转换为不是实例的子类时，抛出该异常（ClassCastException)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Object x = new Integer(0);</span><br><span class="line">System.out.println((String)x);</span><br></pre></td></tr></table></figure><p>2，一个整数“除以零”时，抛出ArithmeticException异常。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int a=5/0;</span><br></pre></td></tr></table></figure><p>3, 当应用程序试图在需要对象的地方使用 null 时，抛出NullPointerException异常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String s=null;</span><br><span class="line">int size=s.size();</span><br><span class="line">4, 指示索引或者为负，或者超出字符串的大小，抛出StringIndexOutOfBoundsException异常</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;hello&quot;.indexOf(-1);</span><br></pre></td></tr></table></figure><p>5，如果应用程序试图创建大小为负的数组，则抛出NegativeArraySizeException异常。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String[] ss=new String[-1];</span><br></pre></td></tr></table></figure><h5 id="Java中的异常处理机制的简单原理和应用。"><a href="#Java中的异常处理机制的简单原理和应用。" class="headerlink" title="Java中的异常处理机制的简单原理和应用。"></a>Java中的异常处理机制的简单原理和应用。</h5><p>java异常处理机制可以从两个方面来描述，当一个java程序违反了java语义的时候，JVM虚拟机就会抛出一个异常，比如说当遇到的null的时候，会抛出一个nullpointExcepiton，当遇到下标越界的时候就会抛出indexoutofbroundsException，除此之外，程序员还可以自定义异常，去拓展这种语义的检查，并在合适的时机，通过throw关键字抛出异常。其中，try{}是监控的代码语句块，catch{}是处理异常，finally{}语句块无论是否发生异常都会执行</p><h5 id="java中有几种类型的流？JDK为每种类型的流提供了一些抽象类以供继承，请说出他们分别是哪些类？"><a href="#java中有几种类型的流？JDK为每种类型的流提供了一些抽象类以供继承，请说出他们分别是哪些类？" class="headerlink" title="java中有几种类型的流？JDK为每种类型的流提供了一些抽象类以供继承，请说出他们分别是哪些类？"></a>java中有几种类型的流？JDK为每种类型的流提供了一些抽象类以供继承，请说出他们分别是哪些类？</h5><p>Java中的流分为两种，一种是字节流，另一种是字符流，分别由四个抽象类来表示（每种流包括输入和输出两种所以一共四个）:InputStream，OutputStream，Reader，Writer。Java中其他多种多样变化的流均是由它们派生出来的.</p><h5 id="什么是java序列化，如何实现java序列化？"><a href="#什么是java序列化，如何实现java序列化？" class="headerlink" title="什么是java序列化，如何实现java序列化？"></a>什么是java序列化，如何实现java序列化？</h5><p>序列化就是一种用来处理对象流的机制，所谓对象流也就是将对象的内容进行流化（将对象转换成二进制）。可以对流化后的对象进行读写操作，也可将流化后的对象传输于网络之间，序列化是为了解决在对对象流进行读写操作时所引发的问题。把对象转换为字节序列的过程称为对象的序列化，把字节序列恢复为对象的过程称为对象的反序列化。</p><p>序列化的实现：将需要被序列化的类实现Serializable接口，该接口没有需要实现的方法，implements Serializable只是为了标注该对象是可被序列化的，然后使用一个输出流(如：FileOutputStream)来构造一个ObjectOutputStream(对象流)对象，接着，使用ObjectOutputStream对象的writeObject(Object obj)方法就可以将参数为obj的对象写出(即保存其状态)，要恢复的话则用输入流。</p><p><a href="https://blog.csdn.net/qq_35868412/article/details/86978141" target="_blank" rel="noopener">https://blog.csdn.net/qq_35868412/article/details/86978141</a></p><h5 id="运行时异常与受检异常有什么区别？"><a href="#运行时异常与受检异常有什么区别？" class="headerlink" title="运行时异常与受检异常有什么区别？"></a>运行时异常与受检异常有什么区别？</h5><p>受检查异常表示程序可以处理的异常，如果抛出异常的方法本身不能处理它，那么方法调用者应该去处理它，从而使程序恢复运行，不至于终止程序。例如，喷墨打印机在打印文件时，如果纸用完或者墨水用完，就会暂停打印，等待用户添加打印纸或更换墨盒，如果用户添加了打印纸或更换了墨盒，就能继续打印。</p><p>运行时异常表示无法让程序恢复运行的异常，导致这种异常的原因通常是由于执行了错误操作。一旦出现了错误操作，建议终止程序，因此Java编译器不检查这种异常。</p><h2 id="算法与数据结构"><a href="#算法与数据结构" class="headerlink" title="算法与数据结构"></a>算法与数据结构</h2><h3 id="1、哈希"><a href="#1、哈希" class="headerlink" title="1、哈希"></a>1、哈希</h3><h5 id="hashset存的数是有序的吗？"><a href="#hashset存的数是有序的吗？" class="headerlink" title="hashset存的数是有序的吗？"></a>hashset存的数是有序的吗？</h5><p>hashset继承的是set接口，set是无序集合</p><h5 id="Object作为HashMap的key的话，对Object有什么要求吗？"><a href="#Object作为HashMap的key的话，对Object有什么要求吗？" class="headerlink" title="Object作为HashMap的key的话，对Object有什么要求吗？"></a>Object作为HashMap的key的话，对Object有什么要求吗？</h5><p>Hashmap不允许有重复的key，所以要重写它的hashcode和equal方法，以便确认key是否重复</p><h5 id="一致性哈希算法"><a href="#一致性哈希算法" class="headerlink" title="一致性哈希算法"></a>一致性哈希算法</h5><p>在日常工作中，经常有这样的情况，我们需要做hash，散列开数据到不同的区或节点。目标要的结果是要均匀散列，避免某个节点积累大量的数据，出现倾斜情况。<br>比如目前有N台机器，过来的数据key，需要做散列key%N,分发到对应的节点上。</p><p>一致性哈希算法原理：<br>为了解决hash倾斜难题，一致性算法是这样的，节点和节点形成一个环。比如<br>A-&gt;B-&gt;C-&gt;A，这样一个环。数字hash后落在环上，而不是落到某个node。比如落在a~b node之间，通过顺时针转，这个数字归b节点管。<br>但是如果节点很少，同样容易出现倾斜，负载不均衡问题。所以一致性哈希算法，引入了虚拟节点，在整个环上，均衡增加若干个节点。比如a1，a2，b1，b2，c1，c2，a1和a2都是属于A节点的。</p><p>通过让闭环上的节点增加，来平衡各个节点散列的值。</p><h5 id="什么是hashmap"><a href="#什么是hashmap" class="headerlink" title="什么是hashmap?"></a>什么是hashmap?</h5><p>HashMap 是一个散列表，它存储的内容是键值对(key-value)映射。 HashMap 继承于AbstractMap，实现了Map、Cloneable、java.io.Serializable接口。 HashMap 的实现不是同步的，这意味着它不是线程安全的。它的key、value都可以为null。此外，HashMap中的映射不是有序的。  </p><h5 id="Java中的HashMap的工作原理是什么？"><a href="#Java中的HashMap的工作原理是什么？" class="headerlink" title="Java中的HashMap的工作原理是什么？"></a>Java中的HashMap的工作原理是什么？</h5><p>hashmap是一个key-value键值对的数据结构，从结构上来讲在jdk1.8之前是用数组加链表的方式实现，jdk1.8加了红黑树，hashmap数组的默认初始长度是16，hashmap数组只允许一个key为null，允许多个value为null<br>hashmap的内部实现，hashmap是使用数组+链表+红黑树的形式实现的，其中数组是一个一个Node[]数组，我们叫他hash桶数组，它上面存放的是key-value键值对的节点。HashMap是用hash表来存储的，在hashmap里为解决hash冲突，使用链地址法，简单来说就是数组加链表的形式来解决，当数据被hash后，得到数组下标，把数据放在对应下表的链表中。<br>然后再说一下hashmap的方法实现<br>put方法，put方法的第一步，就是计算出要put元素在hash桶数组中的索引位置，得到索引位置需要三步，去put元素key的hashcode值，高位运算，取模运算，高位运算就是用第一步得到的值h，用h的高16位和低16位进行异或操作，第三步为了使hash桶数组元素分布更均匀，采用取模运算，取模运算就是用第二步得到的值和hash桶数组长度-1的值取与。这样得到的结果和传统取模运算结果一致，而且效率比取模运算高<br>jdk1.8中put方法的具体步骤，先判断hashmap是否为空，为空的话扩容，不为空计算出key的hash值i，然后看table[i]是否为空，为空就直接插入，不为空判断当前位置的key和table[i]是否相同，相同就覆盖，不相同就查看table[i]是否是红黑树节点，如果是的话就用红黑树直接插入键值对，如果不是开始遍历链表插入，如果遇到重复值就覆盖，否则直接插入，如果链表长度大于8，转为红黑树结构，执行完成后看size是否大于阈值threshold，大于就扩容，否则直接结束<br>get方法就是计算出要获取元素的hash值，去对应位置取即可。<br>扩容机制，hashmap的扩容中主要进行两部，第一步把数组长度变为原来的两倍，第二部把旧数组的元素重新计算hash插入到新数组中，在jdk1.8时，不用重新计算hash，只用看看原来的hash值新增的一位是零还是1，如果是1这个元素在新数组中的位置，是原数组的位置加原数组长度，如果是零就插入到原数组中。扩容过程第二部一个非常重要的方法是transfer方法，采用头插法，把旧数组的元素插入到新数组中。<br>3.hashmap大小为什么是2的幂次方<br>在计算插入元素在hash桶数组的索引时第三步，为了使元素分布的更加均匀，用取模操作，但是传统取模操作效率低，然后优化成h&amp;(length-1)，设置成2幂次方，是因为2的幂次方-1后的值每一位上都是1，然后与第二步计算出的h值与的时候，最终的结果只和key的hashcode值本身有关，这样不会造成空间浪费并且分布均匀，如果不是2的幂次方<br>如果length不为2的幂，比如15。那么length-1的2进制就会变成1110。在h为随机数的情况下，和1110做&amp;操作。尾数永远为0。那么0001、1001、1101等尾数为1的位置就永远不可能被entry占用。这样会造成浪费，不随机等问题。</p><h5 id="hashCode-和equals-方法的重要性体现在什么地方？"><a href="#hashCode-和equals-方法的重要性体现在什么地方？" class="headerlink" title="hashCode()和equals()方法的重要性体现在什么地方？"></a>hashCode()和equals()方法的重要性体现在什么地方？</h5><p>比如Java中HashMap使用hashcode()和equals()来确定键值对的索引，当根据键获取值的时候也会用到这两个方法。如果没有正确使用这两个方法，两个不同的键可能会有相同的hash值，因此，可能会被集合认定为是相等的。而且，这两个方法也会用来发现重复元素。所以，这两个的实现对HashMap的精确性和正确性是至关重要的。</p><h3 id="2、树"><a href="#2、树" class="headerlink" title="2、树"></a>2、树</h3><h5 id="说一下B-树和B-树？"><a href="#说一下B-树和B-树？" class="headerlink" title="说一下B+树和B-树？"></a>说一下B+树和B-树？</h5><p>m 阶的 B+ 树和 B- 树主要区别有三：<br>（ 1 ）有 n 棵子树的结点中含有 n （ B- 树中 n-1 ）个关键字；</p><p>（ 2 ） B+ 树叶子结点包含了全部关键字信息，及指向含关键字记录的指针，且叶子结点本身依关键字大小自小到大顺序链接；</p><p>（ 3 ） B+ 树的非终端结点可以看成是索引部分，结点中只含其子树（根结点）中最大（或最小）关键字。 B+ 树的查找既可以顺序查找，也可以随机查找， B- 只能顺序查找。</p><h5 id="怎么求一个二叉树的深度-手撕代码"><a href="#怎么求一个二叉树的深度-手撕代码" class="headerlink" title="怎么求一个二叉树的深度?手撕代码?"></a>怎么求一个二叉树的深度?手撕代码?</h5><p>1.后序遍历，最长栈长即为树的深度<br>2.递归，最后比较即可<br>3.遍历求层，层次即为深度</p><h5 id="算法题：二叉树层序遍历，进一步提问：要求每层打印出一个换行符"><a href="#算法题：二叉树层序遍历，进一步提问：要求每层打印出一个换行符" class="headerlink" title="算法题：二叉树层序遍历，进一步提问：要求每层打印出一个换行符"></a>算法题：二叉树层序遍历，进一步提问：要求每层打印出一个换行符</h5><p>只需要在普通的BST基础上增加一个判断当前queue中数量的size即可，每个size就代表当前层的节点数量</p><p><a href="https://www.jianshu.com/p/582d42dc8129" target="_blank" rel="noopener">https://www.jianshu.com/p/582d42dc8129</a></p><h5 id="二叉树任意两个节点之间路径的最大长度"><a href="#二叉树任意两个节点之间路径的最大长度" class="headerlink" title="二叉树任意两个节点之间路径的最大长度"></a>二叉树任意两个节点之间路径的最大长度</h5><p><a href="https://blog.csdn.net/patkritLee/article/details/52162806" target="_blank" rel="noopener">https://blog.csdn.net/patkritLee/article/details/52162806</a></p><p><a href="https://blog.csdn.net/liuyi1207164339/article/details/50917503" target="_blank" rel="noopener">https://blog.csdn.net/liuyi1207164339/article/details/50917503</a></p><h5 id="如何实现二叉树的深度？"><a href="#如何实现二叉树的深度？" class="headerlink" title="如何实现二叉树的深度？"></a>如何实现二叉树的深度？</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">static class TreeNode &#123;</span><br><span class="line">        int val;</span><br><span class="line">        TreeNode left;</span><br><span class="line">        TreeNode right;</span><br><span class="line"> </span><br><span class="line">        public TreeNode(int val) &#123;</span><br><span class="line">            this.val = val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * 递归求深度</span><br><span class="line">     * @param root</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static int treeDepth(TreeNode root) &#123;</span><br><span class="line">        if (root == null) &#123;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line">        // 计算左子树的深度</span><br><span class="line">        int left = treeDepth(root.left);</span><br><span class="line">        // 计算右子树的深度</span><br><span class="line">        int right = treeDepth(root.right);</span><br><span class="line">        // 树root的深度=路径最长的子树深度 + 1</span><br><span class="line">        return left &gt;= right ? (left + 1) : (right + 1);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="如何打印二叉树每层的节点？"><a href="#如何打印二叉树每层的节点？" class="headerlink" title="如何打印二叉树每层的节点？"></a>如何打印二叉树每层的节点？</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">思路是用arraylist模拟一个队列来存储相应的TreeNode</span><br><span class="line">*/</span><br><span class="line">public class Solution &#123;</span><br><span class="line">    public ArrayList&lt;Integer&gt; PrintFromTopToBottom(TreeNode root) &#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">        ArrayList&lt;TreeNode&gt; queue = new ArrayList&lt;&gt;();</span><br><span class="line">        if (root == null) &#123;</span><br><span class="line">            return list;</span><br><span class="line">        &#125;</span><br><span class="line">        queue.add(root);</span><br><span class="line">        while (queue.size() != 0) &#123;</span><br><span class="line">            TreeNode temp = queue.remove(0);</span><br><span class="line">            if (temp.left != null)&#123;</span><br><span class="line">                queue.add(temp.left);</span><br><span class="line">            &#125;</span><br><span class="line">            if (temp.right != null) &#123;</span><br><span class="line">                queue.add(temp.right);</span><br><span class="line">            &#125;</span><br><span class="line">            list.add(temp.val);</span><br><span class="line">        &#125;</span><br><span class="line">        return list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="TreeMap和TreeSet在排序时如何比较元素？Collections工具类中的sort-方法如何比较元素？"><a href="#TreeMap和TreeSet在排序时如何比较元素？Collections工具类中的sort-方法如何比较元素？" class="headerlink" title="TreeMap和TreeSet在排序时如何比较元素？Collections工具类中的sort()方法如何比较元素？"></a>TreeMap和TreeSet在排序时如何比较元素？Collections工具类中的sort()方法如何比较元素？</h5><p>TreeSet要求存放的对象所属的类必须实现Comparable接口，该接口提供了比较元素的compareTo()方法，当插入元素时会回调该方法比较元素的大小。TreeMap要求存放的键值对映射的键必须实现Comparable接口从而根据键对元素进行排序。Collections工具类的sort方法有两种重载的形式，第一种要求传入的待排序容器中存放的对象必须实现Comparable接口以实现元素的比较；第二种不强制性的要求容器中的元素必须可比较，但是要求传入第二个参数，参数是Comparator接口的子类型（需要重写compare方法实现元素的比较），相当于一个临时定义的排序规则，其实就是通过接口注入比较元素大小的算法，也是对回调模式的应用（Java中对函数式编程的支持）</p><h3 id="3、遍历"><a href="#3、遍历" class="headerlink" title="3、遍历"></a>3、遍历</h3><h5 id="编程题：写一个函数，找到一个文件夹下所有文件，包括子文件夹"><a href="#编程题：写一个函数，找到一个文件夹下所有文件，包括子文件夹" class="headerlink" title="编程题：写一个函数，找到一个文件夹下所有文件，包括子文件夹"></a>编程题：写一个函数，找到一个文件夹下所有文件，包括子文件夹</h5><p><a href="https://blog.csdn.net/qq_38977097/article/details/88853568" target="_blank" rel="noopener">https://blog.csdn.net/qq_38977097/article/details/88853568</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import java.io.File;</span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        File file = new File(&quot;D:\\360Downloads&quot;);        </span><br><span class="line">        walk(file);        </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    private static void walk(File file)</span><br><span class="line">    &#123;</span><br><span class="line">        if(file != null)&#123;  </span><br><span class="line">            if(file.isDirectory())&#123;  </span><br><span class="line">                // 列出全部的文件  </span><br><span class="line">                File f[] = file.listFiles();</span><br><span class="line">                if(f != null)</span><br><span class="line">                    for(int i = 0; i &lt; f.length; i++)  </span><br><span class="line">                    //递归调用自身  </span><br><span class="line">                    walk(f[i]);</span><br><span class="line">                &#125;else&#123;  </span><br><span class="line">                    // 输出路径  </span><br><span class="line">                    System.out.println(file);</span><br><span class="line">                &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="二叉树-Z-字型遍历"><a href="#二叉树-Z-字型遍历" class="headerlink" title="二叉树 Z 字型遍历"></a>二叉树 Z 字型遍历</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.*;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">public class TreeNode &#123;</span><br><span class="line">    int val = 0;</span><br><span class="line">    TreeNode left = null;</span><br><span class="line">    TreeNode right = null;</span><br><span class="line"></span><br><span class="line">    public TreeNode(int val) &#123;</span><br><span class="line">        this.val = val;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">*/</span><br><span class="line">public class Solution &#123;</span><br><span class="line">    public ArrayList&lt;ArrayList&lt;Integer&gt; &gt; Print(TreeNode pRoot) &#123;</span><br><span class="line">        int layer =1;</span><br><span class="line">        Stack&lt;TreeNode&gt; s1 = new Stack&lt;TreeNode&gt;();</span><br><span class="line">        Stack&lt;TreeNode&gt; s2 = new Stack&lt;TreeNode&gt;();</span><br><span class="line">        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; list = new ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</span><br><span class="line">        if(pRoot == null ) return list;</span><br><span class="line">        s1.push(pRoot);</span><br><span class="line">        while(!s1.isEmpty() || !s2.isEmpty())&#123;</span><br><span class="line">            if(layer%2!=0)&#123;</span><br><span class="line">               ArrayList&lt;Integer&gt; temp = new ArrayList&lt;Integer&gt;();</span><br><span class="line">               while(!s1.isEmpty())&#123;</span><br><span class="line">                   TreeNode node = s1.pop();</span><br><span class="line">                   if(node != null)&#123;</span><br><span class="line">                       temp.add(node.val);</span><br><span class="line">                       System.out.print(node.val + &quot; &quot;);</span><br><span class="line">                       s2.push(node.left);</span><br><span class="line">                       s2.push(node.right);</span><br><span class="line">                   &#125;</span><br><span class="line">                   </span><br><span class="line">               &#125;</span><br><span class="line">                if(!temp.isEmpty())&#123;</span><br><span class="line">                       list.add(temp);</span><br><span class="line">                       layer++;</span><br><span class="line">                       System.out.println();</span><br><span class="line">                   &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            else&#123;</span><br><span class="line">               ArrayList&lt;Integer&gt; temp = new ArrayList&lt;Integer&gt;();</span><br><span class="line">               while(!s2.isEmpty())&#123;</span><br><span class="line">                   TreeNode node = s2.pop();</span><br><span class="line">                   if(node != null)&#123;</span><br><span class="line">                       temp.add(node.val);</span><br><span class="line">                       System.out.print(node.val + &quot; &quot;);</span><br><span class="line">                       s1.push(node.right);</span><br><span class="line">                       s1.push(node.left);</span><br><span class="line">                   &#125;</span><br><span class="line">                   </span><br><span class="line">               &#125;</span><br><span class="line">                if(!temp.isEmpty())&#123;</span><br><span class="line">                       list.add(temp);</span><br><span class="line">                       layer++;</span><br><span class="line">                       System.out.println();</span><br><span class="line">                   &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return list;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、链表"><a href="#4、链表" class="headerlink" title="4、链表"></a>4、链表</h3><h5 id="反转单链表"><a href="#反转单链表" class="headerlink" title="反转单链表"></a>反转单链表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">public class ListNode &#123;</span><br><span class="line">    int val;</span><br><span class="line">    ListNode next = null;</span><br><span class="line"></span><br><span class="line">    ListNode(int val) &#123;</span><br><span class="line">        this.val = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;*/</span><br><span class="line">public class Solution &#123;</span><br><span class="line">    public ListNode ReverseList(ListNode head) &#123;</span><br><span class="line">        if(head==null)</span><br><span class="line">            return null;</span><br><span class="line">        if(head.next==null)</span><br><span class="line">            return head;</span><br><span class="line">        ListNode p = head.next;</span><br><span class="line">        head.next=null;</span><br><span class="line">        </span><br><span class="line">        while(p!=null)&#123;</span><br><span class="line">            ListNode val=p.next;</span><br><span class="line">            //head.next=null;</span><br><span class="line">            p.next=head;</span><br><span class="line">            head=p;</span><br><span class="line">            p=val;</span><br><span class="line">        &#125;</span><br><span class="line">        return head;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="随机链表的复制"><a href="#随机链表的复制" class="headerlink" title="随机链表的复制"></a>随机链表的复制</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">public class RandomListNode &#123;</span><br><span class="line">    int label;</span><br><span class="line">    RandomListNode next = null;</span><br><span class="line">    RandomListNode random = null;</span><br><span class="line"></span><br><span class="line">    RandomListNode(int label) &#123;</span><br><span class="line">        this.label = label;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">public class Solution &#123;</span><br><span class="line">    public RandomListNode Clone(RandomListNode pHead) &#123;</span><br><span class="line">        if(pHead == null) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        RandomListNode currentNode = pHead;</span><br><span class="line">        //1、复制每个结点，如复制结点A得到A1，将结点A1插到结点A后面；</span><br><span class="line">        while(currentNode != null)&#123;</span><br><span class="line">            RandomListNode cloneNode = new RandomListNode(currentNode.label);</span><br><span class="line">            RandomListNode nextNode = currentNode.next;</span><br><span class="line">            currentNode.next = cloneNode;</span><br><span class="line">            cloneNode.next = nextNode;</span><br><span class="line">            currentNode = nextNode;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        currentNode = pHead;</span><br><span class="line">        //2、重新遍历链表，复制老结点的随机指针给新结点，如A1.random = A.random.next;</span><br><span class="line">        while(currentNode != null) &#123;</span><br><span class="line">            currentNode.next.random = currentNode.random==null?null:currentNode.random.next;</span><br><span class="line">            currentNode = currentNode.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        //3、拆分链表，将链表拆分为原链表和复制后的链表</span><br><span class="line">        currentNode = pHead;</span><br><span class="line">        RandomListNode pCloneHead = pHead.next;</span><br><span class="line">        while(currentNode != null) &#123;</span><br><span class="line">            RandomListNode cloneNode = currentNode.next;</span><br><span class="line">            currentNode.next = cloneNode.next;</span><br><span class="line">            cloneNode.next = cloneNode.next==null?null:cloneNode.next.next;</span><br><span class="line">            currentNode = currentNode.next;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        return pCloneHead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="链表-奇数位升序偶数位降序-让链表变成升序"><a href="#链表-奇数位升序偶数位降序-让链表变成升序" class="headerlink" title="链表-奇数位升序偶数位降序-让链表变成升序"></a>链表-奇数位升序偶数位降序-让链表变成升序</h5><p><a href="https://www.cnblogs.com/DarrenChan/p/8764608.html" target="_blank" rel="noopener">https://www.cnblogs.com/DarrenChan/p/8764608.html</a></p><h5 id="bucket如果用链表存储，它的缺点是什么？"><a href="#bucket如果用链表存储，它的缺点是什么？" class="headerlink" title="bucket如果用链表存储，它的缺点是什么？"></a>bucket如果用链表存储，它的缺点是什么？</h5><p>不支持随机访问，查找的时间复杂度是O(n)</p><h5 id="如何判断链表检测环"><a href="#如何判断链表检测环" class="headerlink" title="如何判断链表检测环"></a>如何判断链表检测环</h5><p><a href="https://blog.csdn.net/yangruxi/article/details/80333000" target="_blank" rel="noopener">https://blog.csdn.net/yangruxi/article/details/80333000</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public static boolean isLoop(Node head) &#123;</span><br><span class="line">        boolean flag = false;</span><br><span class="line">        Node slow = head;</span><br><span class="line">        Node fast = head;</span><br><span class="line">        while(fast != null &amp;&amp; fast.next !=null) &#123;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            if(fast == slow) &#123;</span><br><span class="line">                flag = true;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if(fast == null || fast.next ==null) &#123;</span><br><span class="line">            flag = false;</span><br><span class="line">        &#125;</span><br><span class="line">        return flag;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="5、数组"><a href="#5、数组" class="headerlink" title="5、数组"></a>5、数组</h3><h5 id="寻找一数组中前K个最大的数"><a href="#寻找一数组中前K个最大的数" class="headerlink" title="寻找一数组中前K个最大的数"></a>寻找一数组中前K个最大的数</h5><p><a href="https://blog.csdn.net/zhou15755387780/article/details/81318105" target="_blank" rel="noopener">https://blog.csdn.net/zhou15755387780/article/details/81318105</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">package com.Test;</span><br><span class="line"> </span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.List;</span><br><span class="line"> </span><br><span class="line">//给定一个长度为n的数组，寻找其中最大的k个数</span><br><span class="line">public class FindKthElements &#123;</span><br><span class="line"></span><br><span class="line">//算法一：排序，时间复杂度O(nlogn)，空间复杂度O(1)</span><br><span class="line">public ArrayList&lt;Integer&gt; findKthElements(int[] arr, int k) &#123;</span><br><span class="line"></span><br><span class="line">ArrayList&lt;Integer&gt; res = new ArrayList&lt;Integer&gt;();</span><br><span class="line">if(arr.length &lt;= 0 || arr == null || arr.length &lt; k) &#123;</span><br><span class="line">return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Arrays.sort(arr);</span><br><span class="line">for(int i = arr.length - 1;i &gt; arr.length - 1 - k;i --) &#123;</span><br><span class="line">res.add(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//算法二；前面k个数都比后面的数的最大值要大，则前面k个数就是最大的k个，时间复杂度O(k*(n-k))，空间复杂度O(1)</span><br><span class="line">public ArrayList&lt;Integer&gt; findKthElements2(int[] arr, int k) &#123;</span><br><span class="line"></span><br><span class="line">ArrayList&lt;Integer&gt; res = new ArrayList&lt;Integer&gt;();</span><br><span class="line">if(arr.length &lt;= 0 || arr == null || arr.length &lt; k) &#123;</span><br><span class="line">return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for(int i = 0;i &lt; k;i ++) &#123;</span><br><span class="line">int maxValueIndex = this.getMaxValueIndex(arr, k);</span><br><span class="line">if(arr[maxValueIndex] &gt; arr[i]) &#123;</span><br><span class="line">int temp = arr[maxValueIndex];</span><br><span class="line">arr[maxValueIndex] = arr[i];</span><br><span class="line">arr[i] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for(int i = 0;i &lt; k;i ++) &#123;</span><br><span class="line">res.add(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//选择排序：选出最大值的下标</span><br><span class="line">public int getMaxValueIndex(int[] arr, int k) &#123;</span><br><span class="line"></span><br><span class="line">int maxValueIndex = k;</span><br><span class="line">for(int i = k + 1;i &lt; arr.length;i ++) &#123;</span><br><span class="line">if(arr[i] &gt; arr[maxValueIndex]) &#123;</span><br><span class="line">maxValueIndex = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return maxValueIndex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//算法三：构建大顶堆，然后调整k次，得到最大的k个数。时间复杂度(k+1)O(nlogn)，空间复杂度O(1)</span><br><span class="line">public ArrayList&lt;Integer&gt; findKthElements3(int[] arr, int k) &#123;</span><br><span class="line"></span><br><span class="line">ArrayList&lt;Integer&gt; res = new ArrayList&lt;Integer&gt;();</span><br><span class="line">if(arr.length &lt;= 0 || arr == null || arr.length &lt; k) &#123;</span><br><span class="line">return res;</span><br><span class="line">&#125;</span><br><span class="line">//构建大顶堆</span><br><span class="line">int len = arr.length;</span><br><span class="line">for(int i = len / 2;i &lt; len;i ++) &#123;</span><br><span class="line">heapSort(arr, i, len);</span><br><span class="line">&#125;</span><br><span class="line">//调整k次大顶堆</span><br><span class="line">for(int i = arr.length - 1;i &gt; arr.length - 1 - k;i --) &#123;</span><br><span class="line">//交换最大的值到底部</span><br><span class="line">int temp = arr[i];</span><br><span class="line">arr[i] = arr[0];</span><br><span class="line">arr[0] = temp;</span><br><span class="line">res.add(arr[i]);</span><br><span class="line">heapSort(arr, 0, i);</span><br><span class="line">&#125;</span><br><span class="line">return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void heapSort(int[] arr, int start, int len) &#123;</span><br><span class="line"></span><br><span class="line">int parent = start;</span><br><span class="line">int leftChild = parent * 2 + 1;</span><br><span class="line">int parentValue = arr[parent];</span><br><span class="line">while(leftChild &lt; len) &#123;</span><br><span class="line">int rightChild = leftChild + 1;</span><br><span class="line">if(rightChild &lt; len &amp;&amp; arr[leftChild] &lt; arr[rightChild]) &#123;//在左右孩子里选一个较大的出来</span><br><span class="line">leftChild = rightChild;</span><br><span class="line">&#125;</span><br><span class="line">if(parentValue &gt; arr[leftChild]) &#123;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">arr[parent] = arr[leftChild];</span><br><span class="line">parent = leftChild;</span><br><span class="line">leftChild = parent * 2 + 1;</span><br><span class="line">&#125;</span><br><span class="line">arr[parent] = parentValue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">int[] arr = &#123;9,4,5,8,2&#125;;</span><br><span class="line">FindKthElements fke = new FindKthElements();</span><br><span class="line">List&lt;Integer&gt; res = fke.findKthElements3(arr, 3);</span><br><span class="line">System.out.println(res);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="求一个数组中连续子向量的最大和"><a href="#求一个数组中连续子向量的最大和" class="headerlink" title="求一个数组中连续子向量的最大和"></a>求一个数组中连续子向量的最大和</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class Solution &#123;</span><br><span class="line">    public int FindGreatestSumOfSubArray(int[] array) &#123;</span><br><span class="line">        int res=array[0];</span><br><span class="line">        int max=array[0];</span><br><span class="line">        for(int i=1;i&lt;array.length;i++)&#123;</span><br><span class="line">            max=Math.max(max+array[i],array[i]);</span><br><span class="line">            res=Math.max(res,max);</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="找出数组中和为S的一对组合，找出一组就行"><a href="#找出数组中和为S的一对组合，找出一组就行" class="headerlink" title="找出数组中和为S的一对组合，找出一组就行"></a>找出数组中和为S的一对组合，找出一组就行</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class NumComberAll &#123;</span><br><span class="line"> </span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">int a[] = &#123;2,3,3,2,2,4,1,4,-2,5,1&#125;;</span><br><span class="line">String b = &quot;&quot;;</span><br><span class="line">fun(a, b, 11, 0, 5);</span><br><span class="line">&#125;</span><br><span class="line">//递归搜索</span><br><span class="line">public static void fun(int a[],String b, int length, int  i, int s)</span><br><span class="line">&#123;</span><br><span class="line">String temp = b;</span><br><span class="line">if(i&gt;=length)</span><br><span class="line">return;</span><br><span class="line">//输出</span><br><span class="line">if(s==0)</span><br><span class="line">System.out.println(temp);</span><br><span class="line">//不取a[i]</span><br><span class="line">fun(a,temp, length, i+1, s);</span><br><span class="line">//取a[i]</span><br><span class="line">temp=temp+a[i];</span><br><span class="line">fun(a,temp, length, i+1, s-a[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="一个数组，除一个元素外其它都是两两相等，求那个元素"><a href="#一个数组，除一个元素外其它都是两两相等，求那个元素" class="headerlink" title="一个数组，除一个元素外其它都是两两相等，求那个元素?"></a>一个数组，除一个元素外其它都是两两相等，求那个元素?</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int singleNumber(int A[], int n) &#123;</span><br><span class="line">    int num=0;</span><br><span class="line">    for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">        num=num^A[i];</span><br><span class="line">    &#125;</span><br><span class="line">    return num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="算法题：将一个二维数组顺时针旋转90度，说一下思路。"><a href="#算法题：将一个二维数组顺时针旋转90度，说一下思路。" class="headerlink" title="算法题：将一个二维数组顺时针旋转90度，说一下思路。"></a>算法题：将一个二维数组顺时针旋转90度，说一下思路。</h5><p><a href="https://blog.csdn.net/peach90/article/details/40422097" target="_blank" rel="noopener">https://blog.csdn.net/peach90/article/details/40422097</a></p><h3 id="6、排序"><a href="#6、排序" class="headerlink" title="6、排序"></a>6、排序</h3><h5 id="排序算法知道哪些，时间复杂度是多少，解释一下快排？"><a href="#排序算法知道哪些，时间复杂度是多少，解释一下快排？" class="headerlink" title="排序算法知道哪些，时间复杂度是多少，解释一下快排？"></a>排序算法知道哪些，时间复杂度是多少，解释一下快排？</h5><p>直接插入排序，选择排序，冒泡排序：O(n*n) ，快速排序，归并排序，堆排序：O(nlog2n)， 希尔排序：O(n√n) ，基数排序：O(d(r+n))， 快速排序：每次选择一个枢纽值，比它大的放在右边，比它小的放在左边，每一趟排序都会使一个数放到最终的位置。</p><h5 id="如何得到一个数据流中的中位数？"><a href="#如何得到一个数据流中的中位数？" class="headerlink" title="如何得到一个数据流中的中位数？"></a>如何得到一个数据流中的中位数？</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">private int count = 0;</span><br><span class="line">private PriorityQueue&lt;Integer&gt; minHeap = new PriorityQueue&lt;&gt;();</span><br><span class="line">private PriorityQueue&lt;Integer&gt; maxHeap = new PriorityQueue&lt;Integer&gt;(15, new Comparator&lt;Integer&gt;() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public int compare(Integer o1, Integer o2) &#123;</span><br><span class="line">        return o2 - o1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">public void Insert(Integer num) &#123;</span><br><span class="line">    if (count %2 == 0) &#123;//当数据总数为偶数时，新加入的元素，应当进入小根堆</span><br><span class="line">        //（注意不是直接进入小根堆，而是经大根堆筛选后取大根堆中最大元素进入小根堆）</span><br><span class="line">        //1.新加入的元素先入到大根堆，由大根堆筛选出堆中最大的元素</span><br><span class="line">        maxHeap.offer(num);</span><br><span class="line">        int filteredMaxNum = maxHeap.poll();</span><br><span class="line">        //2.筛选后的【大根堆中的最大元素】进入小根堆</span><br><span class="line">        minHeap.offer(filteredMaxNum);</span><br><span class="line">    &#125; else &#123;//当数据总数为奇数时，新加入的元素，应当进入大根堆</span><br><span class="line">        //（注意不是直接进入大根堆，而是经小根堆筛选后取小根堆中最大元素进入大根堆）</span><br><span class="line">        //1.新加入的元素先入到小根堆，由小根堆筛选出堆中最小的元素</span><br><span class="line">        minHeap.offer(num);</span><br><span class="line">        int filteredMinNum = minHeap.poll();</span><br><span class="line">        //2.筛选后的【小根堆中的最小元素】进入大根堆</span><br><span class="line">        maxHeap.offer(filteredMinNum);</span><br><span class="line">    &#125;</span><br><span class="line">    count++;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">public Double GetMedian() &#123;</span><br><span class="line">    if (count %2 == 0) &#123;</span><br><span class="line">        return new Double((minHeap.peek() + maxHeap.peek())) / 2;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return new Double(minHeap.peek());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="堆排序的原理是什么？"><a href="#堆排序的原理是什么？" class="headerlink" title="堆排序的原理是什么？"></a>堆排序的原理是什么？</h5><p>堆是一个完全二叉树，如果按照层序遍历结果存储为数组，下标为i且根节点i=0，则满足Key[i]&gt;=Key[2i+1]&amp;&amp;Key[i]&gt;=key[2i+2]的称为大根堆，即根结点大于子结点，堆顶为最大值。  堆排序第一步建堆，即将输入序列看作是层序遍历结果，然后按顺序写成完全二叉树的形式。第二步调整堆，即从最后一个非叶结点开始调整，它的数组下标为最后一个数的下标-1之后除以2，保证这个结点比子结点大。然后下标减一继续调整，交换结点之后的孩子结点有可能不满足堆的性质，继续调整直到下标为0，这里有递归和非递归两种方法。  堆排序就是根据前边建好的堆先取出根结点和最后一个结点交换，然后对前边len-1个结点进行堆调整，再取出根结点和倒数第二个结点交换，对前边len-2个结点堆调整，以此类推直到所有结点都取出。  heapAdjust函数可看做每次都从当前结点走到叶子节点，数高度为log(n+1)向上取整，所以复杂度可视为O(logn)，简单起见，不必考虑到底是从根节点到达叶结点还是从中间某节点到达叶结点。建堆时调用heapAdjust函数n/2次，排序时调用heapAdjust函数n-1次，得到三种情况下的复杂度都是O(logn)* (n/2)+O(logn)*(n-1)，化简为O(nlogn)。空间复杂度O(1)。是不稳定的排序  </p><h5 id="归并排序的原理是什么？"><a href="#归并排序的原理是什么？" class="headerlink" title="归并排序的原理是什么？"></a>归并排序的原理是什么？</h5><p>归并排序是一种递归算法，不断将列表拆分为一半，如果列表为空或有一个项，则按定义进行排序。如果列表有多个项，我们分割列表，并递归调用两个半部分的合并排序。一旦对两半排序完成，获取两个较小的排序列表并将它们组合成单个排序的新列表的过程</p><h5 id="如何用java写一个冒泡排序？"><a href="#如何用java写一个冒泡排序？" class="headerlink" title="如何用java写一个冒泡排序？"></a>如何用java写一个冒泡排序？</h5><p><a href="https://www.jianshu.com/p/f31de0e89f7e" target="_blank" rel="noopener">https://www.jianshu.com/p/f31de0e89f7e</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public static void bubbleSort(int[] arr) &#123;</span><br><span class="line">    int temp = 0;</span><br><span class="line">    for (int i = arr.length - 1; i &gt; 0; --i) &#123; // 每次需要排序的长度</span><br><span class="line">        for (int j = 0; j &lt; i; ++j) &#123; // 从第一个元素到第i个元素</span><br><span class="line">            if (arr[j] &gt; arr[j + 1]) &#123;</span><br><span class="line">                temp = arr[j];</span><br><span class="line">                arr[j] = arr[j + 1];</span><br><span class="line">                arr[j + 1] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7、堆与栈"><a href="#7、堆与栈" class="headerlink" title="7、堆与栈"></a>7、堆与栈</h3><h5 id="heap和stack有什么区别。"><a href="#heap和stack有什么区别。" class="headerlink" title="heap和stack有什么区别。"></a>heap和stack有什么区别。</h5><p>要点：堆：顺序随意      栈：后进先出(Last-In/First-Out)</p><p>1.堆栈空间分配</p><p> ①栈（操作系统）：由操作系统自动分配释放 ，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。</p><p> ②堆（操作系统）： 一般由程序员分配释放， 若程序员不释放，程序结束时可能由OS回收，分配方式倒是类似于链表。</p><p>2.堆栈缓存方式</p><p>①栈使用的是一级缓存， 他们通常都是被调用时处于存储空间中，调用完毕立即释放。</p><p>②堆则是存放在二级缓存中，生命周期由虚拟机的垃圾回收算法来决定（并不是一旦成为孤儿对象就能被回收）。所以调用这些对象的速度要相对来得低一些。</p><p>3.堆栈数据结构区别</p><p>①堆（数据结构）：堆可以被看成是一棵完全二叉树树，如：堆排序。</p><p>②栈（数据结构）：一种先进后出的数据结构。</p><h5 id="解释内存中的栈-stack-、堆-heap-和静态区-static-area-的用法。"><a href="#解释内存中的栈-stack-、堆-heap-和静态区-static-area-的用法。" class="headerlink" title="解释内存中的栈(stack)、堆(heap)和静态区(static area)的用法。"></a>解释内存中的栈(stack)、堆(heap)和静态区(static area)的用法。</h5><p>堆区:专门用来保存对象的实例(new 创建的对象和数组)，实际上也只是保存对象实例的属性值，属性的类型和对象本身的类型标记等，并不保存对象的方法（方法是指令，保存在Stack中）</p><p>1.存储的全部是对象，每个对象都包含一个与之对应的class的信息。(class的目的是得到操作指令)<br>2.jvm只有一个堆区(heap)被所有线程共享，堆中不存放基本类型和对象引用，只存放对象本身.<br>3.一般由程序员分配释放， 若程序员不释放，程序结束时可能由OS回收 。<br>栈区:对象实例在Heap 中分配好以后，需要在Stack中保存一个4字节的Heap内存地址，用来定位该对象实例在Heap 中的位置，便于找到该对象实例。<br>1.每个线程包含一个栈区，栈中只保存基础数据类型的对象和自定义对象的引用(不是对象)，对象都存放在堆区中<br>2.每个栈中的数据(原始类型和对象引用)都是私有的，其他栈不能访问。<br>3.栈分为3个部分：基本类型变量区、执行环境上下文、操作指令区(存放操作指令)。<br>4.由编译器自动分配释放 ，存放函数的参数值，局部变量的值等．<br>静态区/方法区:<br>1.方法区又叫静态区，跟堆一样，被所有的线程共享。方法区包含所有的class和static变量。<br>2.方法区中包含的都是在整个程序中永远唯一的元素，如class，static变量。<br>3.全局变量和静态变量的存储是放在一块的，初始化的全局变量和静态变量在一块区域， 未初始化的全局变量和未初始化的静态变量在相邻的另一块区域。</p><h3 id="8、队列"><a href="#8、队列" class="headerlink" title="8、队列"></a>8、队列</h3><h5 id="什么是Java优先级队列-Priority-Queue-？"><a href="#什么是Java优先级队列-Priority-Queue-？" class="headerlink" title="什么是Java优先级队列(Priority Queue)？"></a>什么是Java优先级队列(Priority Queue)？</h5><p>PriorityQueue是一个基于优先级堆的无界队列。它的元素是按照自然顺序排序的。在创建元素的时候，我们给它一个一个负责排序的比较器。PriorityQueue不允许null值，因为</p><p>它们没有自然排序，或者说没有任何相关联的比较器。最后PriorityQueue不是线程安全的，出对和入队的时间复杂度都是O(log(n))</p><h3 id="9、高级算法"><a href="#9、高级算法" class="headerlink" title="9、高级算法"></a>9、高级算法</h3><h5 id="题目：Design-and-implement-a-data-structure-for-Least-Frequently-Used-LFU-cache-It-should-support-the-following-operations-get-and-put-get-key-Get-the-value-will-always-be-positive-of-the-key-if-the-key-exists-in-the-cache-otherwise-return-1-put-key-value-Set-or-insert-the-value-if-the-key-is-not-already-present-When-the-cache-reaches-its-capacity-it-should-invalidate-the-least-frequently-used-item-before-inserting-a-new-item-For-the-purpose-of-this-problem-when-there-is-a-tie-i-e-two-or-more-keys-that-have-the-same-frequency-the-least-recently-used-key-would-be-evicted-Could-you-do-both-operations-in-O-1-time-complexity"><a href="#题目：Design-and-implement-a-data-structure-for-Least-Frequently-Used-LFU-cache-It-should-support-the-following-operations-get-and-put-get-key-Get-the-value-will-always-be-positive-of-the-key-if-the-key-exists-in-the-cache-otherwise-return-1-put-key-value-Set-or-insert-the-value-if-the-key-is-not-already-present-When-the-cache-reaches-its-capacity-it-should-invalidate-the-least-frequently-used-item-before-inserting-a-new-item-For-the-purpose-of-this-problem-when-there-is-a-tie-i-e-two-or-more-keys-that-have-the-same-frequency-the-least-recently-used-key-would-be-evicted-Could-you-do-both-operations-in-O-1-time-complexity" class="headerlink" title="题目：Design and implement a data structure for Least Frequently Used (LFU) cache. It should support the following operations: get and put.get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.put(key, value) - Set or insert the value if the key is not already present. When the cache reaches its capacity, it should invalidate the least frequently used item before inserting a new item. For the purpose of this problem, when there is a tie (i.e., two or more keys that have the same frequency), the least recently used key would be evicted.Could you do both operations in O(1) time complexity?"></a>题目：Design and implement a data structure for Least Frequently Used (LFU) cache. It should support the following operations: get and put.get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.put(key, value) - Set or insert the value if the key is not already present. When the cache reaches its capacity, it should invalidate the least frequently used item before inserting a new item. For the purpose of this problem, when there is a tie (i.e., two or more keys that have the same frequency), the least recently used key would be evicted.Could you do both operations in O(1) time complexity?</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">class LFUCache &#123;</span><br><span class="line">    class Node &#123;</span><br><span class="line">        int key, val, freq;</span><br><span class="line">        Node prev, next;</span><br><span class="line">        </span><br><span class="line">        public Node(Node prev, int key, int val, Node next) &#123;</span><br><span class="line">            this.prev = prev;</span><br><span class="line">            this.key = key;</span><br><span class="line">            this.val = val;</span><br><span class="line">            this.next = next;</span><br><span class="line">            freq = 1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Map&lt;Integer, Node&gt; nodes, heads;</span><br><span class="line">    Node head, tail;</span><br><span class="line">    int cap;</span><br><span class="line">    </span><br><span class="line">    public LFUCache(int capacity) &#123;</span><br><span class="line">        nodes = new HashMap();</span><br><span class="line">        heads = new HashMap();</span><br><span class="line">        head = new Node(null, 0, 0, null);</span><br><span class="line">        tail = new Node(head, 0, 0, null);</span><br><span class="line">        head.next = tail;</span><br><span class="line">        cap = capacity;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    private void pushNode(int key, int value) &#123;</span><br><span class="line">        Node prev = heads.containsKey(1) ? heads.get(1) : tail;</span><br><span class="line">        Node newNode = new Node(prev.prev, key, value, prev);</span><br><span class="line">        newNode.next.prev = newNode;</span><br><span class="line">        newNode.prev.next = newNode;</span><br><span class="line">        heads.put(1, newNode);</span><br><span class="line">        nodes.put(key, newNode);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    private void popNode() &#123;</span><br><span class="line">        Node remove = tail.prev;</span><br><span class="line">        tail.prev = tail.prev.prev;</span><br><span class="line">        tail.prev.next = tail;</span><br><span class="line">        nodes.remove(remove.key);</span><br><span class="line">        if(heads.get(remove.freq) == remove)</span><br><span class="line">            heads.remove(remove.freq);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    private void updateAndMoveNode(int key) &#123;</span><br><span class="line">        Node node = nodes.get(key);</span><br><span class="line">        node.prev.next = node.next;</span><br><span class="line">        node.next.prev = node.prev;</span><br><span class="line">        if(heads.containsKey(node.freq + 1)) &#123;</span><br><span class="line">            if(heads.get(node.freq) == node) &#123;</span><br><span class="line">                if(node.next == tail || node.next.freq != node.freq)</span><br><span class="line">                    heads.remove(node.freq);</span><br><span class="line">                else</span><br><span class="line">                    heads.put(node.freq, node.next);</span><br><span class="line">            &#125;</span><br><span class="line">            node.freq++;</span><br><span class="line">            node.next = heads.get(node.freq);</span><br><span class="line">            node.prev = heads.get(node.freq).prev;</span><br><span class="line">            heads.get(node.freq).prev.next = node;</span><br><span class="line">            heads.get(node.freq).prev = node;</span><br><span class="line">            heads.put(node.freq, node);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            if(heads.get(node.freq) == node) &#123;</span><br><span class="line">                if(node.next == tail || node.next.freq != node.freq)</span><br><span class="line">                    heads.remove(node.freq);</span><br><span class="line">                else</span><br><span class="line">                    heads.put(node.freq, node.next);</span><br><span class="line">                node.freq++;</span><br><span class="line">                heads.put(node.freq, node);</span><br><span class="line">                node.prev.next = node;</span><br><span class="line">                node.next.prev = node;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                node.next = heads.get(node.freq);</span><br><span class="line">                node.prev = heads.get(node.freq).prev;</span><br><span class="line">                heads.get(node.freq).prev.next = node;</span><br><span class="line">                heads.get(node.freq).prev = node;</span><br><span class="line">                node.freq++;</span><br><span class="line">                heads.put(node.freq, node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public int get(int key) &#123;</span><br><span class="line">        if(!nodes.containsKey(key))</span><br><span class="line">            return -1;</span><br><span class="line">        updateAndMoveNode(key);</span><br><span class="line">        return nodes.get(key).val;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void put(int key, int value) &#123;</span><br><span class="line">        if(cap == 0)</span><br><span class="line">            return;</span><br><span class="line">        if(!nodes.containsKey(key)) &#123;</span><br><span class="line">            if(nodes.size() == cap)</span><br><span class="line">                popNode();</span><br><span class="line">            pushNode(key, value);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            nodes.get(key).val = value;</span><br><span class="line">            updateAndMoveNode(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="id全局唯一且自增，如何实现？"><a href="#id全局唯一且自增，如何实现？" class="headerlink" title="id全局唯一且自增，如何实现？"></a>id全局唯一且自增，如何实现？</h5><p>id type primary key auto_increament</p><h5 id="如何设计算法压缩一段URL？"><a href="#如何设计算法压缩一段URL？" class="headerlink" title="如何设计算法压缩一段URL？"></a>如何设计算法压缩一段URL？</h5><p>常用的url压缩算法是短地址映射法。具体步骤是： </p><p>  ① 将长网址用md5算法生成32位签名串，分为4段,，每段8个字符；<br> ② 对这4段循环处理，取每段的8个字符, 将他看成16进制字符串与0x3fffffff(30位1)的位与操作，超过30位的忽略处理；<br> ③ 将每段得到的这30位又分成6段，每5位的数字作为字母表的索引取得特定字符，依次进行获得6位字符串；<br> ④ 这样一个md5字符串可以获得4个6位串，取里面的任意一个就可作为这个长url的短url地址。</p><h5 id="为什么要设计后缀表达式，有什么好处？"><a href="#为什么要设计后缀表达式，有什么好处？" class="headerlink" title="为什么要设计后缀表达式，有什么好处？"></a>为什么要设计后缀表达式，有什么好处？</h5><p><a href="https://blog.csdn.net/xiazdong/article/details/7272693" target="_blank" rel="noopener">https://blog.csdn.net/xiazdong/article/details/7272693</a></p><p>后缀表达式的特点就是计算机运算非常方便，需要用到栈；计算机处理过程只需要顺序读入，如果遇到数字，则放入栈中，如果是运算符，则将两个栈中数字取出进行运算；</p><h5 id="LRU算法的实现原理？"><a href="#LRU算法的实现原理？" class="headerlink" title="LRU算法的实现原理？"></a>LRU算法的实现原理？</h5><p><a href="https://blog.csdn.net/elricboa/article/details/78847305" target="_blank" rel="noopener">https://blog.csdn.net/elricboa/article/details/78847305</a></p><p>LRU算法的设计原则是：如果一个数据在最近一段时间没有被访问到，那么在将来它被访问的可能性也很小。也就是说，当限定的空间已存满数据时，应当把最久没有被访问到的数据淘汰。</p><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><h3 id="1、结构型模式"><a href="#1、结构型模式" class="headerlink" title="1、结构型模式"></a>1、结构型模式</h3><h5 id="java中有哪些代理模式？"><a href="#java中有哪些代理模式？" class="headerlink" title="java中有哪些代理模式？"></a>java中有哪些代理模式？</h5><p><a href="https://blog.csdn.net/gdutxiaoxu/article/details/81394050" target="_blank" rel="noopener">https://blog.csdn.net/gdutxiaoxu/article/details/81394050</a></p><h5 id="如何实现动态代理"><a href="#如何实现动态代理" class="headerlink" title="如何实现动态代理"></a>如何实现动态代理</h5><p><a href="https://blog.csdn.net/HEYUTAO007/article/details/49738887" target="_blank" rel="noopener">https://blog.csdn.net/HEYUTAO007/article/details/49738887</a></p><p>jdk动态代理是由java内部的反射机制来实现的，cglib动态代理底层则是借助asm来实现的。</p><h5 id="IO流熟悉吗，用的什么设计模式？"><a href="#IO流熟悉吗，用的什么设计模式？" class="headerlink" title="IO流熟悉吗，用的什么设计模式？"></a>IO流熟悉吗，用的什么设计模式？</h5><p><a href="https://blog.csdn.net/yjw123456/article/details/80094801" target="_blank" rel="noopener">https://blog.csdn.net/yjw123456/article/details/80094801</a></p><p>即装饰模式和适配器模式。</p><h3 id="2、创建型模式"><a href="#2、创建型模式" class="headerlink" title="2、创建型模式"></a>2、创建型模式</h3><h5 id="介绍一下单例模式？懒汉式的单例模式如何实现单例？"><a href="#介绍一下单例模式？懒汉式的单例模式如何实现单例？" class="headerlink" title="介绍一下单例模式？懒汉式的单例模式如何实现单例？"></a>介绍一下单例模式？懒汉式的单例模式如何实现单例？</h5><p><a href="https://blog.csdn.net/mbh12333/article/details/82258455" target="_blank" rel="noopener">https://blog.csdn.net/mbh12333/article/details/82258455</a></p><h3 id="3、行为型模式"><a href="#3、行为型模式" class="headerlink" title="3、行为型模式"></a>3、行为型模式</h3><h5 id="介绍一下策略模式？"><a href="#介绍一下策略模式？" class="headerlink" title="介绍一下策略模式？"></a>介绍一下策略模式？</h5><p><a href="https://blog.csdn.net/qq_22314145/article/details/82664481" target="_blank" rel="noopener">https://blog.csdn.net/qq_22314145/article/details/82664481</a></p><p>策略模式定义了算法族，分别封装起来，让他们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。</p><p>一般情况下我们是将一种行为写成一个类方法，比如计算器类中有加、减、乘、除四种方法，而策略模式则是将每一种算法都写成一个类，然后动态的选择使用哪一个算法</p><h5 id="设计模式了解哪些，手写一下观察者模式？"><a href="#设计模式了解哪些，手写一下观察者模式？" class="headerlink" title="设计模式了解哪些，手写一下观察者模式？"></a>设计模式了解哪些，手写一下观察者模式？</h5><p><a href="https://blog.csdn.net/liuguangxu1988/article/details/82055853" target="_blank" rel="noopener">https://blog.csdn.net/liuguangxu1988/article/details/82055853</a></p><h3 id="4、模式汇总"><a href="#4、模式汇总" class="headerlink" title="4、模式汇总"></a>4、模式汇总</h3><h5 id="说说你所熟悉或听说过的j2ee中的几种常用模式-及对设计模式的一些看法"><a href="#说说你所熟悉或听说过的j2ee中的几种常用模式-及对设计模式的一些看法" class="headerlink" title="说说你所熟悉或听说过的j2ee中的几种常用模式?及对设计模式的一些看法"></a>说说你所熟悉或听说过的j2ee中的几种常用模式?及对设计模式的一些看法</h5><h5 id="j2ee常用的设计模式？说明工厂模式。"><a href="#j2ee常用的设计模式？说明工厂模式。" class="headerlink" title="j2ee常用的设计模式？说明工厂模式。"></a>j2ee常用的设计模式？说明工厂模式。</h5><p>  Java中的23种设计模式： </p><p>　　Factory（工厂模式），　　　Builder（建造模式），       Factory Method（工厂方法模式），<br>　　Prototype（原始模型模式），Singleton（单例模式），     Facade（门面模式），<br>　　Adapter（适配器模式），    Bridge（桥梁模式），        Composite（合成模式），<br>　　Decorator（装饰模式），    Flyweight（享元模式），     Proxy（代理模式），<br>　　Command（命令模式），      Interpreter（解释器模式）， Visitor（访问者模式），<br>　　Iterator（迭代子模式），   Mediator（调停者模式），    Memento（备忘录模式），<br>　　Observer（观察者模式），   State（状态模式），         Strategy（策略模式），<br>　　Template Method（模板方法模式）， Chain Of Responsibleity（责任链模式） </p><p>　　工厂模式：工厂模式是一种经常被使用到的模式，根据工厂模式实现的类可以根据提供的数据生成一组类中某一个类的实例，通常这一组类有一个公共的抽象父类并且实现了相同的方法，但是这些方法针对不同的数据进行了不同的操作。首先需要定义一个基类，该类的子类通过不同的方法实现了基类中的方法。然后需要定义一个工厂类，工厂类可以根据条件生成不同的子类实例。当得到子类的实例后，开发人员可以调用基类中的方法而不必考虑到底返回的是哪一个子类的实例。  </p><h5 id="开发中都用到了那些设计模式-用在什么场合"><a href="#开发中都用到了那些设计模式-用在什么场合" class="headerlink" title="开发中都用到了那些设计模式?用在什么场合?"></a>开发中都用到了那些设计模式?用在什么场合?</h5><p>每个模式都描述了一个在我们的环境中不断出现的问题，然后描述了该问题的解决方案的核心。通过这种方式，你可以无数次地使用那些已有的解决方案，无需在重复相同的工作。主要用到了MVC的设计模式。用来开发JSP/Servlet或者J2EE的相关应用。简单工厂模式等。 </p><p>singleton:单例,用来减少垃圾对象和缓存用<br>factory:工厂模式,用来解耦（呵呵，其实模式都是用来解耦的）<br>facade和decorator:封装接口<br>command:命令模式，传递<br>Iterator:用来遍历对象<br>Observer:用来监听状态变化（现在习惯用listener机制替代）<br>templete:模板模式，用来处理相同的操作步骤<br>strategy:策略模式，策略选择<br>proxy:用来附加功能，属性或隐蔽。</p><p>bridge也很实用，用来解耦工厂与产品搭配之类的选择</p><h2 id="场景题"><a href="#场景题" class="headerlink" title="场景题"></a>场景题</h2><h5 id="如果一个外卖配送单子要发布，现在有200个骑手都想要接这一单，如何保证只有一个骑手接到单子？"><a href="#如果一个外卖配送单子要发布，现在有200个骑手都想要接这一单，如何保证只有一个骑手接到单子？" class="headerlink" title="如果一个外卖配送单子要发布，现在有200个骑手都想要接这一单，如何保证只有一个骑手接到单子？"></a>如果一个外卖配送单子要发布，现在有200个骑手都想要接这一单，如何保证只有一个骑手接到单子？</h5><h5 id="美团首页每天会从10000个商家里面推荐50个商家置顶，每个商家有一个权值，你如何来推荐？第二天怎么更新推荐的商家？可以借鉴下stackoverflow，视频网站等等的推荐算法。"><a href="#美团首页每天会从10000个商家里面推荐50个商家置顶，每个商家有一个权值，你如何来推荐？第二天怎么更新推荐的商家？可以借鉴下stackoverflow，视频网站等等的推荐算法。" class="headerlink" title="美团首页每天会从10000个商家里面推荐50个商家置顶，每个商家有一个权值，你如何来推荐？第二天怎么更新推荐的商家？可以借鉴下stackoverflow，视频网站等等的推荐算法。"></a>美团首页每天会从10000个商家里面推荐50个商家置顶，每个商家有一个权值，你如何来推荐？第二天怎么更新推荐的商家？可以借鉴下stackoverflow，视频网站等等的推荐算法。</h5><h5 id="微信抢红包问题-悲观锁，乐观锁，存储过程放在mysql数据库中。"><a href="#微信抢红包问题-悲观锁，乐观锁，存储过程放在mysql数据库中。" class="headerlink" title="微信抢红包问题 悲观锁，乐观锁，存储过程放在mysql数据库中。"></a>微信抢红包问题 悲观锁，乐观锁，存储过程放在mysql数据库中。</h5><h5 id="1000个任务，分给10个人做，你怎么分配，先在纸上写个最简单的版本，然后优化。"><a href="#1000个任务，分给10个人做，你怎么分配，先在纸上写个最简单的版本，然后优化。" class="headerlink" title="1000个任务，分给10个人做，你怎么分配，先在纸上写个最简单的版本，然后优化。"></a>1000个任务，分给10个人做，你怎么分配，先在纸上写个最简单的版本，然后优化。</h5><p>全局队列，把1000任务放在一个队列里面，然后每个人都是取，完成任务。分为10个队列，每个人分别到自己对应的队列中去取务。</p><h5 id="保证发送消息的有序性，消息处理的有序性。"><a href="#保证发送消息的有序性，消息处理的有序性。" class="headerlink" title="保证发送消息的有序性，消息处理的有序性。"></a>保证发送消息的有序性，消息处理的有序性。</h5><p><a href="https://blog.csdn.net/fengqiangdu/article/details/96139151" target="_blank" rel="noopener">https://blog.csdn.net/fengqiangdu/article/details/96139151</a></p><h5 id="如何把一个文件快速下发到100w个服务器"><a href="#如何把一个文件快速下发到100w个服务器" class="headerlink" title="如何把一个文件快速下发到100w个服务器"></a>如何把一个文件快速下发到100w个服务器</h5><p><a href="http://m.nowcoder.com/discuss/76829?type=0&amp;pos=18" target="_blank" rel="noopener">http://m.nowcoder.com/discuss/76829?type=0&amp;pos=18</a></p><h5 id="给每个组分配不同的IP段，怎么设计一种结构使的快速得知IP是哪个组的"><a href="#给每个组分配不同的IP段，怎么设计一种结构使的快速得知IP是哪个组的" class="headerlink" title="给每个组分配不同的IP段，怎么设计一种结构使的快速得知IP是哪个组的?"></a>给每个组分配不同的IP段，怎么设计一种结构使的快速得知IP是哪个组的?</h5><h5 id="10亿个数，找出最大的10个。"><a href="#10亿个数，找出最大的10个。" class="headerlink" title="10亿个数，找出最大的10个。"></a>10亿个数，找出最大的10个。</h5><p>建议一个大小为10的小根堆。</p><h5 id="有几台机器存储着几亿淘宝搜索日志，你只有一台2g的电脑，怎么选出搜索热度最高的十个搜索关键词？"><a href="#有几台机器存储着几亿淘宝搜索日志，你只有一台2g的电脑，怎么选出搜索热度最高的十个搜索关键词？" class="headerlink" title="有几台机器存储着几亿淘宝搜索日志，你只有一台2g的电脑，怎么选出搜索热度最高的十个搜索关键词？"></a>有几台机器存储着几亿淘宝搜索日志，你只有一台2g的电脑，怎么选出搜索热度最高的十个搜索关键词？</h5><h5 id="分布式集群中如何保证线程安全？"><a href="#分布式集群中如何保证线程安全？" class="headerlink" title="分布式集群中如何保证线程安全？"></a>分布式集群中如何保证线程安全？</h5><p><a href="https://www.jianshu.com/p/8c9e98a6e936" target="_blank" rel="noopener">https://www.jianshu.com/p/8c9e98a6e936</a></p><h5 id="给个淘宝场景，怎么设计一消息队列？"><a href="#给个淘宝场景，怎么设计一消息队列？" class="headerlink" title="给个淘宝场景，怎么设计一消息队列？"></a>给个淘宝场景，怎么设计一消息队列？</h5><p><a href="https://www.sohu.com/a/204619554_730031" target="_blank" rel="noopener">https://www.sohu.com/a/204619554_730031</a></p><h5 id="10万个数，输出从小到大？"><a href="#10万个数，输出从小到大？" class="headerlink" title="10万个数，输出从小到大？"></a>10万个数，输出从小到大？</h5><p>先划分成多个小文件，送进内存排序，然后再采用多路归并排序。</p><h5 id="有十万个单词，找出重复次数最高十个？"><a href="#有十万个单词，找出重复次数最高十个？" class="headerlink" title="有十万个单词，找出重复次数最高十个？"></a>有十万个单词，找出重复次数最高十个？</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">import java.util.*;</span><br><span class="line">import java.util.Map.Entry;</span><br><span class="line">import java.io.*;</span><br><span class="line">import junit.framework.TestCase;</span><br><span class="line"> </span><br><span class="line">public class search &#123; </span><br><span class="line">public static void main(String[] args) throws FileNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(&quot;Press any letter to start word count:&quot;);  </span><br><span class="line">        Scanner s = new Scanner(System.in);  </span><br><span class="line">        if (s.nextLine() == null) </span><br><span class="line">        &#123;  </span><br><span class="line">            s.close();  </span><br><span class="line">            System.exit(0);  </span><br><span class="line">        &#125; else </span><br><span class="line">        &#123;  </span><br><span class="line">            s.close();  </span><br><span class="line">        &#125; </span><br><span class="line">Map&lt;String,Integer&gt; map=new TreeMap&lt;String,Integer&gt;();</span><br><span class="line">File file=new File(&quot;test.txt&quot;);//将文本文件与代码放入同一目录下，所以只写了相对路径</span><br><span class="line">Reader reader=null;</span><br><span class="line">StringBuilder exist=new StringBuilder();</span><br><span class="line">try</span><br><span class="line">&#123;</span><br><span class="line">reader=new InputStreamReader(new FileInputStream(file));</span><br><span class="line">int tmpchar;</span><br><span class="line">while((tmpchar=reader.read())!=-1)</span><br><span class="line">&#123;</span><br><span class="line">if(isCharacter(tmpchar))</span><br><span class="line">&#123;</span><br><span class="line">exist.append((char)tmpchar);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">Addword(exist.toString(),map);</span><br><span class="line">exist=new StringBuilder();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;catch(IOException e)</span><br><span class="line">&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">List&lt;Map.Entry&lt;String,Integer&gt;&gt; list = new ArrayList&lt;Map.Entry&lt;String,Integer&gt;&gt;(map.entrySet());</span><br><span class="line">        Collections.sort(list,new Comparator&lt;Map.Entry&lt;String,Integer&gt;&gt;() </span><br><span class="line">        &#123;</span><br><span class="line">            public int compare(Entry&lt;String,Integer&gt; o1,Entry&lt;String,Integer&gt; o2) </span><br><span class="line">            &#123;</span><br><span class="line">                return (o2.getValue().compareTo(o1.getValue()));//降序排序</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        int i=10;</span><br><span class="line">        Set&lt;String&gt; keySet = map.keySet();</span><br><span class="line">        Iterator&lt;String&gt; iter = keySet.iterator();</span><br><span class="line">        while (iter.hasNext()&amp;&amp;i&gt;0) </span><br><span class="line">        &#123;</span><br><span class="line">            String key=iter.next();</span><br><span class="line">            System.out.println((String)key+&quot;:&quot;+map.get(key));</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">public static void Addword(String str,Map&lt;String,Integer&gt; map)//是字母就append组成单词</span><br><span class="line">&#123;</span><br><span class="line">str=str.toLowerCase();</span><br><span class="line">Integer count=map.get(str);</span><br><span class="line">if(count==null)</span><br><span class="line">&#123;</span><br><span class="line">map.put(str,1);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">map.put(str,count+1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">public static boolean isCharacter(int tmpchar)//判断是否是字母</span><br><span class="line">&#123;</span><br><span class="line">if(tmpchar&gt;=65&amp;&amp;tmpchar&lt;=90)</span><br><span class="line">&#123;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">else if(tmpchar&gt;=97&amp;&amp;tmpchar&lt;=122)</span><br><span class="line">&#123;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">运行结果（所选文本是一篇以a开头的词汇，所以结果都是a开头的）：</span><br><span class="line">a:37</span><br><span class="line">abbr:10</span><br><span class="line">abbreviation:5</span><br><span class="line">ability:4</span><br><span class="line">able:4</span><br><span class="line">abroad:3</span><br><span class="line">absence:3</span><br><span class="line">absent:2</span><br><span class="line">absenteeism:2 </span><br><span class="line">abolish:1</span><br></pre></td></tr></table></figure><h5 id="25匹马，5个跑道，最少赛马多少次可以找出跑的最快的前三匹马"><a href="#25匹马，5个跑道，最少赛马多少次可以找出跑的最快的前三匹马" class="headerlink" title="25匹马，5个跑道，最少赛马多少次可以找出跑的最快的前三匹马"></a>25匹马，5个跑道，最少赛马多少次可以找出跑的最快的前三匹马</h5><p><a href="https://blog.csdn.net/wtwzd002/article/details/70154526" target="_blank" rel="noopener">https://blog.csdn.net/wtwzd002/article/details/70154526</a></p><p>待补充。。。 </p><h5 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h5><p><a href="https://blog.csdn.net/u014543872/article/details/90312139" target="_blank" rel="noopener">https://blog.csdn.net/u014543872/article/details/90312139</a></p><p><a href="https://cloud.tencent.com/developer/article/1362755" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1362755</a></p><p><a href="https://blog.csdn.net/qq_39382769/article/details/88792554" target="_blank" rel="noopener">https://blog.csdn.net/qq_39382769/article/details/88792554</a></p><p><a href="https://blog.csdn.net/qq_41701956/article/details/84378302" target="_blank" rel="noopener">https://blog.csdn.net/qq_41701956/article/details/84378302</a></p><p><a href="https://www.cnblogs.com/yewsky/articles/1864934.html" target="_blank" rel="noopener">https://www.cnblogs.com/yewsky/articles/1864934.html</a></p><p><a href="https://blog.csdn.net/qq_38977097/article/details/88826939" target="_blank" rel="noopener">https://blog.csdn.net/qq_38977097/article/details/88826939</a></p><p><a href="https://blog.csdn.net/Norte_L/article/details/80250057" target="_blank" rel="noopener">https://blog.csdn.net/Norte_L/article/details/80250057</a></p><p><a href="https://www.cnblogs.com/zhaideyou/p/5929977.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhaideyou/p/5929977.html</a></p><p><a href="https://www.cnblogs.com/zk753159/p/4966571.html" target="_blank" rel="noopener">https://www.cnblogs.com/zk753159/p/4966571.html</a></p><p><a href="https://blog.csdn.net/qq_42322624/article/details/80470170" target="_blank" rel="noopener">https://blog.csdn.net/qq_42322624/article/details/80470170</a></p><p><a href="https://yq.aliyun.com/articles/635007" target="_blank" rel="noopener">https://yq.aliyun.com/articles/635007</a></p><p><a href="https://blog.csdn.net/natian306/article/details/18504111" target="_blank" rel="noopener">https://blog.csdn.net/natian306/article/details/18504111</a></p><p><a href="https://blog.csdn.net/longfulong/article/details/78700239" target="_blank" rel="noopener">https://blog.csdn.net/longfulong/article/details/78700239</a></p><p><a href="https://blog.csdn.net/s10461/article/details/53941091" target="_blank" rel="noopener">https://blog.csdn.net/s10461/article/details/53941091</a></p><p><a href="https://blog.csdn.net/snail_xinl/article/details/53427572" target="_blank" rel="noopener">https://blog.csdn.net/snail_xinl/article/details/53427572</a></p><p><a href="https://yq.aliyun.com/articles/635005" target="_blank" rel="noopener">https://yq.aliyun.com/articles/635005</a></p><p><a href="https://blog.csdn.net/qq_34602647/article/details/80560741" target="_blank" rel="noopener">https://blog.csdn.net/qq_34602647/article/details/80560741</a></p><p><a href="https://blog.csdn.net/lsqingfeng/article/details/80342620" target="_blank" rel="noopener">https://blog.csdn.net/lsqingfeng/article/details/80342620</a></p><p><a href="https://www.cnblogs.com/heartstage/p/3365688.html" target="_blank" rel="noopener">https://www.cnblogs.com/heartstage/p/3365688.html</a></p><p><a href="https://blog.csdn.net/Onty_dr/article/details/84889097" target="_blank" rel="noopener">https://blog.csdn.net/Onty_dr/article/details/84889097</a></p><p><a href="https://blog.csdn.net/qq_37113604/article/details/81353626" target="_blank" rel="noopener">https://blog.csdn.net/qq_37113604/article/details/81353626</a></p><p><a href="https://blog.csdn.net/cyywxy/article/details/81151104" target="_blank" rel="noopener">https://blog.csdn.net/cyywxy/article/details/81151104</a></p><p><a href="https://blog.csdn.net/cyywxy/article/details/81151104" target="_blank" rel="noopener">https://blog.csdn.net/cyywxy/article/details/81151104</a></p><p><a href="https://www.cnblogs.com/tjudzj/p/4459443.html" target="_blank" rel="noopener">https://www.cnblogs.com/tjudzj/p/4459443.html</a></p><p><a href="https://www.cnblogs.com/jiangyi-uestc/p/5682699.html" target="_blank" rel="noopener">https://www.cnblogs.com/jiangyi-uestc/p/5682699.html</a></p><p><a href="https://www.cnblogs.com/cielosun/p/6684775.html" target="_blank" rel="noopener">https://www.cnblogs.com/cielosun/p/6684775.html</a></p><p><a href="https://www.cnblogs.com/dadonggg/p/7799344.html" target="_blank" rel="noopener">https://www.cnblogs.com/dadonggg/p/7799344.html</a></p><p><a href="https://blog.csdn.net/qq_42090683/article/details/83505979" target="_blank" rel="noopener">https://blog.csdn.net/qq_42090683/article/details/83505979</a></p><p><a href="https://www.nowcoder.com/questionTerminal/6bd3857199564b3fb2d3fee4f4de06ea?pos=134&amp;mutiTagIds=570&amp;orderByHotValue=0&amp;done=0" target="_blank" rel="noopener">https://www.nowcoder.com/questionTerminal/6bd3857199564b3fb2d3fee4f4de06ea?pos=134&amp;mutiTagIds=570&amp;orderByHotValue=0&amp;done=0</a></p><p><a href="https://blog.csdn.net/gaoyong_stone/article/details/79540242" target="_blank" rel="noopener">https://blog.csdn.net/gaoyong_stone/article/details/79540242</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;JavaSE部分&quot;&gt;&lt;a href=&quot;#JavaSE部分&quot; class=&quot;headerlink&quot; title=&quot;JavaSE部分&quot;&gt;&lt;/a&gt;JavaSE部分&lt;/h2&gt;&lt;h3 id=&quot;1、Java基础&quot;&gt;&lt;a href=&quot;#1、Java基础&quot; class=&quot;head
      
    
    </summary>
    
      <category term="Java" scheme="http://ylovex.cn/categories/Java/"/>
    
    
      <category term="Java" scheme="http://ylovex.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>操作系统基础</title>
    <link href="http://ylovex.cn/2019/07/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80/"/>
    <id>http://ylovex.cn/2019/07/21/操作系统基础/</id>
    <published>2019-07-21T00:03:18.000Z</published>
    <updated>2019-07-28T04:25:51.673Z</updated>
    
    <content type="html"><![CDATA[<h2 id="操作系统基础"><a href="#操作系统基础" class="headerlink" title="操作系统基础"></a>操作系统基础</h2><p>操作系统是计算机系统中的一个系统软件，是一些程序模块的集合</p><ol><li>对于使用者：提供了一个计算机用户与计算机硬件系统之间的接口，使计算机系统更易于使用</li><li>对于资源管理者：有效地控制和管理计算机系统中的各种硬件和软件资源，使之得到更加有效的利用</li><li>合理地组织计算机系统的工作流程，以改善系统性能（响应时间、系统吞吐量等）</li></ol><h5 id="计算机系统组成"><a href="#计算机系统组成" class="headerlink" title="计算机系统组成"></a>计算机系统组成</h5><ol><li>硬件（CPU、内存、IO设备）提供基本的运算资源</li><li>系统软件：操作系统、编译系统</li><li>应用程序（字处理、电子表格、浏览器）</li><li>用户（操作员、其他计算机）使用计算机解决问题</li></ol><h5 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h5><p>处理机管理</p><ol><li>进程（线程）控制</li><li>进程（线程）同步</li><li>进程通信</li><li>进程（线程）调度</li></ol><p>存储器管理</p><ol><li>任务<ol><li>为多道程序的并发提供良好的环境 </li><li>便于用户使用存储器 </li><li>提高存储器利用率 </li><li>为尽量多的用户提供足够大的存储空间 </li></ol></li><li>功能<ol><li>内存分配：静态和动态分配</li><li>内存保护</li><li>地址影射</li><li>内存扩充</li></ol></li></ol><p>设备管理</p><ol><li>任务<ol><li>为用户程序分配I/O设备 </li><li>完成用户程序请求的I/O操作 </li><li>提高CPU和I/O设备的利用率：中断；通道</li><li>改善人机界面 </li></ol></li><li>功能<ol><li>缓冲管理</li><li>设备分配</li><li>设备处理</li><li>虚拟设备功能</li></ol></li></ol><p>文件管理</p><ol><li>文件存储空间的管理</li><li>目录管理</li><li>文件读、写管理</li><li>文件保护</li><li>向用户提供接口</li></ol><p>作业控制</p><ol><li>作业调度</li><li>作业控制<ol><li>批量型作业</li><li>终端型作业</li></ol></li></ol><h3 id="存储器管理"><a href="#存储器管理" class="headerlink" title="存储器管理"></a>存储器管理</h3><h5 id="地址空间和存储空间"><a href="#地址空间和存储空间" class="headerlink" title="地址空间和存储空间"></a>地址空间和存储空间</h5><p>地址空间：源程序经过编译后得到的目标程序，存在于它所限定的地址范围内，这个范围称为地址空间。简言之，地址空间是逻辑地址的集合</p><p>存储空间：是指主存中一系列存储信息的物理单元的集合，这些单元的编号称为物理地址或绝对地址。简言之，存储空间是物理地址的集合</p><h5 id="存储分配的三种方式"><a href="#存储分配的三种方式" class="headerlink" title="存储分配的三种方式"></a>存储分配的三种方式</h5><p>直接指定方式：程序员在编写程序时候，或者编译程序（汇编程序）对源程序进行编译（汇编）时，所用的是实际地址</p><p>静态分配：程序员编程时，或由编译程序产生的目的程序，均可从其地址空间的零地址开始；当装配程序对其进行连接装入时才确定它们在主存中的地址</p><p>动态分配：作业在存储空间中的位置，在其装入时候确定，在其执行过程中可根据需要申请附加存储空间，而且一个作业已占用的部分区域不再需要时候，可以要求归还系统</p><h5 id="单一连续区存储管理"><a href="#单一连续区存储管理" class="headerlink" title="单一连续区存储管理"></a>单一连续区存储管理</h5><p>内存分为两个区域：系统区、用户区。应用程序装入到用户区，可使用用户区全部空间</p><p>最简单，适用于单用户、单任务的OS。CP/M和DOS</p><p>优点是易于管理；缺点是对要求内存空间少的程序，造成内存浪费，程序全部装入，很少使用的程序部分也占用内存</p><h5 id="分区式分配"><a href="#分区式分配" class="headerlink" title="分区式分配"></a>分区式分配</h5><p>把内存分为一些大小相等或不等的分区，每个应用程序占用一个或几个分区。操作系统占用其中一个分区</p><p>适用于多道程序系统和分时系统，支持多个程序并发执行，但难以进行内存分区的共享</p><p>固定式分区：当系统初始化 式，把存储空间划分成若干个任意大小的区域 ；然后，把这些区域分配给每个用户作业。</p><ol><li>把内存划分为若干个固定大小的连续分区。 分区大小相等：只适合于多个相同程序的并发执行 （处理多个类型相同的对象）。分区大小不等：多个小分区、适量的中等分区、少 量的大分区。根据程序的大小，分配当前空闲的、 适当大小的分区。 </li><li>优点：易于实现，开销小</li><li>缺点：内碎片造成浪费，分区总数固定，限制了并发执行程序数目</li><li>采用的数据结构：分区表–记录分区的大小和使用情况</li></ol><p>可变式分区：分区的边界可以移动，即分区的大小可变</p><ol><li>优点：没有内碎片</li><li>缺点：有外碎片</li></ol><h5 id="可变式分区的分配策略"><a href="#可变式分区的分配策略" class="headerlink" title="可变式分区的分配策略"></a>可变式分区的分配策略</h5><ol><li>最佳适应算法（Best Fit）：为一个作业选择分区时 ，总是寻找其大小最接近于作业所要求的存储区域。 </li><li>最坏适应算法（Worst Fit）：为作业选择存储区域时 ，总是寻找最大的空白区</li><li>首次适应算法（First Fit）：每个空白区按其在存储 空间中地址递增的顺序连在一起，在为作业分配存储 区域时，从这个空白区域链的始端开始查找，选择第 一个足以满足请求的空白块。 </li><li>下次适应算法（Next Fit）：把存储空间中空白区构 成一个循环链，每次为存储请求查找合适的分区时， 总是从上次查找结束的地方开始，只要找到一个足够 大的空白区，就将它划分后分配出去。</li></ol><h5 id="可重定位分区分配"><a href="#可重定位分区分配" class="headerlink" title="可重定位分区分配"></a>可重定位分区分配</h5><p>定时的或在内存紧张时， 移动某些已分配区中的信息，把存储空间中所 有的空白区合并为一个大的连续区。</p><h5 id="多重分区分配"><a href="#多重分区分配" class="headerlink" title="多重分区分配"></a>多重分区分配</h5><p>一个作业往往由相对独立的程序 段和数据段组成，将这些片断分别装入到存储空 间中不同的区域内的分配方式</p><h5 id="覆盖管理"><a href="#覆盖管理" class="headerlink" title="覆盖管理"></a>覆盖管理</h5><p>就是把一个大的程序划 分成一系列的覆盖，每个覆盖是一个相对独立 的程序单位。把程序执行时并不要求同时装入 主存的覆盖组成一组，称其为覆盖段，这个覆 盖段被分配到同一个存储区域。这个存储区域 称之为覆盖区，它与覆盖段一一对应。 </p><p>缺点：编程时必须划分程序模块和确定程序模 块之间的覆盖关系，增加编程复杂度。从外存 装入覆盖文件，以时间延长来换取空间节省。</p><h5 id="交换"><a href="#交换" class="headerlink" title="交换"></a>交换</h5><p>广义的说，所谓交换就是把暂时不用的 某个（或某些）程序及其数据的部分或全部从 主存移到辅存中去，以便腾出必要的存储空间 ；接着把指定程序或数据从辅存读到相应的主 存中，并将控制转给它，让其在系统上运行</p><p>优点：增加并发运行的程序数目，并且给用户 提供适当的响应时间；编写程序时不影响程序 结构 </p><p>缺点：对换入和换出的控制增加处理机开销； 程序整个地址空间都进行传送，没有考虑执行 过程中地址访问的统计特性。</p><h4 id="分页式存储管理"><a href="#分页式存储管理" class="headerlink" title="分页式存储管理"></a>分页式存储管理</h4><p>页：在分页存储管理系统中，把每个作业的地址 空间分成一些大小相等的片，称之为页面或页。 </p><p>存储块：在分页存储管理系统中，把主存的存储 空间也分成与页面相同大小的片，这些片称为存 储块，或称为页框</p><h5 id="纯分页系统"><a href="#纯分页系统" class="headerlink" title="纯分页系统"></a>纯分页系统</h5><p>在调度一个作业时，必须把它的所有页一次装到主 存的页框内；如果当时页框数不足，则该作业必须 等待，系统再调度另外作业</p><p>优点： 没有外碎片，每个内碎片不超过页大小。 一个程序不必连续存放。便于改变程序占用空间的大小（ 主要指随着程序运行而动态生成的数据增多，要求地址空间相应增长，通常由系统调用完成而不是操作系统自动完成）。 </p><p>缺点：程序全部装入内存</p><h5 id="页表数据结构"><a href="#页表数据结构" class="headerlink" title="页表数据结构"></a>页表数据结构</h5><p>进程页表：每个进程有一个页表，描述该进程占用的物理页面及逻辑排列顺序</p><p>物理页面表：整个系统有一个物理页面表，描 述物理内存空间的分配使用状况。 </p><p>请求表：整个系统有一个请求表，描述系统内 各个进程页表的位置和大小，用于地址转换， 也可以结合到各进程的PCB里；</p><h4 id="分段式存储管理"><a href="#分段式存储管理" class="headerlink" title="分段式存储管理"></a>分段式存储管理</h4><p>分段地址空间：一个段可定义为一组逻辑信息，每个作业的地 址空间是由一些分段构成的，每段都有自己的 名字，且都是一段连续的地址空间</p><p>地址结构：段号S + 位移量W</p><p>缺点：</p><ol><li>处理机要为地址变换花费时间；要为表格提供附加 的存储空间。 </li><li>为满足分段的动态增长和减少外零头，要采用拼接 手段。</li><li>在辅存中管理不定长度的分段困难较多 。</li><li>分段的最大尺寸受到主存可用空间的限制。</li></ol><h5 id="分页和分段的比较"><a href="#分页和分段的比较" class="headerlink" title="分页和分段的比较"></a>分页和分段的比较</h5><ol><li>分页的作业的地址空间是单一的线性地址空间 ，分段作业的地址空间是二维的。</li><li>“页”是信息的“物理”单位，大小固定。“ 段”是信息的逻辑单位，即它是一组有意义的信息，其长度不定。 </li><li>分页活动用户是看不见的，而是系统对于主存 的管理。分段是用户可见的（分段可以在用户 编程时确定，也可以在编译程序对源程序编译 时根据信息的性质来划分）。</li></ol><h5 id="段页式存储管理"><a href="#段页式存储管理" class="headerlink" title="段页式存储管理"></a>段页式存储管理</h5><p>用分段方法来分配和管理虚拟存储器 ，而用分页方法来分配和管理实存储器</p><p>一个程序首先被分成若干程序段，每一段赋予不 同的分段标识符，然后，对每一分段又分成若干个固定大小的页面</p><h4 id="虚拟存储器"><a href="#虚拟存储器" class="headerlink" title="虚拟存储器"></a>虚拟存储器</h4><h5 id="局部性原理"><a href="#局部性原理" class="headerlink" title="局部性原理"></a>局部性原理</h5><p>指程序在执行过程中的一个较短时期，所执行的指令 地址和指令的操作数地址，分别局限于一定区域。还 可以表现为：</p><ol><li>时间局部性，即一条指令的一次执行和下次执行，一 个数据的一次访问和下次访问都集中在一个较短时期内</li><li>空间局部性，即当前指令和邻近的几条指令，当前访 问的数据和邻近的数据都集中在一个较小区域内</li></ol><h5 id="虚拟存储技术"><a href="#虚拟存储技术" class="headerlink" title="虚拟存储技术"></a>虚拟存储技术</h5><p>在程序装入时，不必将其全部读入到内存，而 只需将当前需要执行的部分页或段读入到内存 ，就可让程序开始执行。 </p><p>在程序执行过程中，如果需执行的指令或访问的数据尚未在内存（称为缺页或缺段），则由处理器通知操作系统将相应的页或段调入到内存，然后继续执行程序。 </p><p>另一方面，操作系统将内存中暂时不使用的页 或段调出保存在外存上，从而腾出空间存放将 要装入的程序以及将要调入的页或段――具有 请求调入和置换功能，只需程序的一部分在内 存就可执行，对于动态链接库也可以请求调入</p><p>优点：</p><ol><li>可在较小的可用内存中执行较大的用户程序； </li><li>可在内存中容纳更多程序并发执行</li><li>不必影响编程时的程序结构（与覆盖技术比较） </li><li>提供给用户可用的虚拟内存空间通常大于物理内存(real memory)</li></ol><p>特征：</p><ol><li>离散性：物理内存分配的不连续，虚拟地址空 间使用的不连续（数据段和栈段之间的空闲空 间，共享段和动态链接库占用的空间） </li><li>多次性</li><li>对换性：与交换的比较：调入和调出是对部分 虚拟地址空间进行 </li><li>虚拟性：通过物理内存和快速外存相结合，提 供大范围的虚拟地址空间 。范围大，但占用容量不超过物理内存和外存交换区 容量之和 。占用容量包括：进程地址空间中的各个段，操作系 统代码</li></ol><h5 id="请求式分页系统"><a href="#请求式分页系统" class="headerlink" title="请求式分页系统"></a>请求式分页系统</h5><p>在运行作业之前，只要求把当前需要的一部分 页面装入主存。当需要其它的页时，可自动的 选择一些页交换倒辅存去，同时把所需的页调 入主存。 </p><p>虚拟存储系统：控制自动页面交换而用户作业 意识不到的那个机构，成为虚拟存储系统</p><h5 id="页面调入策略"><a href="#页面调入策略" class="headerlink" title="页面调入策略"></a>页面调入策略</h5><p>请求式提取：仅当需要时才提取页面的策略</p><p>预先调页：事先提取页面的策略。</p><h4 id="页面置换策略"><a href="#页面置换策略" class="headerlink" title="页面置换策略"></a>页面置换策略</h4><h5 id="先进先出算法"><a href="#先进先出算法" class="headerlink" title="先进先出算法"></a>先进先出算法</h5><p>选择建立最早的页面被置换。可以通过链表来表示各页 的建立时间先后。性能较差。较早调入的页往往是经常 被访问的页，这些页在FIFO算法下被反复调入和调出。 并且有Belady现象。</p><h5 id="最近最久不用的页面置换算法"><a href="#最近最久不用的页面置换算法" class="headerlink" title="最近最久不用的页面置换算法"></a>最近最久不用的页面置换算法</h5><p>选择内存中最久未使用的页面被置换。这是局部性 原理的合理近似，性能接近最佳算法。但由于需要 记录页面使用时间的先后关系，硬件开销太大。硬 件机构如：</p><ol><li>一个特殊的栈：把被访问的页面移到栈顶，于是栈底的是 最久未使用页面。 </li><li>每个页面设立移位寄存器：被访问时左边最高位置1，定 期右移并且最高位补0，于是寄存器数值最小的是最久未 使用页面。</li></ol><h5 id="Clock算法"><a href="#Clock算法" class="headerlink" title="Clock算法"></a>Clock算法</h5><p>也称最近未使用算法(NRU, Not Recently Used)，它是LRU 和FIFO的折衷</p><ol><li>每页有一个使用标志位(use bit)，若该页被访问则置user bit=1。 </li><li>置换时采用一个指针，从当前指针位置开始按地址先后检 查各页，寻找use bit=0的页面作为被置换页。</li><li>指针经过的user bit=1的页都修改user bit=0，最后指针停留 在被置换页的下一个页。</li></ol><h5 id="最不常用算法-LFU-Least-Frequently-Used"><a href="#最不常用算法-LFU-Least-Frequently-Used" class="headerlink" title="最不常用算法(LFU, Least Frequently Used)"></a>最不常用算法(LFU, Least Frequently Used)</h5><p>选择到当前时间为止被访问次数最少的页面被置换； </p><p>每页设置访问计数器，每当页面被访问时，该页面的访 问计数器加1；</p><p>发生缺页中断时，淘汰计数值最小的页面，并将所有计 数清零；</p><h5 id="页面缓冲算法"><a href="#页面缓冲算法" class="headerlink" title="页面缓冲算法"></a>页面缓冲算法</h5><p>它是对FIFO算法的发展，通过被置换页面的缓冲， 有机会找回刚被置换的页面； </p><p>被置换页面的选择和处理：用FIFO算法选择被置换页，把被置换的页面放入两个链表之一。即：如果 页面未被修改，就将其归入到空闲页面链表的末尾 ，否则将其归入到已修改页面链表</p><h3 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h3><p><strong>进程</strong>是程序在一个数据集合上运行的过程，它是系 统进行资源分配和调度的一个独立单位。</p><p>特征：</p><ol><li>动态性</li><li>并发性</li><li>独立性</li><li>异步性</li><li>结构特征：程序段，数据段，进程控制块PCB</li></ol><p>一个进程应该包括：</p><ol><li>程序的代码</li><li>程序的数据</li><li>PC中的值，用来指示下一条将运行的指令</li><li>一组通用的寄存器的当前值，堆、栈</li><li>一组系统资源</li></ol><h5 id="进程与程序的区别"><a href="#进程与程序的区别" class="headerlink" title="进程与程序的区别"></a>进程与程序的区别</h5><ol><li>进程是动态的，程序是静态的：程序是有序代码的集 合；进程是程序的执行。通常进程不可在计算机之间 迁移；而程序通常对应着文件、静态和可以复制。 </li><li>进程是暂时的，程序的永久的：进程是一个状态变化 的过程，程序可长久保存。 </li><li>进程与程序的组成不同：进程的组成包括程序、数据 和进程控制块（即进程状态信息）。 </li><li>进程与程序的对应关系：通过多次执行，一个程序可 对应多个进程；通过调用关系，一个进程可包括多个程序。</li></ol><p><strong>线程</strong>是进程中的一个实体，是一个个CPU调度和分派的单位 ，基本上不拥有资源， 只有必不可少的少量资源 ，可以与其他同进程的 线程共享进程拥有的 所有资源</p><h5 id="进程和线程区别"><a href="#进程和线程区别" class="headerlink" title="进程和线程区别"></a>进程和线程区别</h5><p>区别：</p><ol><li>线程程序任务调度和执行的最小单位。进程是资源分配的最小单位</li><li>进程拥有独立的栈堆空间和数据段，启动一个新的进程必须分配给它独立的地址空间，系统开销大。线程拥有独立的栈空间，但是共享数据段，开销小，切换速度快，效率高。</li><li>进程间相对独立，安全性高。线程间依赖性比较强，一个线程死掉等于整个进程死掉。</li><li>进程间相对独立，通信机制较复杂。线程通信机制由于共享数据段，通信机制方便。</li><li>线程必定只能属于一个进程，而进程可以拥有多个线程而且至少拥有一个线程。</li></ol><p>线程和进程场景选择：</p><ol><li>创建和销毁一个进程代价很大，需要频繁创建销毁优先使用线程。</li><li>线程切换速度快，在需要大量计算、切换频繁时用线程，耗时的操作使用线程可提高应用程序的响应。</li><li>对CPU系统的效率上线程占有，所以可能要发展到多级分布的用进程、多核分布用线程。</li><li>并行操作用线程。</li><li>需要更稳定安全时，选择进程，需要速度时，选线程。 </li></ol><p>对于线程弄清两点是非常重要的：</p><ol><li>线程之间有无先后访问顺序（线程依赖关系）</li><li>多个线程共享访问一个变量（同步互斥问题）</li></ol><p>另外通常我们只会去说同一进程的多个线程共享进程的资源，但是每个线程特有的部分却很少提及，除了标识线程的id，每个线程还有自己的独立栈空间，线程彼此之间是无法访问其他线程栈上内容的。而作为处理机调度的最小单位，线程调度只需要保存线程栈、寄存器数据和PC即可，相比进程切换开销要小很多。    </p><p>进程的优劣：<br>对于在父、子进程间共享状态信息，进程有一个非常清晰的模型：共享文件表，但是不共享用户地址空间。进程有独立的地址空间既是优点也是缺点。优点：一个进程不可能不小心覆盖另一个进程的虚拟内存。缺点：独立的地址空间使得进程共享状态信息变得更加困难。为了共享信息，必须使用显示的IPC（进程间通信）机制。而进程控制和IPC的开销很高。</p><h4 id="进程创建和结束"><a href="#进程创建和结束" class="headerlink" title="进程创建和结束"></a>进程创建和结束</h4><p>进程创建有两种方式，一种是操作系统创建的，一种是父进程创建的。</p><p>从计算机启动到终端执行程序的过程为：0号进程 -&gt; 1号内核进程 -&gt; 1号用户进程(init进程) -&gt; getty进程 -&gt; shell进程 -&gt; 命令行执行进程。所以我们在命令行中通过 ./program执行可执行文件时，所有创建的进程都是shell进程的子进程，这也就是为什么shell一关闭，在shell中执行的进程都自动被关闭的原因。</p><p>相关接口：</p><ol><li>创建进程：pid_t fork(void);<br>返回值：出错返回-1；父进程中返回pdi&gt;0；子进程中pid ==0</li><li>结束进程：void exit(int status)<br>status是退出状态，保存在全局变量，通常0表示正常退出</li><li>获取PID： pid_t getpid(void)<br>返回调用者pid</li><li>获得父进程pid： pid_t getppid(void)<br>返回父进程pid</li></ol><h5 id="如何创建新进程"><a href="#如何创建新进程" class="headerlink" title="如何创建新进程"></a>如何创建新进程</h5><p>在linux中主要提供了fork，vfork，clone三个进程创建方法。</p><p>在linux源码中这是哪个调用的执行过程是执行fork,vfork,clone时，通过一个系统调用表映射到sys_fork(),sys_vfork(),sys_clone()，再在这三个函数中去调用do_fork()去做具体的创建进程工作。</p><p>fork:现在Linux中是采取了copy-on-write(COW写时复制)技术，为了降低开销，fork最初并不会真的产生两个不同的拷贝，因为在那个时候，大量的数据其实完全是一样的。写时复制是在推迟真正的数据拷贝。若后来确实发生了写入，那意味着parent和child的数据不一致了，于是产生复制动作，每个进程拿到属于自己的那一份，这样就可以降低系统调用的开销。</p><p>vfork()：vfork系统调用不同于fork，用vfork创建的子进程与父进程共享地址空间，也就是说子进程完全运行在父进程的地址空间上，如果这时子进程修改了某个变量，这将影响到父进程。 </p><p>但此处有一点要注意的是用vfork()创建的子进程必须显示调用exit()来结束，否则子进程将不能结束，而fork()则不存在这个情况。 </p><p>用 vfork创建子进程后，父进程会被阻塞直到子进程调用exec(exec，将一个新的可执行文件载入到地址空间并执行之。)或exit。vfork的好处是在子进程被创建后往往仅仅是为了调用exec执行另一个程序，因为它就不会对父进程的地址空间有任何引用，所以对地址空间的复制是多余的 ，因此通过vfork共享内存可以减少不必要的开销。</p><p>clone()：系统调用fork()和vfork()是无参数的，而clone()则带有参数。fork()是全部复制，vfork()是共享内存，而clone() 是则可以将父进程资源有选择地复制给子进程，而没有复制的数据结构则通过指针的复制让子进程共享.</p><h5 id="fork-返回值"><a href="#fork-返回值" class="headerlink" title="fork()返回值"></a>fork()返回值</h5><p>fork()之前，只有一个进程在执行这段代码，但是在该条语句后，就变成了两个进程在执行了，这两个进程代码部分完全相同。Fork仅仅被调用一次，但却能够返回两次，它有三种不同的返回值：1.父进程中，fork返回新创建的子进程ID。2.子进程中，fork返回0。3.出现错误，fork返回负值。</p><h5 id="进程的状态"><a href="#进程的状态" class="headerlink" title="进程的状态"></a>进程的状态</h5><p><img src="2019072400001.png" alt="31411"></p><ol><li>就绪状态：进程已获得除处理机外的所需资源，等待分配处理机资源；只要分配CPU就可执行。 </li><li>执行状态：占用处理机资源；处于此状态的进程的 数目小于等于CPU的数目。在没有其他进程可以执 行时（如所有进程都在阻塞状态），通常会自动执 行系统的idle进程（相当于空操作）。 </li><li>阻塞状态：正在执行的进程，由于发生某种事件而 暂时无法执行，便放弃处理机处于暂停状态。</li></ol><p>就绪–&gt;运行：</p><ol><li>时间一到，调度程序选择一个进程运行 </li></ol><p>运行–&gt; 就绪 ：</p><ol><li>运行进程用完了时间片 </li><li>运行进程被中断，因为一高优先级进程处于就绪状态</li></ol><p>运行–&gt; 阻塞 ：</p><ol><li>当一进程所需的东西必须等待时 </li><li>OS尚未完成服务 </li><li>对一资源的访问尚不能进行 </li><li>初始化I/O 且必须等待结果 </li><li>等待某一进程提供输入(IPC) </li></ol><p>阻塞–&gt; 就绪 ：</p><ol><li>当所等待的事件发生时候</li></ol><h5 id="孤儿进程、僵尸进程和守护进程"><a href="#孤儿进程、僵尸进程和守护进程" class="headerlink" title="孤儿进程、僵尸进程和守护进程"></a>孤儿进程、僵尸进程和守护进程</h5><p>父进程在调用fork接口之后和子进程独立开，之后子进程和父进程就以未知的顺序向下执行（异步过程）。所以父进程和子进程都有可能先执行完。当父进程先结束，子进程此时就会变成孤儿进程，不过这种情况问题不大，孤儿进程会自动向上被init进程收养，init进程完成对状态收集工作。而且这种过继的方式也是守护进程能够实现的因素。如果子进程先结束，父进程并未调用wait或者waitpid获取进程状态信息，那么子进程描述符就会一直保存在系统里，这种进程称为僵尸进程。</p><p>相关接口：</p><p>回收进程（1）： pid_t wait(int *status)</p><p>一旦调用wait（），就会立刻阻塞自己，wait（）自动分析某个子进程是否退出，如果找到僵尸进程就会负责收集和销毁，如果没有找到就一直阻塞在这里。</p><p>status：指向子进程结束状态值。</p><p>回收进程（2）： pid_t waitpid(pid_t pid,int *status,int options)</p><p>返回值：返回pid：返回收集的子进程id。返回-1：出错 返回0：没有被收集的子进程</p><ol><li>pid：子进程识别码，控制等待哪些子进程。<ol><li>pid &lt; -1,等待进程组识别码为pid绝对值的任何进程</li><li>Pid = -1，等待任何子进程</li><li>Pid = 0，等待进程组识别码与目前进程相同的任何子进程</li><li>Pid&gt;0 ，等待任何子进程识别码为pid的子进程</li></ol></li><li>status： 指向返回码的指针</li><li>options： 选项决定父进程调用waitpid后的状态<ol><li>options = WNOHANG, 即使没有子进程退出也立即返回。</li><li>options = WUNYRACED, 子进程进入暂停马上返回，但结束状态不予理会</li></ol></li></ol><p>守护进程：</p><p>定义：守护进程是脱离终端并在后台运行的进程，执行过程中信息不会显示在终端上并且也不会被终端发出的信号打断。</p><p>操作步骤：创建子进程，父进程退出：fork() + if(pid &gt; 0){exit(0);}，使子进程称为孤儿进程被init进程收养。</p><ol><li>在子进程中创建新会话：setsid()。</li><li>改变当前目录结构为根：chdir(“/“)。</li><li>重设文件掩码：umask(0)。</li><li>关闭文件描述符：for(int i = 0; i &lt; 65535; ++i){close(i);}。</li></ol><h5 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h5><p>每一个进程是资源分配的基本单位。进程结构由以下几个部分组成：代码段、堆栈段、数据段。代码段是静态的二进制代码，多个程序可以共享。实际上在父进程创建子进程之后，父、子进程除了pid外，几乎所有的部分几乎一样，子进程创建时拷贝父进程PCB中大部分内容，而PCB的内容实际上是各种数据、代码的地址或索引表地址，所以复制了PCB中这些指针实际就等于获取了全部父进程可访问数据。所以简单来说，创建新进程需要复制整个PCB，之后操作系统将PCB添加到进程核心堆栈底部，这样就可以被操作系统感知和调度了。</p><p>父、子进程共享全部数据，但并不是说他们就是对同一块数据进行操作，子进程在读写数据时会通过写时复制机制将公共的数据重新拷贝一份，之后在拷贝出的数据上进行操作。如果子进程想要运行自己的代码段，还可以通过调用execv()函数重新加载新的代码段，之后就和父进程独立开了。我们在shell中执行程序就是通过shell进程先fork()一个子进程再通过execv()重新加载新的代码段的过程。</p><h4 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h4><p>进程间通信（IPC，InterProcess Communication）是指在不同进程之间传播或交换信息。</p><p>IPC的方式通常有管道（包括无名管道和命名管道）、消息队列、信号量、共享存储、Socket、Streams等。其中 Socket和Streams支持不同主机上的两个进程IPC</p><h5 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h5><p>通常指无名管道，是 UNIX 系统IPC最古老的形式</p><p>特点：</p><ol><li>它是半双工的（即数据只能在一个方向上流动），具有固定的读端和写端。</li><li>它只能用于具有亲缘关系的进程之间的通信（也是父子进程或者兄弟进程之间）。</li><li>它可以看成是一种特殊的文件，对于它的读写也可以使用普通的read、write 等函数。但是它不是普通的文件，并不属于其他任何文件系统，并且只存在于内存中。</li><li>#include &lt;unistd.h&gt;<br>int pipe(int fd[2]);    // 返回值：若成功返回0，失败返回-1</li></ol><p>原型：当一个管道建立时，它会创建两个文件描述符：fd[0]为读而打开，fd[1]为写而打开。如下图</p><p><img src="2019072400002.png" alt="3223"></p><p>要关闭管道只需将这两个文件描述符关闭即可。</p><p>例子：单个进程中的管道几乎没有任何用处。所以，通常调用 pipe 的进程接着调用 fork，这样就创建了父进程与子进程之间的 IPC 通道。如下图所示：</p><p><img src="2019072400003.png" alt="58686"></p><p>若要数据流从父进程流向子进程，则关闭父进程的读端（fd[0]）与子进程的写端（fd[1]）；反之，则可以使数据流从子进程流向父进程.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;unistd.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line"> </span><br><span class="line">#define MAXLINE (2014)</span><br><span class="line"> </span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">int n,fd[2];//保存管道返回的两个文件描述符</span><br><span class="line">pid_t pid;</span><br><span class="line">char line[MAXLINE];</span><br><span class="line">if(pipe(fd)&lt;0)//创建管道,fd[0]是读端，fd[1]是写端。</span><br><span class="line">printf(&quot;pipe error&quot;);</span><br><span class="line">if((pid=fork())&lt;0)//创建进程</span><br><span class="line">printf(&quot;fock error&quot;);//创建进程失败</span><br><span class="line">else if(pid&gt;0)//pid大于零，为父进程，pid的值是子进程的</span><br><span class="line">&#123;</span><br><span class="line">close(fd[0]);//关闭读端</span><br><span class="line">printf(&quot;#the parent process pid %d\n&quot;,getpid());//返回当前进程的id</span><br><span class="line">printf(&quot;#the children pid is %d\n&quot;,pid);</span><br><span class="line">printf(&quot;#the process write to pipe: hello world\n&quot;);</span><br><span class="line">write(fd[1],&quot;hello world\n&quot;,12);//向写端写入12个字节数据</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">close(fd[1]);//关闭写端</span><br><span class="line">printf(&quot;$the children process pid %d\n&quot;,getpid());</span><br><span class="line">printf(&quot;$the parent process pid %d\n&quot;,getppid());</span><br><span class="line">n = read(fd[0],line,MAXLINE);</span><br><span class="line">write(STDOUT_FILENO,line,n);//把数据写入标准输出文件描述符</span><br><span class="line">&#125;</span><br><span class="line">exit(0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="FIFO"><a href="#FIFO" class="headerlink" title="FIFO"></a>FIFO</h5><p>也称为命名管道，它是一种文件类型</p><p>特点：</p><ol><li>FIFO可以在无关的进程之间交换数据，与无名管道不同。</li><li>FIFO有路径名与之相关联，它以一种特殊设备文件形式存在于文件系统中。</li></ol><p>原型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;sys/stat.h&gt;</span><br><span class="line">// 返回值：成功返回0，出错返回-1</span><br><span class="line">int mkfifo(const char *pathname, mode_t mode);</span><br></pre></td></tr></table></figure><p>其中的 mode 参数与open函数中的 mode 相同。一旦创建了一个 FIFO，就可以用一般的文件I/O函数操作它。</p><p>当 open 一个FIFO时，是否设置非阻塞标志（O_NONBLOCK）的区别：</p><p>若没有指定O_NONBLOCK（默认），只读 open 要阻塞到某个其他进程为写而打开此 FIFO。类似的，只写 open 要阻塞到某个其他进程为读而打开它。</p><p>若指定了O_NONBLOCK，则只读 open 立即返回。而只写 open 将出错返回 -1 如果没有进程已经为读而打开该 FIFO，其errno置ENXIO。</p><p>例子：FIFO的通信方式类似于在进程中使用文件来传输数据，只不过FIFO类型文件同时具有管道的特性。在数据读出时，FIFO管道中同时清除数据，并且“先进先出”。下面的例子演示了使用 FIFO 进行 IPC 的过程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">write_fifo.c</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;   // exit</span><br><span class="line">#include&lt;fcntl.h&gt;    // O_WRONLY</span><br><span class="line">#include&lt;sys/stat.h&gt;</span><br><span class="line">#include&lt;time.h&gt;     // time</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int fd;</span><br><span class="line">    int n, i;</span><br><span class="line">    char buf[1024];</span><br><span class="line">    time_t tp;</span><br><span class="line"></span><br><span class="line">    printf(&quot;I am %d process.\n&quot;, getpid()); // 说明进程ID</span><br><span class="line">    </span><br><span class="line">    if((fd = open(&quot;fifo1&quot;, O_WRONLY)) &lt; 0) // 以写打开一个FIFO </span><br><span class="line">    &#123;</span><br><span class="line">        perror(&quot;Open FIFO Failed&quot;);</span><br><span class="line">        exit(1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for(i=0; i&lt;10; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        time(&amp;tp);  // 取系统当前时间</span><br><span class="line">        n=sprintf(buf,&quot;Process %d&apos;s time is %s&quot;,getpid(),ctime(&amp;tp));</span><br><span class="line">        printf(&quot;Send message: %s&quot;, buf); // 打印</span><br><span class="line">        if(write(fd, buf, n+1) &lt; 0)  // 写入到FIFO中</span><br><span class="line">        &#123;</span><br><span class="line">            perror(&quot;Write FIFO Failed&quot;);</span><br><span class="line">            close(fd);</span><br><span class="line">            exit(1);</span><br><span class="line">        &#125;</span><br><span class="line">        sleep(1);  // 休眠1秒</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    close(fd);  // 关闭FIFO文件</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">read_fifo.c</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;errno.h&gt;</span><br><span class="line">#include&lt;fcntl.h&gt;</span><br><span class="line">#include&lt;sys/stat.h&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int fd;</span><br><span class="line">    int len;</span><br><span class="line">    char buf[1024];</span><br><span class="line"></span><br><span class="line">    if(mkfifo(&quot;fifo1&quot;, 0666) &lt; 0 &amp;&amp; errno!=EEXIST) // 创建FIFO管道</span><br><span class="line">        perror(&quot;Create FIFO Failed&quot;);</span><br><span class="line"></span><br><span class="line">    if((fd = open(&quot;fifo1&quot;, O_RDONLY)) &lt; 0)  // 以读打开FIFO</span><br><span class="line">    &#123;</span><br><span class="line">        perror(&quot;Open FIFO Failed&quot;);</span><br><span class="line">        exit(1);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    while((len = read(fd, buf, 1024)) &gt; 0) // 读取FIFO管道</span><br><span class="line">        printf(&quot;Read message: %s&quot;, buf);</span><br><span class="line"></span><br><span class="line">    close(fd);  // 关闭FIFO文件</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在两个终端里用 gcc 分别编译运行上面两个文件，可以看到结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[cheesezh@localhost]$ ./write_fifo </span><br><span class="line">I am 5954 process.</span><br><span class="line">Send message: Process 5954&apos;s time is Mon Apr 20 12:37:28 2015</span><br><span class="line">Send message: Process 5954&apos;s time is Mon Apr 20 12:37:29 2015</span><br><span class="line">Send message: Process 5954&apos;s time is Mon Apr 20 12:37:30 2015</span><br><span class="line">Send message: Process 5954&apos;s time is Mon Apr 20 12:37:31 2015</span><br><span class="line">Send message: Process 5954&apos;s time is Mon Apr 20 12:37:32 2015</span><br><span class="line">Send message: Process 5954&apos;s time is Mon Apr 20 12:37:33 2015</span><br><span class="line">Send message: Process 5954&apos;s time is Mon Apr 20 12:37:34 2015</span><br><span class="line">Send message: Process 5954&apos;s time is Mon Apr 20 12:37:35 2015</span><br><span class="line">Send message: Process 5954&apos;s time is Mon Apr 20 12:37:36 2015</span><br><span class="line">Send message: Process 5954&apos;s time is Mon Apr 20 12:37:37 2015</span><br><span class="line">[cheesezh@localhost]$ ./read_fifo </span><br><span class="line">Read message: Process 5954&apos;s time is Mon Apr 20 12:37:28 2015</span><br><span class="line">Read message: Process 5954&apos;s time is Mon Apr 20 12:37:29 2015</span><br><span class="line">Read message: Process 5954&apos;s time is Mon Apr 20 12:37:30 2015</span><br><span class="line">Read message: Process 5954&apos;s time is Mon Apr 20 12:37:31 2015</span><br><span class="line">Read message: Process 5954&apos;s time is Mon Apr 20 12:37:32 2015</span><br><span class="line">Read message: Process 5954&apos;s time is Mon Apr 20 12:37:33 2015</span><br><span class="line">Read message: Process 5954&apos;s time is Mon Apr 20 12:37:34 2015</span><br><span class="line">Read message: Process 5954&apos;s time is Mon Apr 20 12:37:35 2015</span><br><span class="line">Read message: Process 5954&apos;s time is Mon Apr 20 12:37:36 2015</span><br><span class="line">Read message: Process 5954&apos;s time is Mon Apr 20 12:37:37 2015</span><br></pre></td></tr></table></figure><p>上述例子可以扩展成客户进程—服务器进程通信的实例，write_fifo的作用类似于客户端，可以打开多个客户端向一个服务器发送请求信息，read_fifo类似于服务器，它适时监控着FIFO的读端，当有数据时，读出并进行处理，但是有一个关键的问题是，每一个客户端必须预先知道服务器提供的FIFO接口，下图显示了这种安排：</p><p><img src="2019072400004.png" alt="313124"></p><h5 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h5><p>是消息的链接表，存放在内核中。一个消息队列由一个标识符（即队列ID）来标识。</p><p>特点：</p><ol><li>消息队列是面向记录的，其中的消息具有特定的格式以及特定的优先级。</li><li>消息队列独立于发送与接收进程。进程终止时，消息队列及其内容并不会被删除。</li><li>消息队列可以实现消息的随机查询,消息不一定要以先进先出的次序读取,也可以按消息的类型读取。</li></ol><p>原型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;sys/msg.h&gt;</span><br><span class="line">// 创建或打开消息队列：成功返回队列ID，失败返回-1</span><br><span class="line">int msgget(key_t key, int flag);</span><br><span class="line">// 添加消息：成功返回0，失败返回-1</span><br><span class="line">int msgsnd(int msqid, const void *ptr, size_t size, int flag);</span><br><span class="line">// 读取消息：成功返回消息数据的长度，失败返回-1</span><br><span class="line">int msgrcv(int msqid, void *ptr, size_t size, long type,int flag);</span><br><span class="line">// 控制消息队列：成功返回0，失败返回-1</span><br><span class="line">int msgctl(int msqid, int cmd, struct msqid_ds *buf);</span><br></pre></td></tr></table></figure><p>在以下两种情况下，msgget将创建一个新的消息队列：</p><ol><li>如果没有与键值key相对应的消息队列，并且flag中包含了IPC_CREAT标志位。</li><li>key参数为IPC_PRIVATE。</li></ol><p>函数msgrcv在读取消息队列时，type参数有下面几种情况</p><ol><li>type == 0，返回队列中的第一个消息；</li><li>type &gt; 0，返回队列中消息类型为 type 的第一个消息；</li><li>type &lt; 0，返回队列中消息类型值小于或等于 type 绝对值的消息，如果有多个，则取类型值最小的消息</li></ol><p>可以看出，type值非 0 时用于以非先进先出次序读消息。也可以把 type 看做优先级的权值</p><p>例子：下面写了一个简单的使用消息队列进行IPC的例子，服务端程序一直在等待特定类型的消息，当收到该类型的消息以后，发送另一种特定类型的消息作为反馈，客户端读取该反馈并打印出来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">msg_server.c</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;sys/msg.h&gt;</span><br><span class="line"></span><br><span class="line">// 用于创建一个唯一的key</span><br><span class="line">#define MSG_FILE &quot;/etc/passwd&quot;</span><br><span class="line"></span><br><span class="line">// 消息结构</span><br><span class="line">struct msg_form &#123;</span><br><span class="line">    long mtype;</span><br><span class="line">    char mtext[256];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int msqid;</span><br><span class="line">    key_t key;</span><br><span class="line">    struct msg_form msg;</span><br><span class="line">    </span><br><span class="line">    // 获取key值</span><br><span class="line">    if((key = ftok(MSG_FILE,&apos;z&apos;)) &lt; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(&quot;ftok error&quot;);</span><br><span class="line">        exit(1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 打印key值</span><br><span class="line">    printf(&quot;Message Queue - Server key is: %d.\n&quot;, key);</span><br><span class="line"></span><br><span class="line">    // 创建消息队列</span><br><span class="line">    if ((msqid = msgget(key, IPC_CREAT|0777)) == -1)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(&quot;msgget error&quot;);</span><br><span class="line">        exit(1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 打印消息队列ID及进程ID</span><br><span class="line">    printf(&quot;My msqid is: %d.\n&quot;, msqid);</span><br><span class="line">    printf(&quot;My pid is: %d.\n&quot;, getpid());</span><br><span class="line"></span><br><span class="line">    // 循环读取消息</span><br><span class="line">    for(;;) </span><br><span class="line">    &#123;</span><br><span class="line">        msgrcv(msqid, &amp;msg, 256, 888, 0);// 返回类型为888的第一个消息</span><br><span class="line">        printf(&quot;Server: receive msg.mtext is: %s.\n&quot;, msg.mtext);</span><br><span class="line">        printf(&quot;Server: receive msg.mtype is: %d.\n&quot;, msg.mtype);</span><br><span class="line"></span><br><span class="line">        msg.mtype = 999; // 客户端接收的消息类型</span><br><span class="line">        sprintf(msg.mtext, &quot;hello, I&apos;m server %d&quot;, getpid());</span><br><span class="line">        msgsnd(msqid, &amp;msg, sizeof(msg.mtext), 0);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">msg_client.c</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;sys/msg.h&gt;</span><br><span class="line"></span><br><span class="line">// 用于创建一个唯一的key</span><br><span class="line">#define MSG_FILE &quot;/etc/passwd&quot;</span><br><span class="line"></span><br><span class="line">// 消息结构</span><br><span class="line">struct msg_form &#123;</span><br><span class="line">    long mtype;</span><br><span class="line">    char mtext[256];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int msqid;</span><br><span class="line">    key_t key;</span><br><span class="line">    struct msg_form msg;</span><br><span class="line"></span><br><span class="line">    // 获取key值</span><br><span class="line">    if ((key = ftok(MSG_FILE, &apos;z&apos;)) &lt; 0) </span><br><span class="line">    &#123;</span><br><span class="line">        perror(&quot;ftok error&quot;);</span><br><span class="line">        exit(1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 打印key值</span><br><span class="line">    printf(&quot;Message Queue - Client key is: %d.\n&quot;, key);</span><br><span class="line"></span><br><span class="line">    // 打开消息队列</span><br><span class="line">    if ((msqid = msgget(key, IPC_CREAT|0777)) == -1) </span><br><span class="line">    &#123;</span><br><span class="line">        perror(&quot;msgget error&quot;);</span><br><span class="line">        exit(1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 打印消息队列ID及进程ID</span><br><span class="line">    printf(&quot;My msqid is: %d.\n&quot;, msqid);</span><br><span class="line">    printf(&quot;My pid is: %d.\n&quot;, getpid());</span><br><span class="line"></span><br><span class="line">    // 添加消息，类型为888</span><br><span class="line">    msg.mtype = 888;</span><br><span class="line">    sprintf(msg.mtext, &quot;hello, I&apos;m client %d&quot;, getpid());</span><br><span class="line">    msgsnd(msqid, &amp;msg, sizeof(msg.mtext), 0);</span><br><span class="line"></span><br><span class="line">    // 读取类型为777的消息</span><br><span class="line">    msgrcv(msqid, &amp;msg, 256, 999, 0);</span><br><span class="line">    printf(&quot;Client: receive msg.mtext is: %s.\n&quot;, msg.mtext);</span><br><span class="line">    printf(&quot;Client: receive msg.mtype is: %d.\n&quot;, msg.mtype);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h5><p>与已经介绍过的 IPC 结构不同，它是一个计数器。信号量用于实现进程间的互斥与同步，而不是用于存储进程间通信数据。</p><p>特点：</p><ol><li>信号量用于进程间同步，若要在进程间传递数据需要结合共享内存。</li><li>信号量基于操作系统的 PV 操作，程序对信号量的操作都是原子操作。</li><li>每次对信号量的 PV 操作不仅限于对信号量值加 1 或减 1，而且可以加减任意正整数。</li><li>支持信号量组。</li></ol><p>原型：</p><p>最简单的信号量是只能取 0 和 1 的变量，这也是信号量最常见的一种形式，叫做二值信号量（Binary Semaphore）。而可以取多个正整数的信号量被称为通用信号量。</p><p>Linux 下的信号量函数都是在通用的信号量数组上进行操作，而不是在一个单一的二值信号量上进行操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;sys/sem.h&gt;</span><br><span class="line">// 创建或获取一个信号量组：若成功返回信号量集ID，失败返回-1</span><br><span class="line">int semget(key_t key, int num_sems, int sem_flags);</span><br><span class="line">// 对信号量组进行操作，改变信号量的值：成功返回0，失败返回-1</span><br><span class="line">int semop(int semid, struct sembuf semoparray[], size_t numops);  </span><br><span class="line">// 控制信号量的相关信息</span><br><span class="line">int semctl(int semid, int sem_num, int cmd, ...);</span><br></pre></td></tr></table></figure><p>当semget创建新的信号量集合时，必须指定集合中信号量的个数（即num_sems），通常为1； 如果是引用一个现有的集合，则将num_sems指定为 0 。</p><p>在semop函数中，sembuf结构的定义如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">struct sembuf </span><br><span class="line">&#123;</span><br><span class="line">    short sem_num; // 信号量组中对应的序号，0～sem_nums-1</span><br><span class="line">    short sem_op;  // 信号量值在一次操作中的改变量</span><br><span class="line">    short sem_flg; // IPC_NOWAIT, SEM_UNDO</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 sem_op 是一次操作中的信号量的改变量：</p><ol><li>若sem_op &gt; 0，表示进程释放相应的资源数，将 sem_op 的值加到信号量的值上。如果有进程正在休眠等待此信号量，则换行它们。</li><li>若sem_op &lt; 0，请求 sem_op 的绝对值的资源<ol><li>如果相应的资源数可以满足请求，则将该信号量的值减去sem_op的绝对值，函数成功返回。</li><li>当相应的资源数不能满足请求时，这个操作与sem_flg有关。<ol><li>sem_flg 指定IPC_NOWAIT，则semop函数出错返回EAGAIN。</li><li>sem_flg 没有指定IPC_NOWAIT，则将该信号量的semncnt值加1，然后进程挂起直到下述情况发生：</li><li>当相应的资源数可以满足请求，此信号量的semncnt值减1，该信号量的值减去sem_op的绝对值。成功返回；</li><li>此信号量被删除，函数smeop出错返回EIDRM；</li><li>进程捕捉到信号，并从信号处理函数返回，此情况下将此信号量的semncnt值减1，函数semop出错返回EINTR</li></ol></li></ol></li><li>若sem_op == 0，进程阻塞直到信号量的相应值为0：<ol><li>当信号量已经为0，函数立即返回。</li><li>如果信号量的值不为0，则依据sem_flg决定函数动作：<ol><li>信号量值为0，将信号量的semzcnt的值减1，函数semop成功返回；</li><li>此信号量被删除，函数smeop出错返回EIDRM；</li><li>进程捕捉到信号，并从信号处理函数返回，在此情况将此信号量的semncnt值减1，函数semop出错返回EINTR</li></ol></li></ol></li></ol><p>在semctl函数中的命令有多种，这里就说两个常用的：</p><ol><li>SETVAL：用于初始化信号量为一个已知的值。所需要的值作为联合semun的val成员来传递。在信号量第一次使用之前需要设置信号量。</li><li>IPC_RMID：删除一个信号量集合。如果不删除信号量，它将继续在系统中存在，即使程序已经退出，它可能在你下次运行此程序时引发问题，而且信号量是一种有限的资源。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;sys/sem.h&gt;</span><br><span class="line"></span><br><span class="line">// 联合体，用于semctl初始化</span><br><span class="line">union semun</span><br><span class="line">&#123;</span><br><span class="line">    intval; /*for SETVAL*/</span><br><span class="line">    struct semid_ds *buf;</span><br><span class="line">    unsigned short  *array;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 初始化信号量</span><br><span class="line">int init_sem(int sem_id, int value)</span><br><span class="line">&#123;</span><br><span class="line">    union semun tmp;</span><br><span class="line">    tmp.val = value;</span><br><span class="line">    if(semctl(sem_id, 0, SETVAL, tmp) == -1)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(&quot;Init Semaphore Error&quot;);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// P操作:</span><br><span class="line">//    若信号量值为1，获取资源并将信号量值-1 </span><br><span class="line">//    若信号量值为0，进程挂起等待</span><br><span class="line">int sem_p(int sem_id)</span><br><span class="line">&#123;</span><br><span class="line">    struct sembuf sbuf;</span><br><span class="line">    sbuf.sem_num = 0; /*序号*/</span><br><span class="line">    sbuf.sem_op = -1; /*P操作*/</span><br><span class="line">    sbuf.sem_flg = SEM_UNDO;</span><br><span class="line"></span><br><span class="line">    if(semop(sem_id, &amp;sbuf, 1) == -1)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(&quot;P operation Error&quot;);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// V操作：</span><br><span class="line">//    释放资源并将信号量值+1</span><br><span class="line">//    如果有进程正在挂起等待，则唤醒它们</span><br><span class="line">int sem_v(int sem_id)</span><br><span class="line">&#123;</span><br><span class="line">    struct sembuf sbuf;</span><br><span class="line">    sbuf.sem_num = 0; /*序号*/</span><br><span class="line">    sbuf.sem_op = 1;  /*V操作*/</span><br><span class="line">    sbuf.sem_flg = SEM_UNDO;</span><br><span class="line"></span><br><span class="line">    if(semop(sem_id, &amp;sbuf, 1) == -1)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(&quot;V operation Error&quot;);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 删除信号量集</span><br><span class="line">int del_sem(int sem_id)</span><br><span class="line">&#123;</span><br><span class="line">    union semun tmp;</span><br><span class="line">    if(semctl(sem_id, 0, IPC_RMID, tmp) == -1)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(&quot;Delete Semaphore Error&quot;);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int sem_id;  // 信号量集ID</span><br><span class="line">    key_t key;  </span><br><span class="line">    pid_t pid;</span><br><span class="line"></span><br><span class="line">    // 获取key值</span><br><span class="line">    if((key = ftok(&quot;.&quot;, &apos;z&apos;)) &lt; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(&quot;ftok error&quot;);</span><br><span class="line">        exit(1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 创建信号量集，其中只有一个信号量</span><br><span class="line">    if((sem_id = semget(key, 1, IPC_CREAT|0666)) == -1)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(&quot;semget error&quot;);</span><br><span class="line">        exit(1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 初始化：初值设为0资源被占用</span><br><span class="line">    init_sem(sem_id, 0);</span><br><span class="line"></span><br><span class="line">    if((pid = fork()) == -1)</span><br><span class="line">        perror(&quot;Fork Error&quot;);</span><br><span class="line">    else if(pid == 0) /*子进程*/ </span><br><span class="line">    &#123;</span><br><span class="line">        sleep(2);</span><br><span class="line">        printf(&quot;Process child: pid=%d\n&quot;, getpid());</span><br><span class="line">        sem_v(sem_id);  /*释放资源*/</span><br><span class="line">    &#125;</span><br><span class="line">    else  /*父进程*/</span><br><span class="line">    &#123;</span><br><span class="line">        sem_p(sem_id);   /*等待资源*/</span><br><span class="line">        printf(&quot;Process father: pid=%d\n&quot;, getpid());</span><br><span class="line">        sem_v(sem_id);   /*释放资源*/</span><br><span class="line">        del_sem(sem_id); /*删除信号量集*/</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的例子如果不加信号量，则父进程会先执行完毕。这里加了信号量让父进程等待子进程执行完以后再执行。</p><h5 id="共享内存"><a href="#共享内存" class="headerlink" title="共享内存"></a>共享内存</h5><p>指两个或多个进程共享一个给定的存储区。</p><p>特点：</p><ol><li>共享内存是最快的一种 IPC，因为进程是直接对内存进行存取。</li><li>因为多个进程可以同时操作，所以需要进行同步。</li><li>信号量+共享内存通常结合在一起使用，信号量用来同步对共享内存的访问。</li></ol><p>原型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;sys/shm.h&gt;</span><br><span class="line">// 创建或获取一个共享内存：成功返回共享内存ID，失败返回-1</span><br><span class="line">int shmget(key_t key, size_t size, int flag);</span><br><span class="line">// 连接共享内存到当前进程的地址空间：成功返回指向共享内存的指针，失败返回-1</span><br><span class="line">void *shmat(int shm_id, const void *addr, int flag);</span><br><span class="line">// 断开与共享内存的连接：成功返回0，失败返回-1</span><br><span class="line">int shmdt(void *addr); </span><br><span class="line">// 控制共享内存的相关信息：成功返回0，失败返回-1</span><br><span class="line">int shmctl(int shm_id, int cmd, struct shmid_ds *buf);</span><br></pre></td></tr></table></figure><p>当用shmget函数创建一段共享内存时，必须指定其 size；而如果引用一个已存在的共享内存，则将 size 指定为0 。</p><p>当一段共享内存被创建以后，它并不能被任何进程访问。必须使用shmat函数连接该共享内存到当前进程的地址空间，连接成功后把</p><p>共享内存区对象映射到调用进程的地址空间，随后可像本地空间一样访问。</p><p>shmdt函数是用来断开shmat建立的连接的。注意，这并不是从系统中删除该共享内存，只是当前进程不能再访问该共享内存而已。</p><p>shmctl函数可以对共享内存执行多种操作，根据参数 cmd 执行相应的操作。常用的是IPC_RMID（从系统中删除该共享内存）。</p><p>例子：</p><p>下面这个例子，使用了【共享内存+信号量+消息队列】的组合来实现服务器进程与客户进程间的通信。</p><ol><li>共享内存用来传递数据；</li><li>信号量用来同步；</li><li>消息队列用来 在客户端修改了共享内存后 通知服务器读取。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br></pre></td><td class="code"><pre><span class="line">server.c</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;sys/shm.h&gt;  // shared memory</span><br><span class="line">#include&lt;sys/sem.h&gt;  // semaphore</span><br><span class="line">#include&lt;sys/msg.h&gt;  // message queue</span><br><span class="line">#include&lt;string.h&gt;   // memcpy</span><br><span class="line"></span><br><span class="line">// 消息队列结构</span><br><span class="line">struct msg_form &#123;</span><br><span class="line">    long mtype;</span><br><span class="line">    char mtext;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 联合体，用于semctl初始化</span><br><span class="line">union semun</span><br><span class="line">&#123;</span><br><span class="line">    int              val; /*for SETVAL*/</span><br><span class="line">    struct semid_ds *buf;</span><br><span class="line">    unsigned short  *array;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 初始化信号量</span><br><span class="line">int init_sem(int sem_id, int value)</span><br><span class="line">&#123;</span><br><span class="line">    union semun tmp;</span><br><span class="line">    tmp.val = value;</span><br><span class="line">    if(semctl(sem_id, 0, SETVAL, tmp) == -1)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(&quot;Init Semaphore Error&quot;);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// P操作:</span><br><span class="line">//  若信号量值为1，获取资源并将信号量值-1 </span><br><span class="line">//  若信号量值为0，进程挂起等待</span><br><span class="line">int sem_p(int sem_id)</span><br><span class="line">&#123;</span><br><span class="line">    struct sembuf sbuf;</span><br><span class="line">    sbuf.sem_num = 0; /*序号*/</span><br><span class="line">    sbuf.sem_op = -1; /*P操作*/</span><br><span class="line">    sbuf.sem_flg = SEM_UNDO;</span><br><span class="line"></span><br><span class="line">    if(semop(sem_id, &amp;sbuf, 1) == -1)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(&quot;P operation Error&quot;);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// V操作：</span><br><span class="line">//  释放资源并将信号量值+1</span><br><span class="line">//  如果有进程正在挂起等待，则唤醒它们</span><br><span class="line">int sem_v(int sem_id)</span><br><span class="line">&#123;</span><br><span class="line">    struct sembuf sbuf;</span><br><span class="line">    sbuf.sem_num = 0; /*序号*/</span><br><span class="line">    sbuf.sem_op = 1;  /*V操作*/</span><br><span class="line">    sbuf.sem_flg = SEM_UNDO;</span><br><span class="line"></span><br><span class="line">    if(semop(sem_id, &amp;sbuf, 1) == -1)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(&quot;V operation Error&quot;);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 删除信号量集</span><br><span class="line">int del_sem(int sem_id)</span><br><span class="line">&#123;</span><br><span class="line">    union semun tmp;</span><br><span class="line">    if(semctl(sem_id, 0, IPC_RMID, tmp) == -1)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(&quot;Delete Semaphore Error&quot;);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 创建一个信号量集</span><br><span class="line">int creat_sem(key_t key)</span><br><span class="line">&#123;</span><br><span class="line">    int sem_id;</span><br><span class="line">    if((sem_id = semget(key, 1, IPC_CREAT|0666)) == -1)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(&quot;semget error&quot;);</span><br><span class="line">        exit(-1);</span><br><span class="line">    &#125;</span><br><span class="line">    init_sem(sem_id, 1);  /*初值设为1资源未占用*/</span><br><span class="line">    return sem_id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    key_t key;</span><br><span class="line">    int shmid, semid, msqid;</span><br><span class="line">    char *shm;</span><br><span class="line">    char data[] = &quot;this is server&quot;;</span><br><span class="line">    struct shmid_ds buf1;  /*用于删除共享内存*/</span><br><span class="line">    struct msqid_ds buf2;  /*用于删除消息队列*/</span><br><span class="line">    struct msg_form msg;  /*消息队列用于通知对方更新了共享内存*/</span><br><span class="line"></span><br><span class="line">    // 获取key值</span><br><span class="line">    if((key = ftok(&quot;.&quot;, &apos;z&apos;)) &lt; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(&quot;ftok error&quot;);</span><br><span class="line">        exit(1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 创建共享内存</span><br><span class="line">    if((shmid = shmget(key, 1024, IPC_CREAT|0666)) == -1)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(&quot;Create Shared Memory Error&quot;);</span><br><span class="line">        exit(1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 连接共享内存</span><br><span class="line">    shm = (char*)shmat(shmid, 0, 0);</span><br><span class="line">    if((int)shm == -1)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(&quot;Attach Shared Memory Error&quot;);</span><br><span class="line">        exit(1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // 创建消息队列</span><br><span class="line">    if ((msqid = msgget(key, IPC_CREAT|0777)) == -1)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(&quot;msgget error&quot;);</span><br><span class="line">        exit(1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 创建信号量</span><br><span class="line">    semid = creat_sem(key);</span><br><span class="line">    </span><br><span class="line">    // 读数据</span><br><span class="line">    while(1)</span><br><span class="line">    &#123;</span><br><span class="line">        msgrcv(msqid, &amp;msg, 1, 888, 0); /*读取类型为888的消息*/</span><br><span class="line">        if(msg.mtext == &apos;q&apos;)  /*quit - 跳出循环*/ </span><br><span class="line">            break;</span><br><span class="line">        if(msg.mtext == &apos;r&apos;)  /*read - 读共享内存*/</span><br><span class="line">        &#123;</span><br><span class="line">            sem_p(semid);</span><br><span class="line">            printf(&quot;%s\n&quot;,shm);</span><br><span class="line">            sem_v(semid);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 断开连接</span><br><span class="line">    shmdt(shm);</span><br><span class="line"></span><br><span class="line">    /*删除共享内存、消息队列、信号量*/</span><br><span class="line">    shmctl(shmid, IPC_RMID, &amp;buf1);</span><br><span class="line">    msgctl(msqid, IPC_RMID, &amp;buf2);</span><br><span class="line">    del_sem(semid);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">client.c</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;sys/shm.h&gt;  // shared memory</span><br><span class="line">#include&lt;sys/sem.h&gt;  // semaphore</span><br><span class="line">#include&lt;sys/msg.h&gt;  // message queue</span><br><span class="line">#include&lt;string.h&gt;   // memcpy</span><br><span class="line"></span><br><span class="line">// 消息队列结构</span><br><span class="line">struct msg_form &#123;</span><br><span class="line">    long mtype;</span><br><span class="line">    char mtext;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 联合体，用于semctl初始化</span><br><span class="line">union semun</span><br><span class="line">&#123;</span><br><span class="line">    int              val; /*for SETVAL*/</span><br><span class="line">    struct semid_ds *buf;</span><br><span class="line">    unsigned short  *array;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// P操作:</span><br><span class="line">//  若信号量值为1，获取资源并将信号量值-1 </span><br><span class="line">//  若信号量值为0，进程挂起等待</span><br><span class="line">int sem_p(int sem_id)</span><br><span class="line">&#123;</span><br><span class="line">    struct sembuf sbuf;</span><br><span class="line">    sbuf.sem_num = 0; /*序号*/</span><br><span class="line">    sbuf.sem_op = -1; /*P操作*/</span><br><span class="line">    sbuf.sem_flg = SEM_UNDO;</span><br><span class="line"></span><br><span class="line">    if(semop(sem_id, &amp;sbuf, 1) == -1)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(&quot;P operation Error&quot;);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// V操作：</span><br><span class="line">//  释放资源并将信号量值+1</span><br><span class="line">//  如果有进程正在挂起等待，则唤醒它们</span><br><span class="line">int sem_v(int sem_id)</span><br><span class="line">&#123;</span><br><span class="line">    struct sembuf sbuf;</span><br><span class="line">    sbuf.sem_num = 0; /*序号*/</span><br><span class="line">    sbuf.sem_op = 1;  /*V操作*/</span><br><span class="line">    sbuf.sem_flg = SEM_UNDO;</span><br><span class="line"></span><br><span class="line">    if(semop(sem_id, &amp;sbuf, 1) == -1)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(&quot;V operation Error&quot;);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    key_t key;</span><br><span class="line">    int shmid, semid, msqid;</span><br><span class="line">    char *shm;</span><br><span class="line">    struct msg_form msg;</span><br><span class="line">    int flag = 1; /*while循环条件*/</span><br><span class="line"></span><br><span class="line">    // 获取key值</span><br><span class="line">    if((key = ftok(&quot;.&quot;, &apos;z&apos;)) &lt; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(&quot;ftok error&quot;);</span><br><span class="line">        exit(1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 获取共享内存</span><br><span class="line">    if((shmid = shmget(key, 1024, 0)) == -1)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(&quot;shmget error&quot;);</span><br><span class="line">        exit(1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 连接共享内存</span><br><span class="line">    shm = (char*)shmat(shmid, 0, 0);</span><br><span class="line">    if((int)shm == -1)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(&quot;Attach Shared Memory Error&quot;);</span><br><span class="line">        exit(1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 创建消息队列</span><br><span class="line">    if ((msqid = msgget(key, 0)) == -1)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(&quot;msgget error&quot;);</span><br><span class="line">        exit(1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 获取信号量</span><br><span class="line">    if((semid = semget(key, 0, 0)) == -1)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(&quot;semget error&quot;);</span><br><span class="line">        exit(1);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 写数据</span><br><span class="line">    printf(&quot;***************************************\n&quot;);</span><br><span class="line">    printf(&quot;*                 IPC                 *\n&quot;);</span><br><span class="line">    printf(&quot;*    Input r to send data to server.  *\n&quot;);</span><br><span class="line">    printf(&quot;*    Input q to quit.                 *\n&quot;);</span><br><span class="line">    printf(&quot;***************************************\n&quot;);</span><br><span class="line">    </span><br><span class="line">    while(flag)</span><br><span class="line">    &#123;</span><br><span class="line">        char c;</span><br><span class="line">        printf(&quot;Please input command: &quot;);</span><br><span class="line">        scanf(&quot;%c&quot;, &amp;c);</span><br><span class="line">        switch(c)</span><br><span class="line">        &#123;</span><br><span class="line">            case &apos;r&apos;:</span><br><span class="line">                printf(&quot;Data to send: &quot;);</span><br><span class="line">                sem_p(semid);  /*访问资源*/</span><br><span class="line">                scanf(&quot;%s&quot;, shm);</span><br><span class="line">                sem_v(semid);  /*释放资源*/</span><br><span class="line">                /*清空标准输入缓冲区*/</span><br><span class="line">                while((c=getchar())!=&apos;\n&apos; &amp;&amp; c!=EOF);</span><br><span class="line">                msg.mtype = 888;  </span><br><span class="line">                msg.mtext = &apos;r&apos;;  /*发送消息通知服务器读数据*/</span><br><span class="line">                msgsnd(msqid, &amp;msg, sizeof(msg.mtext), 0);</span><br><span class="line">                break;</span><br><span class="line">            case &apos;q&apos;:</span><br><span class="line">                msg.mtype = 888;</span><br><span class="line">                msg.mtext = &apos;q&apos;;</span><br><span class="line">                msgsnd(msqid, &amp;msg, sizeof(msg.mtext), 0);</span><br><span class="line">                flag = 0;</span><br><span class="line">                break;</span><br><span class="line">            default:</span><br><span class="line">                printf(&quot;Wrong input!\n&quot;);</span><br><span class="line">                /*清空标准输入缓冲区*/</span><br><span class="line">                while((c=getchar())!=&apos;\n&apos; &amp;&amp; c!=EOF);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 断开连接</span><br><span class="line">    shmdt(shm);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>五种通讯方式总结</p><ol><li>管道：速度慢，容量有限，只有父子进程能通讯    </li><li>FIFO：任何进程间都能通讯，但速度慢    </li><li>消息队列：容量受到系统限制，且要注意第一次读的时候，要考虑上一次没有读完数据的问题    </li><li>信号量：不能传递复杂消息，只能用来同步    </li><li>共享内存区：能够很容易控制容量，速度快，但要保持同步，比如一个进程在写的时候，另一个进程要注意读写的问题，相当于线程中的线程安全，当然，共享内存区同样可以用作线程间通讯，不过没这个必要，线程间本来就已经共享了同一进程内的一块内存</li></ol><h5 id="共享内存，管道，socket等进程间通信方式的优缺点"><a href="#共享内存，管道，socket等进程间通信方式的优缺点" class="headerlink" title="共享内存，管道，socket等进程间通信方式的优缺点"></a>共享内存，管道，socket等进程间通信方式的优缺点</h5><p>共享内存可以说是最有用的进程间通信方式，也是最快的IPC形式。两个不同进程A、B共享内存的意思是，同一块物理内存被映射到进程A、B各自的进程地址空间。</p><p>进程A可以即时看到进程B对共享内存中数据的更新，反之亦然。由于多个进程共享同一块内存区域，必然需要某种同步机制，互斥锁和信号量都可以。</p><p>采用共享内存通信的一个显而易见的好处是效率高，因为进程可以直接读写内存，而不需要任何数据的拷贝。</p><p>对于像管道和消息队列等通信方式，则需要在内核和用户空间进行四次的数据拷贝，而共享内存则只拷贝两次数据： </p><ol><li>一次从输入文件到共享内存区，</li><li>另一次从共享内存区到输出文件。</li></ol><p>实际上，进程之间在共享内存时，并不总是读写少量数据后就解除映射，有新的通信时，再重新建立共享内存区域。而是保持共享区域，直到通信完毕为止，这样，数据内容一直保存在共享内存中，并没有写回文件。共享内存中的内容往往是在解除映射时才写回 文件的。因此，采用共享内存的通信方式效率是非常高的。</p><p>进程间通信的方式有很多，常见的有信号量，消息队列，管道，共享内存，和socket等，这里我们主要讨论管道，共享内存，和socket，其他的比较简单只做简单的介绍。</p><p>信号量：信号量实际上是一个计数器，通常在多线程或者多进程开发中会用到，主要用来控制多线程多进程对于共享资源访问，通常配合锁来实现同时只有一个进程或者线程操作共享资源，防止数据的不同步。</p><p>消息队列：消息队列是消息的链表，存放在内核中并由消息队列表示符，我们可以在两个进程之间通过消息队列来实现进程间通信。不过消息队列在工作中好像并不怎么常用。</p><p>接下来主要谈谈剩下的三种，这些是我们经常会用到的。</p><p>管道分为有名管道和无名管道两种</p><p>无名管道 ：主要用于父进程与子进程之间，或者两个兄弟进程之间。在linux系统中可以通过系统调用建立起一个单向的通信管道，且这种关系只能由父进程来建立。因此，每个管道都是单向的，当需要双向通信时就需要建立起两个管道。管道两端的进程均将该管道看做一个文件，一个进程负责往管道中写内容，而另一个从管道中读取。这种传输遵循“先入先出”（FIFO）的规则。</p><p>有名管道：命名管道是为了解决无名管道只能用于近亲进程之间通信的缺陷而设计的。命名管道是建立在实际的磁盘介质或文件系统（而不是只存在于内存中）上有自己名字的文件，任何进程可以在任何时间通过文件名或路径名与该文件建立联系。为了实现命名管道，引入了一种新的文件类型——FIFO文件（遵循先进先出的原则）。实现一个命名管道实际上就是实现一个FIFO文件。命名管道一旦建立，之后它的读、写以及关闭操作都与普通管道完全相同。虽然FIFO文件的inode节点在磁盘上，但是仅是一个节点而已，文件的数据还是存在于内存缓冲页面中，和普通管道相同。</p><p>管道有很多致命的缺点，比如只能在具有亲缘关系的进程间通信，只能单向传输数据，另外管道的缓冲区是有限的（管道制存在于内存中，在管道创建时，为缓冲区分配一个页面大小，管道所传送的是无格式字节流，这就要求管道的读出方和写入方必须事先约定好数据的格式，最后就是管道操作不当很容易阻塞。因此管道虽然偶尔会见到，但是很少人会用。</p><p>共享内存：这个是经常用的，共享内存号称是最快的进程间通信方式，她在系统内存中开辟一块内存区，分别映射到各个进程的虚拟地址空间中，任何一个进程操作了内存区都会反映到其他进程中，各个进程之间的通信并没有像copy数据一样从内核到用户，再从用户到内核的拷贝。这种方式可以像访问自己的私有空间一样访问共享内存区，但是这事这种特性加大了共享内存的编程难度，对于数据的同步问题是一个难点，没有一定的经验很容易造成数据的混乱。但是我们可以使用一个折中的方法，我们可以结合它和管道来使用。</p><p>举个例子进程A和B通信，如果我们用一块共享内存区来实现它们的通信，对于数据的同步是个令人头疼的问题，但是我们可以用两个共享内存区。</p><p>内存区 1 ，A-&gt;B,A只能写数据，B只能读数据</p><p>内存区 2， B-&gt;A,A只能读数据，B只能写数据</p><p>这样就不会因为，多个进程同时写一块内存造成数据的混乱了，看起来是不是有点像管道，其实就是管道的机制，但是不同的是，她的速度要比管道快的多，他的数据大小没有限制（当然不能超过系统的内存大小），当然也不会有阻塞问题。但是这种方式也有明显的缺点，它只适合点对点的通信，如果要多个进程间通信，内存区的数量会呈线性增长，会造成数据的冗余，并且管理起来也会变得困难,如果你的进程数量在各位数着中方式是一个好的选择，否则就要采用一块共享内存，同时做好数据的同步了。</p><p>最后一点，通过名字就知道它是基于内存的，所以他只能在同一主机上使用，如果我们要做分布式应用或者跨物理机通信，那么socket就是我们唯一的选择了。</p><p>socket是一种面相网络的一种进程间通信方式，只要有网络存在，它可以跨越任何限制。socket编程是一个宽泛的说法，对于我们程序猿来说tcp，udp，http是我们经常用的一些网络协议。当然socket也是我们用的最多的，他的限制住要在与带宽，网络延时和连接数量的限制等。这也是我们在开发服务程序时都要面对c10k问题的原因。</p><h4 id="进程同步"><a href="#进程同步" class="headerlink" title="进程同步"></a>进程同步</h4><p>信号量、管程、会合、分布式系统</p><h5 id="信号量-1"><a href="#信号量-1" class="headerlink" title="信号量"></a>信号量</h5><p>用于进程间传递信号的一个整数值。在信号量上只有三种操作可以进行：初始化，P操作和V操作，这三种操作都是原子操作。</p><p> P操作(递减操作)可以用于阻塞一个进程，V操作(增加操作)可以用于解除阻塞一个进程。</p><p> 基本原理是两个或多个进程可以通过简单的信号进行合作，一个进程可以被迫在某一位置停止，直到它接收到一个特定的信号。该信号即为信号量s。<br> 为通过信号量s传送信号，进程可执行原语semSignal(s);为通过信号量s接收信号，进程可执行原语semWait(s);如果相应的信号仍然没有发送，则进程被阻塞，直到发送完为止。</p><h5 id="管程"><a href="#管程" class="headerlink" title="管程"></a>管程</h5><p>管程是由一个或多个过程、一个初始化序列和局部数据组成的软件模块，其主要特点如下：</p><p>局部数据变量只能被管程的过程访问，任何外部过程都不能访问。</p><p>一个进程通过调用管程的一个过程进入管程。</p><p>在任何时候，只能有一个进程在管程中执行，调用管程的任何其他进程都被阻塞，以等待管程可用。</p><p>管程通过使用条件变量提供对同步的支持，这些条件变量包含在管程中，并且只有在管程中才能被访问。有两个函数可以操作条件变量：</p><p>cwait(c)：调用进程的执行在条件c上阻塞，管程现在可被另一个进程使用。</p><p>csignal(c)：恢复执行在cwait之后因为某些条件而阻塞的进程。如果有多个这样的进程，选择其中一个；如果没有这样的进程，什么以不做</p><h5 id="会合"><a href="#会合" class="headerlink" title="会合"></a>会合</h5><p>一个进程可以有许多入口，一个入口对应一段程序，一个进程可 以调用另一个进程的入口。当一个进程调用另一个进程的入口， 而且被调用的进程已准备好接受这个调用时，会合就发生了。当 调用者发出调用请求时，被调用的进程未准备接受这个调用时， 则调用者等待；反之，当被调用者准备接受调用，而当前尚无调用者时，则被调用者等待。即先到达会合处等待后到达者。当多 个进程调用同一个进程的同一个入口时，被调用者按先来先服务 （FCFS）的次序接受调用。入口处可以携带调用参数，还可以有 返回参数，以实现信息的交换。被调用者可以选择会合的入口。</p><h4 id="进程中线程同步"><a href="#进程中线程同步" class="headerlink" title="进程中线程同步"></a>进程中线程同步</h4><p><img src="2019072400005.png" alt="41341"></p><p>线程同步的四种方法：</p><h5 id="临界区（Critical-Section）"><a href="#临界区（Critical-Section）" class="headerlink" title="临界区（Critical Section）"></a>临界区（Critical Section）</h5><p>通过对多线程的串行化来访问公共资源或一段代码，速度快，适合控制数据访问。</p><p>优点：保证在某一时刻只有一个线程能访问数据的简便办法</p><p>缺点：虽然临界区同步速度很快，但却只能用来同步本进程内的线程，而不可用来同步多个进程中的线程。</p><h5 id="互斥量（Mutex）"><a href="#互斥量（Mutex）" class="headerlink" title="互斥量（Mutex）"></a>互斥量（Mutex）</h5><p>为协调共同对一个共享资源的单独访问而设计的。</p><p>互斥量跟临界区很相似，比临界区复杂，互斥对象只有一个，只有拥有互斥对象的线程才具有访问资源的权限。</p><p>优点：使用互斥不仅仅能够在同一应用程序不同线程中实现资源的安全共享，而且可以在不同应用程序的线程之间实现对资源的安全共享。</p><p>缺点：互斥量是可以命名的，也就是说它可以跨越进程使用，所以创建互斥量需要的资源更多，所以如果只为了在进程内部是用的话使用临界区会带来速度上的优势并能够减少资源占用量。因为互斥量是跨进程的互斥量一旦被创建，就可以通过名字打开它。<br>通过互斥量可以指定资源被独占的方式使用，但如果有下面一种情况通过互斥量就无法处理，比如现在一位用户购买了一份三个并发访问许可的数据库系统，可以根据用户购买的访问许可数量来决定有多少个线程/进程能同时进行数据库操作，这时候如果利用互斥量就没有办法完成这个要求，信号量对象可以说是一种资源计数器。</p><h5 id="信号量（Semaphore）"><a href="#信号量（Semaphore）" class="headerlink" title="信号量（Semaphore）"></a>信号量（Semaphore）</h5><p>为控制一个具有有限数量用户资源而设计。它允许多个线程在同一时刻访问同一资源，但是需要限制在同一时刻访问此资源的最大线程数目。互斥量是信号量的一种特殊情况，当信号量的最大资源数=1就是互斥量了。</p><p>优点：适用于对Socket（套接字）程序中线程的同步。（例如，网络上的HTTP服务器要对同一时间内访问同一页面的用户数加以限制，只有不大于设定的最大用户数目的线程能够进行访问，而其他的访问企图则被挂起，只有在有用户退出对此页面的访问后才有可能进入。）</p><p>缺点：信号量机制必须有公共内存，不能用于分布式操作系统，这是它最大的弱点；<br>信号量机制功能强大，但使用时对信号量的操作分散， 而且难以控制，读写和维护都很困难，加重了程序员的编码负担；</p><p>核心操作P-V分散在各用户程序的代码中，不易控制和管理，一旦错误，后果严重，且不易发现和纠正。</p><h5 id="事件（Event）"><a href="#事件（Event）" class="headerlink" title="事件（Event）"></a>事件（Event）</h5><p>用来通知线程有一些事件已发生，从而启动后继任务的开始。</p><p>优点：事件对象通过通知操作的方式来保持线程的同步，并且可以实现不同进程中的线程同步操作。</p><p>临界区不是内核对象，只能用于进程内部的线程同步，是用户方式的同步。互斥、信号量是内核对象可以用于不同进程之间的线程同步（跨进程同步）。互斥其实是信号量的一种特殊形式。互斥可以保证在某一时刻只有一个线程可以拥有临界资源。信号量可以保证在某一时刻有指定数目的线程可以拥有临界资源。</p><h4 id="线程的创建和结束"><a href="#线程的创建和结束" class="headerlink" title="线程的创建和结束"></a>线程的创建和结束</h4><p>在一个文件内的多个函数通常都是按照main函数中出现的顺序来执行，但是在分时系统下，我们可以让每个函数都作为一个逻辑流并发执行，最简单的方式就是采用多线程策略。在main函数中调用多线程接口创建线程，每个线程对应特定的函数（操作），这样就可以不按照main函数中各个函数出现的顺序来执行，避免了忙等的情况。线程基本操作的接口如下。</p><h5 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h5><p>int pthread_create(pthread_t <em>pthread, const pthread_attr_t *attr, void *(</em>start_routine)(void *), void *agr);</p><p>创建一个线程pthread和start_routine不可或缺，分别用于标识线程和执行入口，其他可以填NULL。</p><ol><li>pthread：用来返回线程的id， *pthread值即为tid，类型为 pthread_t = unsigned long int</li><li>attr：指向线程属性结构体的指针，用于改变所创建线程的属性，填NULL使用默认值</li><li>start_routine：线程执行函数的首地址，传入函数指针</li><li>arg：通过地址传递来传递函数参数，这里是无符号类型指针，可以传任意类型变量的地址，在被传入函数中先强制类型转换成所需类型即可。</li></ol><h5 id="获取线程ID"><a href="#获取线程ID" class="headerlink" title="获取线程ID"></a>获取线程ID</h5><p>pthread_t  pthread_self(); </p><h5 id="等待线程结束"><a href="#等待线程结束" class="headerlink" title="等待线程结束"></a>等待线程结束</h5><p>int pthread_join(pthread_t tid, void** reval)</p><p>主线程调用，等待子线程退出并回收资源，类似于进程中wait/waitpid回收僵尸进程，调用pthread_join线程会被阻塞</p><ol><li>tid：创建线程时通过指针得到tid值</li><li>reval：指向返回值的指针</li></ol><h5 id="线程结束"><a href="#线程结束" class="headerlink" title="线程结束"></a>线程结束</h5><p>pthread_exit(void *retval)</p><p>子线程执行，用来结束当前线程并通过retval传递返回值，该返回值可通过pthread_join获得</p><h5 id="分离线程"><a href="#分离线程" class="headerlink" title="分离线程"></a>分离线程</h5><p>主线程、子线程均可调用。主线程中pthread_detach(tid),子线程中pthread_detach(pthread_self()),调用后和主线程分离，子线程结束时自己立即回收资源。</p><p>线程属性对象类型为pthread_attr_t，结构体定义如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">typedef struct&#123;</span><br><span class="line">    int etachstate;    // 线程分离的状态</span><br><span class="line">    int schedpolicy;    // 线程调度策略</span><br><span class="line">    struct sched_param schedparam;    // 线程的调度参数</span><br><span class="line">    int inheritsched;    // 线程的继承性</span><br><span class="line">    int scope;    // 线程的作用域</span><br><span class="line">    // 以下为线程栈的设置</span><br><span class="line">    size_t guardsize;    // 线程栈末尾警戒缓冲大小</span><br><span class="line">    int stackaddr_set;    // 线程的栈设置</span><br><span class="line">    void *    stackaddr;    // 线程栈的位置</span><br><span class="line">    size_t stacksize;    // 线程栈大小</span><br><span class="line">&#125;pthread_arrt_t；</span><br></pre></td></tr></table></figure><h4 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h4><p>新建状态、就绪状态、运行状态、阻塞状态(等待阻塞、同步阻塞、其他阻塞)、死亡状态</p><ol><li>新建状态(New)：新创建了一个线程对象。</li><li>就绪状态(Runnable)：线程对象创建后，其他线程调用了该对象的start()方法。该状态的线程位于“可运行线程池”中，变得可运行，只等待获取CPU的使用权。即在就绪状态的进程除CPU之外，其它的运行所需资源都已全部获得。</li><li>运行状态(Running)：就绪状态的线程获取了CPU，执行程序代码。</li><li>阻塞状态(Blocked)：阻塞状态是线程因某种原因放弃CPU使用权，暂时停止运行。直到线程进入就绪状态，才有机会转到运行状态。<ol><li>等待阻塞：运行的线程执行wait()方法，该线程会释放占用的所有资源，JVM会把该线程放入“等待池”中。进入这个状态后，是不能自动唤醒的，必须依靠其他线程调用notify()或notifyAll()方法才能被唤醒，唤醒后进入“锁池”中，通过获取锁状态来判断是否进入就绪状态</li><li>同步阻塞：运行的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入“锁池”中。</li><li>其他阻塞：运行的线程执行sleep()或join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入就绪状态。</li></ol></li><li>死亡状态(Dead)：线程执行完了或者因异常退出了run()方法，该线程结束生命周期</li></ol><p><img src="2019072400006.png" alt="3414241"></p><h5 id="线程共享进程哪些"><a href="#线程共享进程哪些" class="headerlink" title="线程共享进程哪些"></a>线程共享进程哪些</h5><p>线程共享的环境包括：进程代码段、进程的公有数据(利用这些共享的数据，线程很容易的实现相互之间的通讯)、进程打开的文件描述符、信号的处理器、进程的当前目录和进程用户ID与进程组ID。</p><p>线程之间特有的：每个线程都有自己独立的线程上下文，包括线程ID、栈、栈指针、程序计数器、条件码和通用目的寄存器值。</p><p>线程之间共有的：共享进程上下文的剩余部分，包括只读文本（代码）、读/写数据、堆以及所有的共享库代码和数据区域。线程也共享相同的打开文件的集合。</p><h5 id="线程间通信"><a href="#线程间通信" class="headerlink" title="线程间通信"></a>线程间通信</h5><p>共享内存：共享内存这种方式比较常见，我们经常会设置一个共享变量。然后多个线程去操作同一个共享变量。从而达到线程通讯的目的。</p><p>消息传递：不同的线程之间通过显式的发送消息来达到交互目的。消息传递最有名的方式应该是actor模型了。每个actor都有一个收件箱（消息队列）用来保存收到其他actor传递来的消息。</p><h3 id="处理机调度"><a href="#处理机调度" class="headerlink" title="处理机调度"></a>处理机调度</h3><p>调度的类型与模型、调度算法、实时系统中的调度、多处理机调度</p><h4 id="调度类型"><a href="#调度类型" class="headerlink" title="调度类型"></a>调度类型</h4><h5 id="高级调度"><a href="#高级调度" class="headerlink" title="高级调度"></a>高级调度</h5><p>又称为“宏观调度”、“作业调度”。从用 户工作流程的角度，一次提交的若干个作业，对每个作 业进行调度。时间上通常是分钟、小时或天。</p><h5 id="中级调度"><a href="#中级调度" class="headerlink" title="中级调度"></a>中级调度</h5><p>内外存交换：又称为“中级调度”。从存储器资源的角 度。将进程的部分或全部换出到外存上，将当前所需部 分换入到内存。指令和数据必须在内存里才能被CPU直 接访问。</p><h5 id="低级调度"><a href="#低级调度" class="headerlink" title="低级调度"></a>低级调度</h5><p>低级调度：又称为“微观调度”、“进程或线程 调度”。从CPU资源的角度，执行的单位。时间上 通常是毫秒。因为执行频繁，要求在实现时达到 高效率。 </p><h4 id="何时进行调度"><a href="#何时进行调度" class="headerlink" title="何时进行调度"></a>何时进行调度</h4><ol><li>当一个新的进程被创建时，是执行新进程还是继 续执行父进程？ </li><li>当一个进程运行完毕时； </li><li>当一个进程由于I/O、信号量或其他的某个原因 被阻塞时； </li><li>当一个I/O中断发生时，表明某个I/O操作已经完 成，而等待该I/O操作的进程转入就绪状态； </li><li>在分时系统中，当一个时钟中断发生时</li></ol><h4 id="何时进行切换"><a href="#何时进行切换" class="headerlink" title="何时进行切换"></a>何时进行切换</h4><p>只要OS取得对CPU的控制，进程切换就可能发生: </p><ol><li>用户调用：来自程序的显式请求(如：打开文件)， 该进程多半会被阻塞 </li><li>陷阱：最末一条指令导致出错，会引起进程移至退出状态 </li><li>中断：外部因素影响当前指令的执行，控制被转移 至中断处理程序</li></ol><p>在进程（上下文）中切换的步骤：</p><ol><li>保存处理器的上下文，包括程序计数器和其它寄 存器 </li><li>用新状态和其它相关信息更新正在运行进程的 PCB </li><li>把进程移至合适的队列-就绪、阻塞 </li><li>选择另一个要执行的进程 </li><li>更新被选中进程的PCB </li><li>从被选中进程中重装入CPU 上下文</li></ol><h5 id="面向用户的调度性能准则"><a href="#面向用户的调度性能准则" class="headerlink" title="面向用户的调度性能准则"></a>面向用户的调度性能准则</h5><p>周转时间：作业从提交到完成（得到结果）所经 历的时间。包括：在收容队列中等待，CPU上执行 ，就绪队列和阻塞队列中等待，结果输出等待－ －批处理系统 •外存等待时间、就绪等待时间、CPU执行时间、 I/O操作时间 •平均周转时间、带权平均周转时间（T/Ts) </p><p>响应时间：用户输入一个请求（如击键）到系统 给出首次响应（如屏幕显示）的时间－－分时系 统 </p><p>截止时间：开始截止时间和完成截止时间－－实时系 统，与周转时间有些相似。 </p><p>优先级：可以使关键任务达到更好的指标。 </p><p>公平性：不因作业或进程本身的特性而使上述指标过 分恶化。如长作业等待很长时间。</p><h5 id="面向系统的调度性能准则"><a href="#面向系统的调度性能准则" class="headerlink" title="面向系统的调度性能准则"></a>面向系统的调度性能准则</h5><p>吞吐量：单位时间内所完成的作业数，跟作业本 身特性和调度算法都有关系－－批处理系统 •平均周转时间不是吞吐量的倒数，因为并发执行的 作业在时间上可以重叠。如：在2小时内完成4个作 业，而平均周转时间是1.25小时，则吞吐量是2个作 业/小时 </p><p>处理机利用率：－－大中型主机 </p><p>各种资源的均衡利用：如CPU繁忙的作业和I/O繁 忙（指次数多，每次时间短）的作业搭配－－大 中型主机</p><h4 id="调度算法"><a href="#调度算法" class="headerlink" title="调度算法"></a>调度算法</h4><p>通常将作业或进程归入各种就绪或阻塞队列。有的算 法适用于作业调度，有的算法适用于进程调度，有的 两者都适应</p><p>不可抢占式方式 ，一旦处理器分配给一个进程，它就一直占用处理器 ，直到该进程自己因调用原语操作或等待I/O等原 因而进入阻塞状态，或时间片用完时才让出处理器 ，重新进行 </p><p>抢占式方式 ，就绪队列中一旦有优先级高于当前运行进程优先级 的进程存在时，便立即进行进程调度，把处理器转 给优先级高的进程</p><h5 id="先来先服务-FCFS-First-Come-First-Service"><a href="#先来先服务-FCFS-First-Come-First-Service" class="headerlink" title="先来先服务(FCFS, First Come First Service)"></a>先来先服务(FCFS, First Come First Service)</h5><p>这是最简单的调度算法，按先后顺序调度。 </p><ol><li>按照作业提交或进程变为就绪状态的先后次序，分 派CPU； </li><li>当前作业或进程占用CPU，直到执行完或阻塞，才 出让CPU（非抢占方式）。 </li><li>在作业或进程唤醒后（如I/O完成），并不立即恢 复执行，通常等到当前作业或进程出让CPU。最简 单的算法。 </li></ol><p>FCFS的特点 </p><ol><li>比较有利于长作业，而不利于短作业。 </li><li>有利于CPU繁忙的作业，不利于I/O繁忙的作业。</li></ol><h5 id="短作业优先-SJF-Shortest-Job-First"><a href="#短作业优先-SJF-Shortest-Job-First" class="headerlink" title="短作业优先(SJF, Shortest Job First)"></a>短作业优先(SJF, Shortest Job First)</h5><p>又称为“短进程优先”SPN(Shortest Process Next)； 这是对FCFS算法的改进，其目标是减少平均周转时间。 </p><p>对预计执行时间短的作业（进程）优先分派处理机。通常 后来的短作业不抢先正在执行的作业。</p><p>优点： </p><ol><li>比FCFS改善平均周转时间和平均带权周转时间，缩 短作业的等待时间； </li><li>提高系统的吞吐量； </li></ol><p>缺点： </p><ol><li>对长作业非常不利，可能长时间得不到执行； </li><li>未能依据作业的紧迫程度来划分执行的优先级； </li><li>难以准确估计作业（进程）的执行时间，从而影响 调度性能。</li></ol><h5 id="时间片轮转-Round-Robin-算法"><a href="#时间片轮转-Round-Robin-算法" class="headerlink" title="时间片轮转(Round Robin)算法"></a>时间片轮转(Round Robin)算法</h5><p>本算法主要用于微观调度，设计目标是提高资源利用率。其基本 思路是通过时间片轮转，提高进程并发性和响应 时间特性，从而提高资源利用率；</p><p>将系统中所有的就绪进程按照FCFS原则，排成 一个队列。 </p><p>每次调度时将CPU分派给队首进程，让其执行 一个时间片。时间片的长度从几个ms到几百ms 。 </p><p>在一个时间片结束时，发生时钟中断。 </p><p>调度程序据此暂停当前进程的执行，将其送到 就绪队列的末尾，并通过上下文切换执行当前 的队首进程。 </p><p>进程可以未使用完一个时间片，就出让CPU（ 如阻塞）。</p><p>时间片长度变化的影响 •过长－&gt;退化为FCFS算法，进程在一个时间片内都 执行完，响应时间长。 •过短－&gt;用户的一次请求需要多个时间片才能处理 完，上下文切换次数增加，响应时间长。 </p><p>对响应时间的要求：T(响应时间)=N(进程数目 )*q(时间片) </p><p>就绪进程的数目：数目越多，时间片越小 </p><p>系统的处理能力：应当使用户输入通常在一个 时间片内能处理完，否则使响应时间，平均周 转时间和平均带权周转时间延长</p><h5 id="优先级算法-Priority-Scheduling"><a href="#优先级算法-Priority-Scheduling" class="headerlink" title="优先级算法(Priority Scheduling)"></a>优先级算法(Priority Scheduling)</h5><p>本算法是平衡各进程对响应时间的要求。适用于作业调度和 进程调度，可分成抢先式和非抢先式</p><p>静态优先级：创建进程时就确定，直到进程终止前都不改变。通常是 一个整数。依据： •进程类型（系统进程优先级较高） •对资源的需求（对CPU和内存需求较少的进程，优先级较 高） •用户要求（紧迫程度和付费多少）</p><p>动态优先级：在创建进程时赋予的优先级，在进程运行过程中 可以自动改变，以便获得更好的调度性能。如： •在就绪队列中，等待时间延长则优先级提高，从而 使优先级较低的进程在等待足够的时间后，其优先 级提高到可被调度执行； •进程每执行一个时间片，就降低其优先级，从而一 个进程持续执行时，其优先级降低到出让CPU。</p><p>高响应比优先调度算法：响应比=(执行时间＋等待时间）/执行时间；等待时间相同，短作业优先 ；要求服务时间相同，优先权决定于等待时间，（ FCFS) ；长作业等待时间长，优先权提高</p><h5 id="多级队列算法-Multiple-level-Queue"><a href="#多级队列算法-Multiple-level-Queue" class="headerlink" title="多级队列算法(Multiple-level Queue)"></a>多级队列算法(Multiple-level Queue)</h5><p>本算法引入多个就绪队列，通过各队列的区别对待 ，达到一个综合的调度目标； •根据作业或进程的性质或类型的不同，将就绪队列再分为 若干个子队列。 •每个作业固定归入一个队列。 </p><p>不同队列可有不同的优先级、时间片长度、调度策 略等；在运行过程中还可改变进程所在队列。如： 系统进程、用户交互进程、批处理进程等。</p><h5 id="多级反馈队列算法-Round-Robin-with-Multiple-Feedback"><a href="#多级反馈队列算法-Round-Robin-with-Multiple-Feedback" class="headerlink" title="多级反馈队列算法(Round Robin with Multiple Feedback)"></a>多级反馈队列算法(Round Robin with Multiple Feedback)</h5><p>多级反馈队列算法时间片轮转算法和优先级算法的综合 和发展。优点： •为提高系统吞吐量和缩短平均周转时间而照顾短进程 •为获得较好的I/O设备利用率和缩短响应时间而照顾I/O 型进程 •不必估计进程的执行时间，动态调节</p><p>设置多个就绪队列，分别赋予不同的优先级，如逐级 降低，队列1的优先级最高。每个队列执行时间片的长 度也不同，规定优先级越低则时间片越长，如逐级加倍</p><p>新进程进入内存后，先投入队列1的末尾，按FCFS算法 调度；若按队列1一个时间片未能执行完，则降低投入 到队列2的末尾，同样按FCFS算法调度；如此下去，降 低到最后的队列，则按“时间片轮转”算法调度直到 完成。 </p><p>仅当较高优先级的队列为空，才调度较低优先级的队 列中的进程执行。如果进程执行时有新进程进入较高 优先级的队列，则抢先执行新进程，并把被抢先的进 程投入原队列的末尾</p><h4 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h4><p>死锁是指多个进程因竞争资源而造成的一种僵局（互相等待），若无外力作用，这些进程都将无法向前推进。例如，在某一个计算机系统中只有一台打印机和一台输入 设备，进程P1正占用输入设备，同时又提出使用打印机的请求，但此时打印机正被进程P2 所占用，而P2在未释放打印机之前，又提出请求使用正被P1占用着的输入设备。这样两个进程相互无休止地等待下去，均无法继续执行，此时两个进程陷入死锁状态。</p><p>产生原因</p><ol><li>系统资源的竞争</li><li>系统资源的竞争导致系统资源不足，以及资源分配不当，导致死锁。</li><li>进程运行推进顺序不合适</li><li>进程在运行过程中，请求和释放资源的顺序不当，会导致死锁。</li></ol><p>死锁的四个必要条件</p><ol><li>互斥条件：进程对于所分配到的资源具有排它性，即一个资源只能被一个进程占用，直到被该进程释放 </li><li>请求和保持条件：一个进程因请求被占用资源而发生阻塞时，对已获得的资源保持不放。 </li><li>不剥夺条件：任何一个资源在没被该进程释放之前，任何其他进程都无法对他剥夺占用 </li><li>循环等待条件：当发生死锁时，所等待的进程必定会形成一个环路（类似于死循环），造成永久阻塞。</li></ol><p>避免死锁：</p><ol><li>加锁顺序：当多个线程需要相同的一些锁，但是按照不同的顺序加锁，死锁就很容易发生。</li><li>加锁时限：另外一个可以避免死锁的方法是在尝试获取锁的时候加一个超时时间，这也就意味着在尝试获取锁的过程中若超过了这个时限该线程则放弃对该锁请求。若一个线程没有在给定的时限内成功获得所有需要的锁，则会进行回退并释放所有已经获得的锁，然后等待一段随机的时间再重试。这段随机的等待时间让其它线程有机会尝试获取相同的这些锁，并且让该应用在没有获得锁的时候可以继续运行</li><li>死锁检测：死锁检测是一个更好的死锁预防机制，它主要是针对那些不可能实现按序加锁并且锁超时也不可行的场景。</li></ol><p>死锁预防</p><p>我们可以通过破坏死锁产生的4个必要条件来 预防死锁，由于资源互斥是资源使用的固有特性是无法改变的。</p><ol><li>破坏不可剥夺条件：一个进程不能获得所需要的全部资源时便处于等待状态，</li><li>破坏请求与保持条件：第一种方法静态分配即每个进程在开始执行时申请他所需要的全部资源。第二种是动态分配即每个进程在申请所需要的资源时他本身不沾油系统资源</li><li>破坏循环等待条件：采用资源有序分配基本思想是将系统中的所有资源顺序编号，将紧缺的、稀少的采用较大的编号吗，在申请资源时必须按照编号的顺序进行，一个进程只有在获得较小编号的资源才能申请较大编号的资源。</li></ol><h3 id="设备管理"><a href="#设备管理" class="headerlink" title="设备管理"></a>设备管理</h3><h5 id="外设管理目的"><a href="#外设管理目的" class="headerlink" title="外设管理目的"></a>外设管理目的</h5><ol><li>提高效率：提高I/O访问效率，匹配CPU和多种不同处理速度 的外设</li><li>方便使用：方便用户使用，对不同类型的设备统一使用方法 ，协调对设备的并发使用</li><li>方便控制：方便OS内部对设备的控制：增加和删除设备，适 应新的设备类型 </li></ol><h5 id="外设管理功能"><a href="#外设管理功能" class="headerlink" title="外设管理功能"></a>外设管理功能</h5><ol><li>提供设备使用的用户接口：命令接口和编程接口。 </li><li>设备分配和释放：使用设备前，需要分配设备和相应的通道 、控制器。 </li><li>设备的访问和控制：包括并发访问和差错处理。 </li><li>I/O缓冲和调度：目标是提高I/O访问效率</li></ol><h4 id="I-O控制技术"><a href="#I-O控制技术" class="headerlink" title="I/O控制技术"></a>I/O控制技术</h4><h5 id="程序控制I-O-programmed-I-O"><a href="#程序控制I-O-programmed-I-O" class="headerlink" title="程序控制I/O(programmed I/O)"></a>程序控制I/O(programmed I/O)</h5><p>I/O操作由程序发起，并等待操作完成。数据的每次读 写通过CPU。 </p><p>缺点：在外设进行数据处理时，CPU只能等待。</p><h5 id="中断驱动方式-interrupt-driven-I-O"><a href="#中断驱动方式-interrupt-driven-I-O" class="headerlink" title="中断驱动方式(interrupt-driven I/O)"></a>中断驱动方式(interrupt-driven I/O)</h5><p>I/O操作由程序发起，在操作完成时（如数据可读或 已经写入）由外设向CPU发出中断，通知该程序。 数据的每次读写通过CPU。 </p><p>优点：在外设进行数据处理时，CPU不必等待，可 以继续执行该程序或其他程序。 </p><p>缺点：CPU每次处理的数据量少（通常不超过几个 字节），只适于数据传输率较低的设备。</p><h5 id="直接存储访问方式-DMA-Direct-Memory-Access"><a href="#直接存储访问方式-DMA-Direct-Memory-Access" class="headerlink" title="直接存储访问方式(DMA, Direct Memory Access)"></a>直接存储访问方式(DMA, Direct Memory Access)</h5><p>由程序设置DMA控制器中的若干寄存器值（如内存始址 ，传送字节数），然后发起I/O操作，而后者完成内存 与外设的成批数据交换，在操作完成时由DMA控制器向 CPU发出中断。 </p><p>优点：CPU只需干预I/O操作的开始和结束，而其中的 一批数据读写无需CPU控制，适于高速设备。</p><h4 id="阻塞IO和非阻塞IO"><a href="#阻塞IO和非阻塞IO" class="headerlink" title="阻塞IO和非阻塞IO"></a>阻塞IO和非阻塞IO</h4><p>在进行网络编程时，我们常常见到同步(Sync)/异步(Async)，阻塞(Block)/非阻塞(Unblock)四种调用方式：</p><p>同步：所谓同步，就是在发出一个功能调用时，在没有得到结果之前，该调用就不返回。也就是必须一件一件事做,等前一件做完了才能做下一件事。<br>例如普通B/S模式（同步）：提交请求-&gt;等待服务器处理-&gt;处理完毕返回 这个期间客户端浏览器不能干任何事</p><p>异步：异步的概念和同步相对。当一个异步过程调用发出后，调用者不能立刻得到结果。实际处理这个调用的部件在完成后，通过状态、通知和回调来通知调用者。<br>例如 ajax请求（异步）: 请求通过事件触发-&gt;服务器处理（这是浏览器仍然可以作其他事情）-&gt;处理完毕</p><p>阻塞：阻塞调用是指调用结果返回之前，当前线程会被挂起（线程进入非可执行状态，在这个状态下，cpu不会给线程分配时间片，即线程暂停运行）。函数只有在得到结果之后才会返回。<br>有人也许会把阻塞调用和同步调用等同起来，实际上他是不同的。对于同步调用来说，很多时候当前线程还是激活的，只是从逻辑上当前函数没有返回而已。 例如，我们在socket中调用recv函数，如果缓冲区中没有数据，这个函数就会一直等待，直到有数据才返回。而此时，当前线程还会继续处理各种各样的消息。<br>快递的例子：比如到你某个时候到A楼一层（假如是内核缓冲区）取快递，但是你不知道快递什么时候过来，你又不能干别的事，只能死等着。但你可以睡觉（进程处于休眠状态），因为你知道快递把货送来时一定会给你打个电话（假定一定能叫醒你）。</p><p>非阻塞：非阻塞和阻塞的概念相对应，指在不能立刻得到结果之前，该函数不会阻塞当前线程，而会立刻返回。<br>还是等快递的例子：如果用忙轮询的方法，每隔5分钟到A楼一层(内核缓冲区）去看快递来了没有。如果没来，立即返回。而快递来了，就放在A楼一层，等你去取。<br>对象的阻塞模式和阻塞函数调用<br>对象是否处于阻塞模式和函数是不是阻塞调用有很强的相关性，但是并不是一一对应的。阻塞对象上可以有非阻塞的调用方式，我们可以通过一定的API去轮询状 态，在适当的时候调用阻塞函数，就可以避免阻塞。而对于非阻塞对象，调用特殊的函数也可以进入阻塞调用。函数select就是这样的一个例子。</p><ol><li>同步，就是我调用一个功能，该功能没有结束前，我死等结果。</li><li>异步，就是我调用一个功能，不需要知道该功能结果，该功能有结果后通知我（回调通知）</li><li>阻塞，就是调用我（函数），我（函数）没有接收完数据或者没有得到结果之前，我不会返回。</li><li>非阻塞，  就是调用我（函数），我（函数）立即返回，通过select通知调用者<br>同步IO和异步IO的区别就在于：数据拷贝的时候进程是否阻塞！<br>  阻塞IO和非阻塞IO的区别就在于：应用程序的调用是否立即返回！</li></ol><h4 id="同步IO和异步IO的区别"><a href="#同步IO和异步IO的区别" class="headerlink" title="同步IO和异步IO的区别"></a>同步IO和异步IO的区别</h4><p>Linux系统中，所有的设备读写都可以看做文件的读写来操作，对文件的读写一般要经过内核态和用户态的切换，正因为有了切换才导致IO有同步和异步的说法。</p><p>通常IO分为两种：来自网络的IO；来自文件或设备的IO</p><p>阻塞IO和非阻塞IO的区别在于：应用程序的调用是否立即返回。</p><p>如何区别是同步IO还是异步IO？数据拷贝的时候是否阻塞；当请求被阻塞，就是同步IO，否则就是异步IO。</p><p>同步IO的特点：</p><ol><li>同步IO指的是是用户进程触发IO操作并等待或者轮询的去查看IO操作是否就绪。</li><li>同步IO的执行者是IO操作的发起者，同步IO需要发起者进行内核态到用户态的数据拷贝过程，所以这里必须阻塞。</li></ol><p>异步IO的特点：</p><ol><li>异步IO是指用户进程触发IO操作以后就立即返回，继续做自己的事情，而当IO操作已经完成的时候会得到IO完成的通知。</li><li>异步IO的执行者是内核线程，内核线程会完成数据从内核态到用户态的拷贝，没有阻塞。</li></ol><h3 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h3><h5 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h5><p>扇区（sector） 盘片被分成许多扇形的区域 </p><p>磁道（track） 盘片上以盘片中心为圆心，不同半径的同心圆。 </p><p>柱面（cylinder) •硬盘中，不同盘片相同半径的磁道所组成的圆柱。 </p><p>每个磁盘有两个面，每个面都有一个磁头(head)。</p><h5 id="磁盘调度算法"><a href="#磁盘调度算法" class="headerlink" title="磁盘调度算法"></a>磁盘调度算法</h5><p>先来先服务</p><p>最短寻道时间优先</p><h5 id="提高磁盘I-O速度"><a href="#提高磁盘I-O速度" class="headerlink" title="提高磁盘I/O速度"></a>提高磁盘I/O速度</h5><p>磁盘高速缓存的形式 •独立缓存 •以虚拟内存为缓存 </p><p>数据交付 •直接交付 •指针交付 </p><p>置换算法 </p><p>周期性写回 •sync</p><h3 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h3><p>文件系统是指操作系统中与文件管理有关的那部分软件 和被管理的文件以及实施管理所需要的一些数据结构的总体。</p><p>目的：</p><ol><li>方便的文件访问和控制：以符号名称作为文件标识， 便于用户使用； </li><li>并发文件访问和控制：在多道程系统中支持对文件的 并发访问和控制； </li><li>统一的用户接口：在不同设备上提供同样的接口，方 便用户操作和编程； </li><li>多种文件访问权限：在多用户系统中的不同用户对同 一文件会有不同的访问权限； </li><li>优化性能：存储效率、检索性能、读写性能； </li><li>差错恢复：能够验证文件的正确性，并具有一定的差 错恢复能力；</li></ol><p>操作系统为系统管理者和用户提供了对文件的透明存 取（按名存取） ，不必了解文件存放的物理机制和查找方法，只需给定一 个代表某段程序或数据的文件名称，文件系统就会自动 地完成对给定文件名称相对应的文件的有关操作</p><h3 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h3><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"> ls -l 等同于 ll显示当前目录下文件的属性</span><br><span class="line"> ls -d仅列出目录</span><br><span class="line"> ls -al显示当前目录下所有文件详细信息，包括隐藏文件</span><br><span class="line"> cd [~] [-]切换目录 [~目前用户身份的主目录] [-前一个工作目录]</span><br><span class="line"> chgrp 用户组 文件名修改文件的用户组</span><br><span class="line"> chown 用户名 文件名修改文件的所有者</span><br><span class="line"> chmod 770 文件名修改文件的权限</span><br><span class="line"> cp A B复制文件A为B</span><br><span class="line"> rm A rm -r A删除A</span><br><span class="line">删除非空目录或文件A</span><br><span class="line"> su root切换为root用户</span><br><span class="line"> mkdir/rmdir新建目录、删除一个空目录</span><br><span class="line"> mkdir -p test1/test2创建多层空目录</span><br><span class="line"> mkdir -m 777 test2创建目录时设定权限</span><br><span class="line"> touch新建空的文件</span><br><span class="line"> man 命令查询命令详细解释</span><br><span class="line"> bzip2压缩文件</span><br><span class="line"> bunzip2解压文件</span><br><span class="line"> nano 文本编辑器</span><br><span class="line"> pwd显示当前目录</span><br><span class="line"> echo打印</span><br><span class="line"> mv 文件名 目标位置移动文件</span><br><span class="line"> mv A B重命名A为B（目录或文件都可以）</span><br><span class="line"> PATH=&quot;$PATH&quot;:/root添加/root到环境变量中</span><br><span class="line"> vim进入后按i可以输入</span><br><span class="line">退出按ESC然后:wq</span><br><span class="line">不保存退出 按ESC 然后:q!</span><br><span class="line">一般模式中：</span><br><span class="line">/word 向下寻找word字符串</span><br><span class="line">?word 向上寻找word字符串</span><br><span class="line">n 重复前一个查找 N 与 n反向重复查找</span><br><span class="line"> umask -S查看目前用户在新建文件或目录时候的默认权限</span><br><span class="line"> find搜索文件，很复杂，很多参数</span><br><span class="line"> tar -jcv -f 名字.tar.bz2 A压缩“A”变成“名字.tar.bz2”</span><br><span class="line"> tar -jtv -f 名字.tar.bz2查询</span><br><span class="line"> tar -jxv -f 名字.tar.bz2 [-C 指定目录]在当前目录解压 【-C 在指定目录解压】</span><br><span class="line"> groupadd A新建用户组A</span><br><span class="line"> groupdel A删除用户组A</span><br><span class="line"> groups [A]查看自己所在的用户组，【查看A所在的用户组】</span><br><span class="line">usermod 该命令有很多参数，可以修改账号各个属性</span><br><span class="line">usermod -G XXX B新建XXX用户组为B的支持用户组，B原来的用户组仍有（支持用户组不是当前用户组，有效用户组才是当前用户组）</span><br><span class="line"> newgrp B切换当前用户的有效用户组为B</span><br><span class="line"> useradd A新增用户A（必须要设置密码才能用）</span><br><span class="line"> useradd -u 666 -g B -c &quot;XXX&quot; A新增用户A，用户组为B，UID为666，账号全名是XXX</span><br><span class="line"> passwd A给用户A设置密码，若没有A，则是给自己设置密码，密码需要超过8个字符</span><br><span class="line"> echo &quot;XXX&quot; | passwd --stdin A设置用户A的密码为XXX</span><br><span class="line"> passwd -l A使账号A密码失效（让其无法登陆）</span><br><span class="line"> passwd -u A使账号A密码恢复</span><br><span class="line"> passwd -S A查询账号A密码状态</span><br><span class="line"> userdel -r A删除用户A，连同用户主文件夹一起删除（慎用）</span><br><span class="line"> setfacl -m u:A:rwx B设置账户A针对文件B的权限为rwx（针对单独用户设置权限）</span><br><span class="line"> setfacl -m g:A:rx B设置用户组A针对文件B的权限为rx</span><br><span class="line"> setfacl -b A消除文件A的ACL权限</span><br><span class="line"> getfacl B查询文件B的权限详情</span><br><span class="line"> ctrl+c终止当前程序运行</span><br><span class="line">ctrl+alt+F1切回图形界面</span><br><span class="line">ctrl+alt+F2-F7切回命令行界面</span><br><span class="line"> yum install XXXCentOS的apt-get install XXX</span><br><span class="line"> which XXX检测某个XXX应用是否安装</span><br><span class="line"> reboot重启服务器</span><br><span class="line"> ifconfig查看Linux（包括本地虚拟机的Linux）的IP地址</span><br><span class="line"> shift+PgUp\PgDn命令行界面上下滚动</span><br><span class="line">启动命令 &amp;在后台启动，不占用命令窗口，比如启动Redis的时候 ./redis-server &amp;</span><br><span class="line"> kill -9 PID关闭服务，比如某程序PID=6817 kill -9 6817 就关闭了这个服务</span><br><span class="line"> top查看当前系统负载情况，如果是单核CPU 那么load average低于1说明没有线程等待</span><br><span class="line">netstat -nap| grep 5672查看端口号5672是否被监听</span><br><span class="line">free -m查看内存使用情况</span><br><span class="line"> ps -A显示所有运行中的进程</span><br><span class="line"> netstat -nultp查看当前正在使用的端口情况</span><br><span class="line">God status查看当前部署的服务</span><br><span class="line"> god stop 服务名停止服务</span><br><span class="line"> scp jinsong@IP地址:/路径     ./复制远程主机上的文件到当前目录</span><br><span class="line"> pwd显示当前路径</span><br></pre></td></tr></table></figure><h5 id="top命令"><a href="#top命令" class="headerlink" title="top命令"></a>top命令</h5><p>终端输入top之后，就是下面这样啦</p><p><img src="2019072400007.png" alt="4133"></p><p>前面是参数，后面就是进程和进程号之类的了</p><p>第一行：当前时间，系统运行时间，登录用户数量，平均负载（分别在5，10，15分钟内）<br>这里是：早上9：37：19，系统运行了8分钟，1一个用户</p><p>第二行：显示了系统的进程总数，后面是相应的状态下的进程<br>这里是：一共209个进程，1个是running状态，208个sleeping状态，0个stopped，0个zombie<br>关于进程的状态，这里解释一下zombie：这个是僵尸进程，就是，这个进程其实已经结束了，它仅仅在进程列表中保留一个位置，记载该进程的状态信息等，僵尸进程不再占有内存空间，没有可执行程序，也不能被调用。。这个进程中存储着进程的各种信息，占用cpu啊，运行时间之类的。。。这个进程会被其父进程收集它的信息。。。</p><p>第三行：就是cpu的各种信息了<br>参数说明如下：<br>us：用户空间占cpu百分比<br>sy：内核空间占cpu百分比<br>ni：用户进程空间内改变过优先级的进程占用cpu百分比<br>id：空闲cpu百分比<br>wa：等待输入输出的cpu时间百分比<br>hi：硬中断（处理硬件中断的cpu时间）<br>si：软中断（处理软件中断的cpu时间）<br>第四行、第五行：内存使用<br>第一行：物理内存的使用，第二行：虚拟内存（交换空间）的使用。<br>每一行的后面四个参数是：总的内存，已经使用的内存，空闲内存，缓冲内存<br>第六行：表头，具体解释如下：<br>PID： 进程ID进程的唯一标识符<br>USER：进程ID 进程的唯一标识符<br>PR：进程调度优先级，一个拥有更高进程优先级的进程拥有更大的机率得到处理器的处理。，”tr”值代表这些进程运行在实时态<br>NI：进程的nice值（优先值）。越小意味着越高的优先级。<br>VIRT：系统使用的虚拟内存<br>RES：驻留内存大小，驻留内存是任务使用的非交换物理内存大小<br>SHR：是进程使用的共享内存<br>S：进程状态：<br>D：不可中断的睡眠态<br>R：运行态<br>S：睡眠态<br>T：被跟踪或已停止<br>Z：僵尸态<br>%CPU 自从上一次更新时到现在任务所使用的CPU时间百分比。<br>%MEM 进程使用的可用物理内存百分比<br>TIME+ 任务启动后到现在所使用的全部CPU时间，精确到百分之一秒。<br>COMMAND 进程所使用的命令。</p><h5 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h5><p>ps命令是最基本的进程查看命令，使用该命令可以确定有哪些进程正在运行和运行的状态、进程是否结束、进程有没有僵尸、哪些进程占用了过多的资源等等。ps是显示瞬间进程的状态，并不动态连续；如果想对进程进行实时监控应该用top命令。</p><p>参数：<br>-A ：所有的进程均显示出来，与 -e 具有同样的效用；<br>-a ： 显示现行终端机下的所有进程，包括其他用户的进程；<br>-u ：以用户为主的进程状态 ；<br>x ：通常与 a 这个参数一起使用，可列出较完整信息。</p><p>输出格式规划：<br>l ：较长、较详细的将该PID 的的信息列出；<br>j ：工作的格式 (jobs format)<br>-f ：做一个更为完整的输出</p><h5 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h5><p>netstat命令用于显示与IP、TCP、UDP和ICMP协议相关的统计数据，一般用于检验本机各端口的网络连接情况。netstat是在内核中访问网络及相关信息的程序，它能提供TCP连接，TCP和UDP监听，进程内存管理的相关报告。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">列出所有端口情况</span><br><span class="line">[root@xiesshavip002 ~]# netstat -a      # 列出所有端口</span><br><span class="line">[root@xiesshavip002 ~]# netstat -at     # 列出所有TCP端口</span><br><span class="line">[root@xiesshavip002 ~]# netstat -au     # 列出所有UDP端口</span><br><span class="line"></span><br><span class="line">列出所有处于监听状态的 Sockets</span><br><span class="line">[root@xiesshavip002 ~]# netstat -l   # 只显示监听端口</span><br><span class="line">[root@xiesshavip002 ~]# netstat -lt  # 显示监听TCP端口</span><br><span class="line">[root@xiesshavip002 ~]# netstat -lu  # 显示监听UDP端口</span><br><span class="line">[root@xiesshavip002 ~]# netstat -lx  # 显示监听UNIX端口</span><br><span class="line"></span><br><span class="line">显示每个协议的统计信息</span><br><span class="line">[root@xiesshavip002 ~]# netstat -s     # 显示所有端口的统计信息</span><br><span class="line">[root@xiesshavip002 ~]# netstat -st    # 显示所有TCP的统计信息</span><br><span class="line">[root@xiesshavip002 ~]# netstat -su    # 显示所有UDP的统计信息</span><br><span class="line"></span><br><span class="line">显示 PID 和进程名称</span><br><span class="line">[root@xiesshavip002 ~]# netstat -p</span><br><span class="line"></span><br><span class="line">显示核心路由信息</span><br><span class="line">[root@xiesshavip002 ~]# netstat -r</span><br><span class="line">Kernel IP routing table</span><br><span class="line">Destination     Gateway         Genmask         Flags   MSS Window  irtt Iface</span><br><span class="line">default         gateway         0.0.0.0         UG        0 0          0 eth0</span><br><span class="line">192.168.130.0   0.0.0.0         255.255.255.0   U         0 0          0 eth0</span><br><span class="line">[root@xiesshavip002 ~]# netstat -rn   # 显示数字格式，不查询主机名称</span><br><span class="line">Kernel IP routing table</span><br><span class="line">Destination     Gateway         Genmask         Flags   MSS Window  irtt Iface</span><br><span class="line">0.0.0.0         192.168.130.1   0.0.0.0         UG        0 0          0 eth0</span><br><span class="line">192.168.130.0   0.0.0.0         255.255.255.0   U         0 0          0 eth0</span><br></pre></td></tr></table></figure><h5 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h5><p>awk是一个强大的文本分析工具。</p><p>相对于grep的查找，sed的编辑，awk在其对数据分析并生成报告时，显得尤为强大。简单来说awk就是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理。</p><p>使用方法：awk ‘{patten + action}’ {filename}</p><p>尽管操作可能会很复杂，但语法总是这样，其中 pattern 表示 AWK 在数据中查找的内容，而 action 是在找到匹配内容时所执行的一系列命令。花括号（{}）不需要在程序中始终出现，但它们用于根据特定的模式对一系列指令进行分组。 pattern就是要表示的正则表达式，用斜杠括起来。</p><p>awk语言的最基本功能是在文件或者字符串中基于指定规则浏览和抽取信息，awk抽取信息后，才能进行其他文本操作。完整的awk脚本通常用来格式化文本文件中的信息。</p><p>通常，awk是以文件的一行为处理单位的。awk每接收文件的一行，然后执行相应的命令，来处理文本。</p><h5 id="find"><a href="#find" class="headerlink" title="find"></a>find</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">查找文件</span><br><span class="line">find ./ -type f</span><br><span class="line"></span><br><span class="line">查找目录</span><br><span class="line">find ./ -type d</span><br><span class="line"></span><br><span class="line">查找名字为test的文件或目录</span><br><span class="line">find ./ -name test</span><br><span class="line"></span><br><span class="line">查找名字符合正则表达式的文件,注意前面的‘.*’(查找到的文件带有目录)</span><br><span class="line">find ./ -regex .*so.*\.gz</span><br><span class="line"></span><br><span class="line">查找文件名匹配*.c的文件</span><br><span class="line">find ./ -name *.c</span><br><span class="line"></span><br><span class="line">查找文件更新日时在距现在时刻二天以内的文件</span><br><span class="line">find ./ -mtime -2</span><br><span class="line"></span><br><span class="line">查找文件更新日时在距现在时刻二天以上的文件</span><br><span class="line">find ./ -mtime +2</span><br><span class="line"></span><br><span class="line">查找文件更新日时在距现在时刻一天以上二天以内的文件</span><br><span class="line">find ./ -mtime 2</span><br><span class="line"></span><br><span class="line">查找文件更新日时在距现在时刻二分以内的文件</span><br><span class="line">find ./ -mmin -2</span><br><span class="line"></span><br><span class="line">查找文件更新日时在距现在时刻二分以上的文件</span><br><span class="line">find ./ -mmin +2</span><br><span class="line"></span><br><span class="line">查找文件更新日时在距现在时刻一分以上二分以内的文件</span><br><span class="line">find ./ -mmin 2</span><br><span class="line"></span><br><span class="line">查找空文件或空目录</span><br><span class="line">find ./ -empty</span><br><span class="line"></span><br><span class="line">查找权限为644的文件或目录(需完全符合)</span><br><span class="line">find ./ -perm 664</span><br><span class="line"></span><br><span class="line">查找用户/组权限为读写，其他用户权限为读(其他权限不限)的文件或目录</span><br><span class="line">find ./ -perm -664</span><br><span class="line"></span><br><span class="line">查找用户有写权限或者组用户有写权限的文件或目录</span><br><span class="line">find ./ -perm /220</span><br><span class="line">find ./ -perm /u+w,g+w</span><br><span class="line">find ./ -perm /u=w,g=w</span><br><span class="line"></span><br><span class="line">查找所有者权限有读权限的目录或文件</span><br><span class="line">find ./ -perm -u=r</span><br><span class="line"></span><br><span class="line">查找用户组权限有读权限的目录或文件</span><br><span class="line">find ./ -perm -g=r</span><br><span class="line"></span><br><span class="line">查找其它用户权限有读权限的目录或文件</span><br><span class="line">find ./ -perm -o=r</span><br><span class="line"></span><br><span class="line">查找所有者为lzj的文件或目录</span><br><span class="line">find ./ -user lzj</span><br><span class="line"></span><br><span class="line">查找组名为gname的文件或目录</span><br><span class="line">find ./ -group gname</span><br><span class="line"></span><br><span class="line">查找文件的用户ID不存在的文件</span><br><span class="line">find ./ -nouser</span><br><span class="line"></span><br><span class="line">查找文件的组ID不存在的文件</span><br><span class="line">find ./ -nogroup</span><br><span class="line"></span><br><span class="line">查找文件size小于10个字节的文件或目录</span><br><span class="line">find ./ -size -10c</span><br><span class="line"></span><br><span class="line">查找文件size等于10个字节的文件或目录</span><br><span class="line">find ./ -size 10c</span><br><span class="line"></span><br><span class="line">查找文件size大于10个字节的文件或目录</span><br><span class="line">find ./ -size +10c</span><br><span class="line"></span><br><span class="line">查找文件size小于10k的文件或目录</span><br><span class="line">find ./ -size -10k</span><br><span class="line"></span><br><span class="line">查找文件size小于10M的文件或目录</span><br><span class="line">find ./ -size -10M</span><br><span class="line"></span><br><span class="line">查找文件size小于10G的文件或目录</span><br><span class="line">find ./ -size -10G</span><br></pre></td></tr></table></figure><h5 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h5><p>Linux系统中grep命令是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹配的行打印出来。</p><p>使用格式：grep [OPTIONS] PATTERN [FILE…]</p><p>例如：grep -i “s” /etc/passwd</p><p>常用参数：<br>-c： 打印符合要求的行数（数目）<br>-i ：忽略大小写<br>-n：输出行和行号<br>-v：打印不符合要求的行，即反选<br>-A：后跟数字(有无空格都可以)，例如-A2 表示打印筛选行及前2行<br>-B：后跟数字，例如-B2表示打印筛选行及后2行<br>-C：后跟数字，例如-C2表示打印筛选行及前后各2行<br>-o：只打印符合要求的内容，而非整行</p><h5 id="wc"><a href="#wc" class="headerlink" title="wc"></a>wc</h5><p>wc命令的功能为统计指定文件中的字节数、字数、行数, 并将统计结果显示输出。 </p><p>语法：wc [选项] 文件… </p><p>说明：该命令统计给定文件中的字节数、字数、行数。如果没有给出文件名，则从标准输入读取。wc同时也给出所有指定文件的总统计数。字是由空格字符区分开的最大字符串。 </p><p>该命令各选项含义如下： </p><ul><li>c 统计字节数。 </li><li>l 统计行数。 </li><li>w 统计字数。<br>这些选项可以组合使用。<br>输出列的顺序和数目不受选项的顺序和数目的影响。总是按下述顺序显示并且每项最多一列。<br>行数、字数、字节数、文件名<br>如果命令行中没有文件名，则输出中不出现文件名。<br>统计指定文件中的字节数、字数、行数，并将统计结果显示输出。</li></ul><h5 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h5><p>sed是一个很好的文件处理工具，本身是一个管道命令，主要是以行为单位进行处理，可以将数据行进行替换、删除、新增、选取等特定工作，下面先了解一下sed的用法</p><p>sed命令行格式为：<br>    sed [-nefri] ‘command’ 输入文本        </p><p>常用选项：<br>       -n∶使用安静(silent)模式。在一般 sed 的用法中，所有来自 STDIN的资料一般都会被列出到萤幕上。但如果加上 -n 参数后，         则只有经过sed 特殊处理的那一行(或者动作)才会被列出来。<br>      -e：直接在指令列模式上进行 sed 的动作编辑；<br>      -f：直接将 sed 的动作写在一个档案内， -f filename 则可以执行 filename 内的sed 动作；<br>     -r：sed 的动作支援的是延伸型正规表示法的语法。(预设是基础正规表示法语法)<br>      -i：直接修改读取的档案内容，而不是由萤幕输出。       </p><p>常用命令：<br>       a：新增，a 的后面可以接字串，而这些字串会在新的一行出现(目前的下一行)～<br>     c：取代，c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行！<br>     d：删除，因为是删除啊，所以 d 后面通常不接任何咚咚；<br>       i：插入， i 的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)；<br>      p：列印，亦即将某个选择的资料印出。通常 p 会与参数 sed -n 一起运作～<br>    s：取代，可以直接进行取代的工作哩！通常这个 s 的动作可以搭配正规表示法！</p><h5 id="head和tail"><a href="#head和tail" class="headerlink" title="head和tail"></a>head和tail</h5><p>head [option] …filename…<br>    选项：-n num  显示文件的前num行。<br>         -c num  显示文件的前num个字节。<br>         -c -n   显示文件除了最后n个字节的其他内容。<br>          -q      隐藏文件名。<br>          -v      显示文件名。<br>tail [option] …filename…<br>    选项：-n num 显示文件的后num行。<br>         -r num 逆序显示filename最后10行。<br>         -f 检视filename的尾部内容（相当于-n 10）。</p><h5 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h5><p>基本正则表达式：Basic REGEXP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">元字符描述</span><br><span class="line"> ？匹配任意单个字符</span><br><span class="line">*匹配任意字符</span><br><span class="line">[]匹配指定范围内的任意单个字符</span><br><span class="line">[^]匹配指定范围外的任意单个字符</span><br><span class="line">[:lower:]小写字母</span><br><span class="line">[:upper:]大写字母</span><br><span class="line">[:alpha:]所有字母</span><br><span class="line">[:digit:]数字</span><br><span class="line">[:alnum:]所有数字和字母</span><br><span class="line">[:punct:]标点符号</span><br><span class="line">[:space:]空白字符</span><br><span class="line">\?匹配其前面的字符1次或0次</span><br><span class="line">\&#123;m,n\&#125;匹配其前面的字符至少m次，至多n次</span><br><span class="line">^铆定行首，此字符后面的任意内容必须出现在行首</span><br><span class="line">$铆定行尾，此字符前面的任意内容必须出现在行尾</span><br><span class="line">^$表示空白行</span><br><span class="line">\&lt;或\b铆定词首，其后面的任意字符必须作为单词的首部出现</span><br><span class="line">\&gt;或\b铆定词尾，其前面的任意字符必须作为单词的尾部出现</span><br><span class="line">\(\)分组</span><br><span class="line">\(ab\)*ab作为一个整体，可以出现任意次</span><br><span class="line">\(ab\).*\1引用第一个左括号以及与之对应的右括号所包括的所有内容</span><br><span class="line">\(ab\).*\2引用第二个左括号以及与之对应的右括号所包括的所有内容</span><br></pre></td></tr></table></figure><p>扩展正则表达式：Extended REGEXP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">字符匹配</span><br><span class="line">.匹配任意单个字符</span><br><span class="line">[]匹配指定范围内的任意单个字符</span><br><span class="line">[^]匹配指定范围外的任意单个字符</span><br><span class="line">次数匹配</span><br><span class="line">*匹配其前字符任意次</span><br><span class="line">?匹配其前字符0次或1次</span><br><span class="line">+匹配其前字符至少1次，类似于基本正则表达式\&#123;1,\&#125;</span><br><span class="line">&#123;m,n&#125;匹配其前面的字符至少m次，至多n次</span><br><span class="line">位置铆定</span><br><span class="line">^行首</span><br><span class="line">$行尾</span><br><span class="line">\&lt;或\b词首</span><br><span class="line">\&gt;或\b词尾</span><br><span class="line">分组</span><br><span class="line">().*\1\2\3 </span><br><span class="line">或者</span><br><span class="line">|or  a|b ，a或者b ，有一个就行</span><br><span class="line">C|cat--&gt; C或cat</span><br><span class="line">(C|c)at--&gt;Cat或cat</span><br></pre></td></tr></table></figure><h5 id="如何查找出现频率最高的100个IP地址"><a href="#如何查找出现频率最高的100个IP地址" class="headerlink" title="如何查找出现频率最高的100个IP地址"></a>如何查找出现频率最高的100个IP地址</h5><p>查看日志中访问次数最多的前10个IP<br>cat access_log | cut –d  ‘ ’  –f 1 | sort | uniq –c | sort –nr | awk ‘{print $0}’ | head –n 100 | less</p><p>查看日志中出现100次以上的IP<br>cat access_log | cut –d ‘ ’ –f 1 |sort |uniq -c | awk ‘{if($1&gt;100) print $0}’ | sort –nr | less</p><h5 id="linux如何统计文件中某个字符串出现的频率"><a href="#linux如何统计文件中某个字符串出现的频率" class="headerlink" title="linux如何统计文件中某个字符串出现的频率"></a>linux如何统计文件中某个字符串出现的频率</h5><ol><li>grep+wc<br>grep –o targetStr finename | wc –l     #单个字符串<pre><code>grep –o ‘targetStr1\|targetStr2’ finename | wc –l      #多个字符串</code></pre></li><li>awk<br>awk –v RS=”@#$j” ‘{print gsub(/targetstr/,”$”}’ filename</li></ol><h5 id="linux启动的第一个进程"><a href="#linux启动的第一个进程" class="headerlink" title="linux启动的第一个进程"></a>linux启动的第一个进程</h5><p>init进程是内核启动的第一个进程，它是后续进程的发起者。</p><p>内核启动init进程的过程如下：</p><ol><li>打开标准输入、标准输出、标准错误文件。</li><li>如果radmdisk_execute_command指定了要运行的程序，则启动它。</li><li>如果excute_command指定了要运行的程序，则启动它。</li><li>依次尝试执行/sbin/init、/etc/init、/bin/init、/bin/sh。</li></ol><h5 id="linux查看端口占用"><a href="#linux查看端口占用" class="headerlink" title="linux查看端口占用"></a>linux查看端口占用</h5><ol><li>lsof –i            #查看所有的服务端口。</li><li>lsof –i:端口号      #查看占用端口</li><li>netstat –a        #查看所有的服务端口。</li><li>netstat –an | grep 端口号       #检验下是不是已经打开了某端口。</li></ol><h5 id="linux查看CPU和内存使用"><a href="#linux查看CPU和内存使用" class="headerlink" title="linux查看CPU和内存使用"></a>linux查看CPU和内存使用</h5><ol><li>ps命令可以实时的现实各个进程的内存使用情况。</li><li>top命令提供了实时的运行中的程序的资源使用统计。    </li><li>atop命令是一个终端环境的监控命令。</li><li>/proc/meminfo查看RAM使用情况最简单的方法是通过查看/proc/meminfo文件。</li><li>free命令是一个快速查看内存使用情况的方法，它是对/proc/meminfo收集到的信息的一个概述。    </li></ol><h5 id="Linux查看系统负载命令"><a href="#Linux查看系统负载命令" class="headerlink" title="Linux查看系统负载命令"></a>Linux查看系统负载命令</h5><ol><li>top</li><li>uptime</li><li>w</li><li>vmstat</li></ol><h5 id="Linux调试程序"><a href="#Linux调试程序" class="headerlink" title="Linux调试程序"></a>Linux调试程序</h5><ol><li>printf语句。</li><li>查询(cpu信息，内存容量)。</li><li>跟踪工具- strace的和ltrace是两个在Linux中用来追踪程序的执行细节的跟踪工具。</li><li>GDB-来自自由软件基金会的调试器。当被调试的程序运行时，它给用户控制权去执行各种动作。比如:<br>启动程序<br>停在指定位置<br>停在指定的条件<br>检查所需信息<br>改变程序中的数据。<br>你也可以将一个崩溃的程序coredump附着到GDB并分析故障的原因。</li></ol><h5 id="Linux硬链接和软连接"><a href="#Linux硬链接和软连接" class="headerlink" title="Linux硬链接和软连接"></a>Linux硬链接和软连接</h5><p>硬链接总结：（类似于shared_ptr智能指针）</p><ol><li>具有相同inode（索引节点）号的多个文件互为硬链接文件；</li><li>删除硬链接文件或者删除源文件任意之一，文件实体并未被删除；</li><li>只有删除了源文件和所有对应的硬链接文件，文件实体才会被删除；</li><li>硬链接文件是文件的另一个入口；</li><li>可以通过给文件设置硬链接文件来防止重要文件被误删；</li><li>创建硬链接命令 ln 源文件 硬链接文件；</li><li>硬链接文件是普通文件，可以用rm删除；</li><li>对于静态文件（没有进程正在调用），当硬链接数为0时文件就被删除。注意：如果有进程正在调用，则无法删除或者即使文件名被删除但空间不会释放。</li></ol><p>软连接总结：</p><ol><li>软链接类似windows系统的快捷方式；</li><li>软链接里面存放的是源文件的路径，指向源文件；</li><li>删除源文件，软链接依然存在，但无法访问源文件内容；</li><li>软链接失效时一般是白字红底闪烁；</li><li>创建软链接命令 ln -s 源文件 软链接文件；</li><li>软链接和源文件是不同的文件，文件类型也不同，inode号也不同；</li><li>软链接的文件类型是“l”，可以用rm删除。</li></ol><h5 id="linux文件系统"><a href="#linux文件系统" class="headerlink" title="linux文件系统"></a>linux文件系统</h5><p>网络文件系统：如 nfs、cifs 等；<br>磁盘文件系统：如 ext4、ext3 等；<br>特殊文件系统：如 proc、sysfs、ramfs、tmpfs 等。</p><h5 id="core-dump"><a href="#core-dump" class="headerlink" title="core dump"></a>core dump</h5><p>当程序运行过程中异常终止或崩溃，操作系统会将程序当时的内存状态记录下来，保存在一个文件中，这种行为就叫做core dump（核心转储）。但实际上，除了内存信息之外，还有些关键的程序运行状态也会同时 dump 下来，例如寄存器信息（包括程序指针、栈指针等）、内存管理信息、其他处理器和操作系统状态和信息。core dump文件可以再现程序出错时的情景。</p><h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><p>《操作系统实用教程》</p><p><a href="https://blog.csdn.net/guowenyan001/article/details/9190585" target="_blank" rel="noopener">https://blog.csdn.net/guowenyan001/article/details/9190585</a></p><p><a href="https://blog.csdn.net/u014303647/article/details/88752856" target="_blank" rel="noopener">https://blog.csdn.net/u014303647/article/details/88752856</a></p><p><a href="https://blog.csdn.net/zhyfxy/article/details/70157248" target="_blank" rel="noopener">https://blog.csdn.net/zhyfxy/article/details/70157248</a></p><p><a href="https://blog.csdn.net/u012349696/article/details/51154364" target="_blank" rel="noopener">https://blog.csdn.net/u012349696/article/details/51154364</a></p><p><a href="https://blog.csdn.net/u010318270/article/details/81058090" target="_blank" rel="noopener">https://blog.csdn.net/u010318270/article/details/81058090</a></p><p><a href="https://www.cnblogs.com/lustar/p/7716165.html" target="_blank" rel="noopener">https://www.cnblogs.com/lustar/p/7716165.html</a></p><p><a href="https://blog.csdn.net/Jacoob1024/article/details/81097721" target="_blank" rel="noopener">https://blog.csdn.net/Jacoob1024/article/details/81097721</a></p><p><a href="https://blog.csdn.net/u011726005/article/details/82670730" target="_blank" rel="noopener">https://blog.csdn.net/u011726005/article/details/82670730</a></p><p><a href="https://blog.csdn.net/wujiafei_njgcxy/article/details/77116175" target="_blank" rel="noopener">https://blog.csdn.net/wujiafei_njgcxy/article/details/77116175</a></p><p><a href="https://blog.csdn.net/lovenankai/article/details/6874475" target="_blank" rel="noopener">https://blog.csdn.net/lovenankai/article/details/6874475</a></p><p><a href="http://www.cnblogs.com/zgq0/p/8780893.html" target="_blank" rel="noopener">http://www.cnblogs.com/zgq0/p/8780893.html</a></p><p><a href="http://blog.csdn.net/fengye245/article/details/7783717" target="_blank" rel="noopener">http://blog.csdn.net/fengye245/article/details/7783717</a></p><p><a href="https://blog.csdn.net/qq_38211852/article/details/80211169" target="_blank" rel="noopener">https://blog.csdn.net/qq_38211852/article/details/80211169</a></p><p><a href="https://www.jianshu.com/p/6a6845464770" target="_blank" rel="noopener">https://www.jianshu.com/p/6a6845464770</a></p><p><a href="https://blog.csdn.net/qq546770908/article/details/53082870" target="_blank" rel="noopener">https://blog.csdn.net/qq546770908/article/details/53082870</a></p><p><a href="https://blog.csdn.net/misszhoudandan/article/details/81173046" target="_blank" rel="noopener">https://blog.csdn.net/misszhoudandan/article/details/81173046</a></p><p><a href="https://blog.csdn.net/Misszhoudandan/article/details/81193227" target="_blank" rel="noopener">https://blog.csdn.net/Misszhoudandan/article/details/81193227</a></p><p><a href="https://www.cnblogs.com/hadoop-dev/p/6899171.html" target="_blank" rel="noopener">https://www.cnblogs.com/hadoop-dev/p/6899171.html</a></p><p><a href="https://www.cnblogs.com/bopo/p/9228834.html" target="_blank" rel="noopener">https://www.cnblogs.com/bopo/p/9228834.html</a></p><p><a href="https://www.cnblogs.com/Peter2014/p/7594504.html" target="_blank" rel="noopener">https://www.cnblogs.com/Peter2014/p/7594504.html</a></p><p><a href="https://www.cnblogs.com/bokeyuan-dlam/articles/9157857.html" target="_blank" rel="noopener">https://www.cnblogs.com/bokeyuan-dlam/articles/9157857.html</a></p><p><a href="https://blog.csdn.net/qq_36357820/article/details/76606113" target="_blank" rel="noopener">https://blog.csdn.net/qq_36357820/article/details/76606113</a></p><p><a href="https://www.cnblogs.com/zhuiluoyu/p/6154898.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhuiluoyu/p/6154898.html</a></p><p><a href="https://www.cnblogs.com/CEO-H/p/7794306.html" target="_blank" rel="noopener">https://www.cnblogs.com/CEO-H/p/7794306.html</a></p><p><a href="https://blog.csdn.net/chuhongcai/article/details/53931371" target="_blank" rel="noopener">https://blog.csdn.net/chuhongcai/article/details/53931371</a></p><p><a href="https://blog.csdn.net/qq43599939/article/details/78873150" target="_blank" rel="noopener">https://blog.csdn.net/qq43599939/article/details/78873150</a></p><p><a href="https://www.cnblogs.com/ginvip/p/6376049.html" target="_blank" rel="noopener">https://www.cnblogs.com/ginvip/p/6376049.html</a></p><p><a href="https://blog.csdn.net/freeking101/article/details/53404897" target="_blank" rel="noopener">https://blog.csdn.net/freeking101/article/details/53404897</a></p><p><a href="http://www.cnblogs.com/csj2018/p/9158963.html" target="_blank" rel="noopener">http://www.cnblogs.com/csj2018/p/9158963.html</a></p><p><a href="https://www.cnblogs.com/bigbean/p/3669739.html" target="_blank" rel="noopener">https://www.cnblogs.com/bigbean/p/3669739.html</a></p><p><a href="https://www.cnblogs.com/xiaoleiel/p/8349487.html" target="_blank" rel="noopener">https://www.cnblogs.com/xiaoleiel/p/8349487.html</a></p><p><a href="https://www.cnblogs.com/ftl1012/p/netstat.html" target="_blank" rel="noopener">https://www.cnblogs.com/ftl1012/p/netstat.html</a></p><p><a href="https://www.cnblogs.com/wxgblogs/p/6591980.html" target="_blank" rel="noopener">https://www.cnblogs.com/wxgblogs/p/6591980.html</a></p><p><a href="https://blog.csdn.net/abc15766228491/article/details/79339208" target="_blank" rel="noopener">https://blog.csdn.net/abc15766228491/article/details/79339208</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;操作系统基础&quot;&gt;&lt;a href=&quot;#操作系统基础&quot; class=&quot;headerlink&quot; title=&quot;操作系统基础&quot;&gt;&lt;/a&gt;操作系统基础&lt;/h2&gt;&lt;p&gt;操作系统是计算机系统中的一个系统软件，是一些程序模块的集合&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对于使用者：提供了一个
      
    
    </summary>
    
      <category term="操作系统" scheme="http://ylovex.cn/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="操作系统" scheme="http://ylovex.cn/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>java多线程基础</title>
    <link href="http://ylovex.cn/2019/07/16/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    <id>http://ylovex.cn/2019/07/16/java多线程基础/</id>
    <published>2019-07-16T13:55:11.000Z</published>
    <updated>2019-07-18T13:59:30.839Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java多线程基础"><a href="#Java多线程基础" class="headerlink" title="Java多线程基础"></a>Java多线程基础</h2><h3 id="并行基础概念"><a href="#并行基础概念" class="headerlink" title="并行基础概念"></a>并行基础概念</h3><h5 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h5><p>同步和异步通常是形容一次方法的调用，同步方法调用一旦开始，调用者必须等到方法调用返回后才能继续后续的行为；异步调用更像一个消息传递，一旦开始，方法调用就会立即放回，调用者可以继续后续的操作，而异步方法通常会在另外一个线程中“真实”的执行。</p><h5 id="并发与并行"><a href="#并发与并行" class="headerlink" title="并发与并行"></a>并发与并行</h5><p>并发侧重于多个任务交替执行，并行是真实的同时执行，真实的并行只可能出现在多核CPU中</p><h5 id="临界区"><a href="#临界区" class="headerlink" title="临界区"></a>临界区</h5><p>用来表示一种公共资源或者说是共享数据，可以被多个线程使用，但是一次只能有一个线程使用，一旦临界区资源被占用，其他线程想到使用这个资源必须等待</p><h5 id="阻塞和非阻塞"><a href="#阻塞和非阻塞" class="headerlink" title="阻塞和非阻塞"></a>阻塞和非阻塞</h5><p>当一个线程占用了临界区资源，其他所以需要这个资源的线程就必须在这个临界区中进行等待，等待会导致线程挂起，这种情况就是阻塞。</p><h5 id="死锁、饥饿、活锁"><a href="#死锁、饥饿、活锁" class="headerlink" title="死锁、饥饿、活锁"></a>死锁、饥饿、活锁</h5><p>死锁是指多个进程在运行过程中因争夺资源而造成的一种僵局，当进程处于这种僵持状态时，若无外力作用，它们都将无法再向前推进。</p><p>饥饿是某一个或者多个线程因为种种原因无法获得所需要的资源，导致一直无法执行。</p><p>活锁是两个线程主动将资源释放给对方用，那么就会出现资源不断在两个线程中跳动，而没有一个线程可以同时拿到所有资源而正常执行。</p><h5 id="并发级别"><a href="#并发级别" class="headerlink" title="并发级别"></a>并发级别</h5><p>可以分为阻塞、无饥饿、无障碍、无锁、无等待等</p><p>一个线程是阻塞的，那么在其他线程释放资源之前，当前线程无法继续执行。当使用synchronized关键字或者重入锁，得到的就是阻塞的线程</p><p>如果线程之间是有优先级的，那么线程调度的时候总会倾向于满足高优先级的线程，对于非公平锁来说，系统允许高优先级的线程插队。这样有可能导致低优先级线程产生饥饿。但如果锁是公平的，满足先来后到，那么饥饿就不会产生</p><p>无障碍是一种最弱的非阻塞调度。两个线程如果是无障碍的执行，那么他们不会因为临界区的问题导致一方挂起，对于无障碍线程，当检测到多个线程修改共享数据就会立即对自己所做的修改进行回滚，确保数据安全，如果没有数据竞争发生就可以顺利完成任务</p><p>无锁的并行都是无障碍的，在无锁的情况下，所有的线程都尝试对临界区进行访问，但不同的是无锁的并发保证必然有一个线程能够在有限步内完成操作离开临界区</p><p>无等待在无锁的基础上更进一步，要求所有的线程都必须在有限步内完成，一种典型的无等待结构就是RCU（Read-Copy-Update）基本思想是对数据的读可以不就控制，但在写数据的时候，先取得原始数据的副本，接着只修改副本数据，修改完成后，在合适的时机回写数据</p><h5 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h5><p>是指一个操作是不可中断的，即使是多个线程一起执行的时候，一个操作一旦开始就不会被其他线程干扰</p><h5 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h5><p>是指一个线程修改了某一个共享变量的值，其他线程是否能够立即知道这个修改</p><h5 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h5><p>程序在执行时，可能会进行指令重排，重排后的指令与原指令的顺序未必一致</p><h3 id="Java并行基础"><a href="#Java并行基础" class="headerlink" title="Java并行基础"></a>Java并行基础</h3><h5 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h5><p>进程是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位</p><p>线程是程序执行的最小单位，使用多线程而不是多进程进行并发程序设计是因为线程间的切换和调度的成本远小于进程</p><h4 id="线程生命周期"><a href="#线程生命周期" class="headerlink" title="线程生命周期"></a>线程生命周期</h4><p><img src="201907160001.png" alt="37812319"></p><h5 id="New状态"><a href="#New状态" class="headerlink" title="New状态"></a>New状态</h5><p>当使用new创建一个Thread对象时候，此时并不处于执行状态</p><h5 id="Runnable状态"><a href="#Runnable状态" class="headerlink" title="Runnable状态"></a>Runnable状态</h5><p>调用start方法后，那么此时才是真正在JVM进程中创建了一个线程，该状态线程位于可运行线程池中，等待被线程调度选中，获取cpu的使用权</p><h5 id="Running状态"><a href="#Running状态" class="headerlink" title="Running状态"></a>Running状态</h5><p>可运行状态（Runnable）的线程获得CPU时间片，执行程序代码</p><h5 id="Blocked状态"><a href="#Blocked状态" class="headerlink" title="Blocked状态"></a>Blocked状态</h5><p>是指线程因为某种原因放弃了cpu的使用权，也即让出了cpu timeslice，暂时停止运行。直到线程进入可运行(runnable)状态，才有机会再次获得cpu timeslice 转到运行(running)状态。阻塞的情况分三种： </p><ol><li>等待阻塞：运行(running)的线程执行o.wait()方法，JVM会把该线程放入等待队列(waitting queue)中。</li><li>同步阻塞：运行(running)的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入锁池(lock pool)中。</li><li>其他阻塞：运行(running)的线程执行Thread.sleep(long ms)或运行在当前线程里的其它线程调用了join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入可运行(runnable)状态。</li></ol><h5 id="Dead状态"><a href="#Dead状态" class="headerlink" title="Dead状态"></a>Dead状态</h5><p>线程run(),main()方法执行结束，或者因为异常退出了run()方法，则该线程结束生命周期</p><h4 id="线程基本操作"><a href="#线程基本操作" class="headerlink" title="线程基本操作"></a>线程基本操作</h4><h5 id="新建线程"><a href="#新建线程" class="headerlink" title="新建线程"></a>新建线程</h5><p>只需要使用new关键字创建一个线程对象，并且将它start()起来即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Thread t1 = new Thread();</span><br><span class="line">t1.start();</span><br></pre></td></tr></table></figure><p>start()方法就会新建一个线程并让这个线程执行run()方法</p><p>如果直接调用run()方法不会新建一个线程，而是只会在当前线程中，串行执行run()中的代码</p><ol><li>继承Thread创建线程</li><li>实现Runnanle接口创建线程</li><li>实现Callable接口通过FutureTask包装器来创建线程</li><li>使用ExecutorService、Callable、Future实现有返回结果的线程</li></ol><h5 id="终止线程"><a href="#终止线程" class="headerlink" title="终止线程"></a>终止线程</h5><p>stop()方法，可以立即将线程终止，已被标记为废弃</p><p>强行把执行到一半的线程终止，可能会引起一些数据不一致问题</p><h5 id="线程中断"><a href="#线程中断" class="headerlink" title="线程中断"></a>线程中断</h5><p>线程中断不会使线程立即退出，而是给线程发送一个通知告知目标线程希望其退出，至于目标线程接到通知后如何处理则完全由线程自行决定</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public void Thread.interrupt() //中断线程</span><br><span class="line">public boolean Thread.isInterrupted() //判断是否被中断</span><br><span class="line">public static boolean Thread.interrupted() //判断是否被中断，并清除当前中断状态</span><br></pre></td></tr></table></figure><p>Thread.interrupt()是一个实例方法，它通知目标线程中断，也就是设置设置中断标志位。中断标志位表示当前线程已经被中断了。Thread.isInterrupted()方法也是实例方法，它判断当前线程是否被中断（通过检查中断标志位）。Thread.interrupted()是静态方法，也是判断中断状态，但同时会清除当前线程的中断标志位状态。</p><p>interrupted()作用于当前线程，interrupt()和isInterrupted()作用于调用此方法的实例所代表的线程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public static void sleep(long millis) throws InterruptedException</span><br><span class="line">public static void sleep(long millis, int nanos) throws InterruptedException</span><br></pre></td></tr></table></figure><p>sleep()方法会让当前线程休眠若干时间，它会抛出一个InterruptedException中断异常。InterruptedException不是运行时异常，也就是程序必须捕获处理，当线程在sleep()休眠时，如果被中断，这个异常就会产生</p><h5 id="wait和notify"><a href="#wait和notify" class="headerlink" title="wait和notify"></a>wait和notify</h5><p>这两个方法输出Object类，任何对象都可以调用</p><p>当在一个对象实例上调用了wait方法后，当前线程就会在这个对象上等待，比如一个线程调用了object.wait()，那么它就会进入这个object对象的等待队列。这个等待队列中可能有多个线程在等待，当object.notify()被调用的时候，就会从这个等待队列中随机选择一个线程唤醒，这个选择是不公平的，完全随机的</p><p>notifyAll()方法会唤醒在这个等待队列中所有的等待的线程</p><p>wait()和notify()方法必须包含哎对应的synchronzied语句中，都需要首先获得目标对象的一个监视器，</p><p>wait和sleep方法都可以让线程等待若干时间，wait方法会释放目标对象的锁，而sleep方法不会释放任何资源</p><h5 id="挂起suspend和继续执行resume线程"><a href="#挂起suspend和继续执行resume线程" class="headerlink" title="挂起suspend和继续执行resume线程"></a>挂起suspend和继续执行resume线程</h5><p>不推荐使用，suspend方法在导致线程暂停的同时，并不会去释放任何锁资源，直到对应线程上进行了resume方法被挂起的线程才能继续，从而其他所有阻塞在相关锁上的线程也可以继续执行，但是如果resume操作意外的在suspend前执行会导致所占用的锁不会被释放。</p><h5 id="等待线程结束join和谦让yield"><a href="#等待线程结束join和谦让yield" class="headerlink" title="等待线程结束join和谦让yield"></a>等待线程结束join和谦让yield</h5><p>当一个线程的输入可能非常依赖另外一个或者多个线程的输出时候。此时这个线程就需要等待依赖线程执行完毕才能继续执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public final void join() throws InterruptException</span><br><span class="line">public final synchronized void join(long millis) throws InterruptedException</span><br></pre></td></tr></table></figure><p>第一个join方法表示无限等待，它会一直阻塞当前线程，直到目标线程执行完毕，第二个方法给出了一个最大等待时间，如果超过给定时间目标线程还在执行，当前线程也会因为等不及了而继续往下执行</p><p>join方法本质是让调用线程wait()在当前线程对象实例上，它让调用线程在当前对象上进行等待，当线程执行完成后，被等待的线程会在退出前调用notifyAll通知所有的等待线程继续执行 。因此不要在应用程序中，在Thread对象实例上使用类似wait或者notify等方法</p><p>yield方法是一个静态方法，会使当前线程让出CPU，但是让出后该线程还会进行CPU资源的争夺</p><h4 id="volatile与Java内存模型（JMM）"><a href="#volatile与Java内存模型（JMM）" class="headerlink" title="volatile与Java内存模型（JMM）"></a>volatile与Java内存模型（JMM）</h4><p>在计算机中，所有的运算操作都是由CPU的寄存器完成，CPU指令的执行过程需要涉及数据的读取和写入操作，由于CPU的处理速度和内存的访问速度之间的差距越来越大，增加了缓存的设计</p><p> <img src="201907160002.png" alt="23131123"></p><p>由于缓存的出现，极大地提高了CPU的吞吐模型，但是同时也引入了缓存不一致的问题，比如i++操作，在程序的运行过程中，首先需要将主内存中的数据复制一份存放到CPU Cache中，那么CPU寄存器在进行数值计算的时候就直接到Cache中读取和写入，当整个过程运算结束之后再将Cache中的数据刷新到主存当中，</p><p>i++在单线程中不会出现问题，但是在多线程中就会出现问题，为了解决缓存不一致的问题，通常主流解决办法有：通过总线加锁的方式，通过缓存一致性协议</p><p> 在缓存一致性协议中最为出名的是Intel的MESI协议，MESI协议保证了每一个缓存中使用的共享变量副本都是一致的，它的大致思想是，当CPU在操作Cache数据的时，如果发现该变量是一个共享变量，也就是说在其他CPU Cache中也存在一个副本，那么：</p><ol><li>读取操作，不做任何处理，只是将Cache中的数据读取到寄存器</li><li>写入操作，发出信号通知其他CPU将该变量的Cache line置为无效状态，其他CPU在进行该变量读取的时候不得不到主内存中再次获取</li></ol><h5 id="Java内存模型"><a href="#Java内存模型" class="headerlink" title="Java内存模型"></a>Java内存模型</h5><p> Java内存模型决定了一个线程对共享变量的写入何时对其他线程可见，Java内存模型定义了线程和主内存之间的抽象关系，具体有：</p><ol><li>共享内存存储在主内存之中，每个线程都可以访问</li><li>每个线程都有私有的工作内存或者称为本地内存</li><li>工作内存只存储该线程对共享变量的副本</li><li>线程不能直接操作主内存，只有先操作了工作内存之后才能写入主内存</li><li>工作内存和Java内存模型一样也是一个抽象的概念，它其实并不存在，它涵盖了缓存、寄存器、编译器优化以及硬件等</li></ol><p><img src="201907160003.png" alt="12311414"></p><h5 id="JMM与原子性"><a href="#JMM与原子性" class="headerlink" title="JMM与原子性"></a>JMM与原子性</h5><p>对基本数据类型的变量读取赋值操作是原子性，对引用类型的变量读取和赋值操作也是原子性的</p><ol><li><p>x=10 原子性</p></li><li><p>y=x 非原子</p></li><li><p>y++ 非原子</p></li><li><p>z=z+1 非原子</p><p>JMM只保证了基本读取和赋值的原子性操作，如果想要使得某些代码片段具备原子性，需要使用关键字synchronized，或者JUC中的lock。如果想要使得int等类型自增操作具备原子性，可以使用JUC包下的原子封装类型java.util.concurrent.atomic.*</p></li></ol><p>volatile关键字不具备原子性的语义</p><h5 id="JMM与可见性"><a href="#JMM与可见性" class="headerlink" title="JMM与可见性"></a>JMM与可见性</h5><p>使用关键字volatile，当一个变量被volatile关键字修饰时，对于共享资源的读操作会直接在主内存中进行（当然也会缓存到工作内存中，当其他线程对该共享资源进行了修改，则会导致当前线程在工作内存中的共享资源失效，所以必须从主内存中再次获取），对于共享资源的写操作要先修改工作内存，但是修改结束后会立刻将其刷新到主内存中</p><p>同通过synchronized关键字，能够保证同一个时刻只有一个线程获得锁，然后执行同步方法，并且还会确保在锁释放之前，会将对变量的修改刷新到主内存中</p><p>通过JUC提供的显式锁Lock</p><h5 id="JMM与有序性"><a href="#JMM与有序性" class="headerlink" title="JMM与有序性"></a>JMM与有序性</h5><p>在Java内存模型中，允许编译器和处理器对指令进行重排列，</p><ol><li>使用volatile</li><li>使用synchronized</li><li>使用Lock</li></ol><h5 id="happens-before原则"><a href="#happens-before原则" class="headerlink" title="happens-before原则"></a>happens-before原则</h5><ol><li>程序次序规则：在一个线程内，代码按照编写时的次序执行，但是虚拟机还是可能会对程序代码的指令进行重排序，只要确保在一个线程内最终的结果和代码顺序执行的结果一致</li><li>锁定原则：一个unlock操作要先发生于对同一个锁的lock操作</li><li>volatile变量规则：对一个变量的写操作要早与对这个变量之后的读操作</li><li>传递规则：如果A操作先于B，B先于C，则A肯定先于C</li><li>线程启动规则：Thread对象的start方法要先行发生于对该线程的任何动作</li><li>线程中断规则：对线程执行interrupt方法肯定要优先于捕获到中断信号</li><li>线程终结规则：线程中所有的操作都要先行发生于线程的终止检测</li><li>对象的终结规则：一个对象初始化的完成要先行发生在finalize()方法前</li></ol><h4 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h4><p> 被volatile修饰的实例变量或者类变量具备如下两层语义：</p><ol><li>保证了不同线程之间对共享变量操作的可见性</li><li>禁止对指令进行重排序操作</li></ol><h5 id="volatile原理"><a href="#volatile原理" class="headerlink" title="volatile原理"></a>volatile原理</h5><p> 被volatile修饰的变量存在于一个“lock；”的前缀中，</p><p><img src="201907160004.png" alt="13123"></p><p>“lock；”前缀实际上相当于一个内存屏障，该内存屏障会为指令的执行提供如下几个保证：</p><ol><li>确保指令重排序时不会将后面的代码排到内存屏障之前</li><li>确保指令重排序时不会将前面的代码排到内存屏障后</li><li>确保在执行到内存屏障修饰的指令时在前面的代码全部执行完成</li><li>强制将线程工作内存中的值修改刷新到主内存</li><li>如果是写操作，则会导致其他线程工作内存总的缓存数据失效</li></ol><h5 id="volatile和synchronized"><a href="#volatile和synchronized" class="headerlink" title="volatile和synchronized"></a>volatile和synchronized</h5><p>使用上的区别</p><ol><li>volatile关键字只能用于修饰实例变量或者类变量，不能用于修饰方法以及方法参数和局部变量、常量等</li><li>synchronized关键字不能用于对变量的修饰，只能用于修饰方法或者语句块</li><li>volatile修饰的变量可以为null，synchronized同步语句块的monitor对象不能为null</li></ol><p>对原子性的保证</p><ol><li>volatile不能保证原子性</li><li>synchronized可以保证代码的原子性</li></ol><p>对可见性的保证</p><ol><li>都可以保证共享资源在多线程的可见性</li><li>synchronized借助JVM指令monitor enter和monitor exit对通过排他的方式使得同步代码串行化，在monitor exit时所有共享资源都将刷新到主内存</li><li>volatile使用机器指令（偏硬件）“lock；”的方式迫使其他线程工作内存中的数据失效，不得不在主内存进行再次加载</li></ol><p>对有序性保证</p><ol><li>volatile禁止JVM编译器以及处理器对其进行重排序，所以保证有序性</li><li>synchronized所修饰的同步方法也可以保证顺序性，但是这种顺序性是以程序的串行化执行换来的，在synchronized关键字所修饰的代码块代码指令中也会发生指令重排序情况</li></ol><p>其他</p><ol><li>volatile不会使线程陷入阻塞</li><li>synchronized会使线程进入阻塞</li></ol><h5 id="线程组"><a href="#线程组" class="headerlink" title="线程组"></a>线程组</h5><p> 在Thread的构造函数中，可以显示的指定线程的Group，也就是ThreadGroup，下面看<code>init</code>方法的中间部分: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (g == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">/* Determine if it's an applet or not */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* If there is a security manager, ask the security manager</span></span><br><span class="line"><span class="comment">              what to do. */</span></span><br><span class="line">    <span class="keyword">if</span> (security != <span class="keyword">null</span>) &#123;</span><br><span class="line">        g = security.getThreadGroup();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* If the security doesn't have a strong opinion of the matter</span></span><br><span class="line"><span class="comment">              use the parent thread group. */</span></span><br><span class="line">    <span class="keyword">if</span> (g == <span class="keyword">null</span>) &#123;</span><br><span class="line">        g = parent.getThreadGroup();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 如果在构造Thread的时候没有显示的指定一个ThreadGroup，那么子线程将会被加入父线程所在的线程组</p><h5 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h5><p> 守护线程是在后台默默完成一些系统性的服务，比如垃圾回收线程、JIT线程；与之对应的是用户线程，用户线程是系统的工作线程，完成这个程序要完成的业务操作。当用户线程全部结束，只有守护线程时候，Java虚拟机自然退出</p><p><code>setDaemon</code> 方法。<code>isDaemon()</code> 方法可以判断该线程是不是守护线程。</p><p>另外需要注意的就是，<code>setDaemon()</code> 方法只在线程启动之前才能生效，如果一个线程已经死亡，那么再设置 <code>setDaemon()</code> 则会抛出 <code>IllegalThreadStateException</code> 异常。</p><h5 id="synchronized使用"><a href="#synchronized使用" class="headerlink" title="synchronized使用"></a>synchronized使用</h5><p>指定加锁对象：对给定对象加锁，进入同步代码前要获得给定对象的锁</p><p>直接作用于实例方法：相当于对当前实例加锁，进入同步代码前要获得当前实例的锁</p><p>直接作用于静态方法：相当于对当前类加锁，进入同步代码前要获得当前类的锁</p><p>对象的同步Synchronized的底层是通过monitor来完成<br>每个对象有一个监视器锁（monitor）。当monitor被占用时就会处于锁定状态，线程执行monitorenter指令时尝试获取monitor的所有权，过程如下：</p><ol><li><p>如果monitor的进入数为0，则该线程进入monitor，然后将进入数设置为1，该线程即为monitor的所有者。</p></li><li><p>如果线程已经占有该monitor，只是重新进入，则进入monitor的进入数加1.</p></li><li><p>如果其他线程已经占用了monitor，则该线程进入阻塞状态，直到monitor的进入数为0，再重新尝试获取monitor的所有权。</p></li></ol><p>释放锁则是通过monitorexit指令，执行monitorexit的线程必须是objectref所对应的monitor的所有者，指令执行时，monitor的进入数减1，如果减1后进入数为0，那线程退出monitor，不再是这个monitor的所有者。其他被这个monitor阻塞的线程可以尝试去获取这个 monitor 的所有权。</p><p>方法的synchronized同步：相对于普通方法，其常量池中多了ACC_SYNCHRONIZED标示符。JVM就是根据该标示符来实现方法的同步的：当方法调用时，调用指令将会检查方法的 ACC_SYNCHRONIZED 访问标志是否被设置，如果设置了，执行线程将先获取monitor，获取成功之后才能执行方法体，方法执行完后再释放monitor。在方法执行期间，其他任何线程都无法再获得同一个monitor对象。</p><h3 id="JDK并发包"><a href="#JDK并发包" class="headerlink" title="JDK并发包"></a>JDK并发包</h3><h4 id="ReentranLock"><a href="#ReentranLock" class="headerlink" title="ReentranLock"></a>ReentranLock</h4><p>重要方法：</p><ol><li>lock():获得锁，如果锁已经被占用，则等待</li><li>lockInterruptibly():获得锁，但是优先响应中断</li><li>tryLock()：尝试获得锁，如果成功返回true，失败返回flae。该方法不等待，立即返回</li><li>tryLock(long time , TimeUnit nuit)：在给定时间内尝试获得锁</li><li>unlock()：释放锁</li></ol><p>在重入锁实现中主要包含三个要素：</p><ol><li>原子状态。原子状态使用CAS操作来存储当前锁的状态，判断锁是否已经被别的线程持有；以ReentrantLock为例，state初始化为0，表示未锁定状态。A线程lock()时，会调用tryAcquire()独占该锁并将state+1。此后，其他线程再tryAcquire()时就会失败，直到A线程unlock()到state=0（即释放锁）为止，其它线程才有机会获取该锁。当然，释放锁之前，A线程自己是可以重复获取此锁的（state会累加），这就是可重入的概念。但要注意，获取多少次就要释放多么次，这样才能保证state是能回到零态的。</li><li>等待队列。所有没有请求到锁的线程，会进入等待队列进行等待。待有线程释放锁后，系统就能从等待队列中唤醒一个线程，继续工作</li><li>阻塞原语park()和unpark(),用于挂起和恢复线程,没有得到锁的线程将会被挂起</li></ol><h4 id="Condition"><a href="#Condition" class="headerlink" title="Condition"></a>Condition</h4><p>通过Lock接口的Condition newCondition()方法可以生成一个与当前重入锁绑定的Condition实例。利用Condition对象，可以让线程在合适的时间等待，或者在某一个特定的时刻得到通知，继续执行</p><p>Condition接口方法有：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">void await() throws InterruptedException;</span><br><span class="line">void awaitUninterruptibly();</span><br><span class="line">long awaitNanos(long nanosTimeout) throws InterruptedException;</span><br><span class="line">boolean await(long time, TimeUnit unit) throws InterruptedException;</span><br><span class="line">boolean awaitUntil(Date deadline) throws InterruptedException;</span><br><span class="line">void signal();</span><br></pre></td></tr></table></figure><h5 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h5><p>信号量可以指定多个线程，同时访问某一个资源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public Semaphore(int permits) &#123;</span><br><span class="line">       sync = new NonfairSync(permits);</span><br><span class="line">   &#125;</span><br><span class="line">public Semaphore(int permits, boolean fair) &#123;</span><br><span class="line">       sync = fair ? new FairSync(permits) : new NonfairSync(permits);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p> 在构造信号量对象时，必须要指定信号量的准入数，当每个线程每次只申请一个许可时，就相当于指定了同时可以有多少个线程可以访问某个资源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> public void acquire() throws InterruptedException &#123;</span><br><span class="line">        sync.acquireSharedInterruptibly(1);</span><br><span class="line">    &#125;</span><br><span class="line"> public void acquireUninterruptibly() &#123;</span><br><span class="line">        sync.acquireShared(1);</span><br><span class="line">    &#125;</span><br><span class="line"> public boolean tryAcquire() &#123;</span><br><span class="line">        return sync.nonfairTryAcquireShared(1) &gt;= 0;</span><br><span class="line">    &#125;</span><br><span class="line">public boolean tryAcquire(long timeout, TimeUnit unit)</span><br><span class="line">        throws InterruptedException &#123;</span><br><span class="line">        return sync.tryAcquireSharedNanos(1, unit.toNanos(timeout));</span><br><span class="line">    &#125;</span><br><span class="line"> public void release() &#123;</span><br><span class="line">        sync.releaseShared(1);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>简单实例如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class SemapDemo implements Runnable &#123;</span><br><span class="line">    final Semaphore semp = new Semaphore(5);</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            semp.acquire();</span><br><span class="line">            Thread.sleep(2000);</span><br><span class="line">            System.out.print(Thread.currentThread().getId()+&quot;:done&quot;);</span><br><span class="line">            semp.release();</span><br><span class="line"></span><br><span class="line">        &#125;catch (InterruptedException e )&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        ExecutorService executorService = Executors.newFixedThreadPool(20);</span><br><span class="line">        final SemapDemo demo = new SemapDemo();</span><br><span class="line">        for(int i=0;i&lt;20;i++)&#123;</span><br><span class="line">            executorService.submit(demo);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ReadWriteLock读写锁"><a href="#ReadWriteLock读写锁" class="headerlink" title="ReadWriteLock读写锁"></a>ReadWriteLock读写锁</h5><p>​    <img src="201907160005.png" alt="32314"> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">*  &lt;pre&gt; &#123;@code</span><br><span class="line"> * class RWDictionary &#123;</span><br><span class="line"> *   private final Map&lt;String, Data&gt; m = new TreeMap&lt;String, Data&gt;();</span><br><span class="line"> *   private final ReentrantReadWriteLock rwl = new ReentrantReadWriteLock();</span><br><span class="line"> *   private final Lock r = rwl.readLock();</span><br><span class="line"> *   private final Lock w = rwl.writeLock();</span><br><span class="line"> *</span><br><span class="line"> *   public Data get(String key) &#123;</span><br><span class="line"> *     r.lock();</span><br><span class="line"> *     try &#123; return m.get(key); &#125;</span><br><span class="line"> *     finally &#123; r.unlock(); &#125;</span><br><span class="line"> *   &#125;</span><br><span class="line"> *   public String[] allKeys() &#123;</span><br><span class="line"> *     r.lock();</span><br><span class="line"> *     try &#123; return m.keySet().toArray(); &#125;</span><br><span class="line"> *     finally &#123; r.unlock(); &#125;</span><br><span class="line"> *   &#125;</span><br><span class="line"> *   public Data put(String key, Data value) &#123;</span><br><span class="line"> *     w.lock();</span><br><span class="line"> *     try &#123; return m.put(key, value); &#125;</span><br><span class="line"> *     finally &#123; w.unlock(); &#125;</span><br><span class="line"> *   &#125;</span><br><span class="line"> *   public void clear() &#123;</span><br><span class="line"> *     w.lock();</span><br><span class="line"> *     try &#123; m.clear(); &#125;</span><br><span class="line"> *     finally &#123; w.unlock(); &#125;</span><br><span class="line"> *   &#125;</span><br><span class="line"> * &#125;&#125;&lt;/pre&gt;</span><br></pre></td></tr></table></figure><h5 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h5><p>通常用来控制线程等待，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">*  &lt;pre&gt; &#123;@code</span><br><span class="line"> * class Driver2 &#123; // ...</span><br><span class="line"> *   void main() throws InterruptedException &#123;</span><br><span class="line"> *     CountDownLatch doneSignal = new CountDownLatch(N);</span><br><span class="line"> *     Executor e = ...</span><br><span class="line"> *</span><br><span class="line"> *     for (int i = 0; i &lt; N; ++i) // create and start threads</span><br><span class="line"> *       e.execute(new WorkerRunnable(doneSignal, i));</span><br><span class="line"> *</span><br><span class="line"> *     doneSignal.await();           // wait for all to finish</span><br><span class="line"> *   &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> *</span><br><span class="line"> * class WorkerRunnable implements Runnable &#123;</span><br><span class="line"> *   private final CountDownLatch doneSignal;</span><br><span class="line"> *   private final int i;</span><br><span class="line"> *   WorkerRunnable(CountDownLatch doneSignal, int i) &#123;</span><br><span class="line"> *     this.doneSignal = doneSignal;</span><br><span class="line"> *     this.i = i;</span><br><span class="line"> *   &#125;</span><br><span class="line"> *   public void run() &#123;</span><br><span class="line"> *     try &#123;</span><br><span class="line"> *       doWork(i);</span><br><span class="line"> *       doneSignal.countDown();</span><br><span class="line"> *     &#125; catch (InterruptedException ex) &#123;&#125; // return;</span><br><span class="line"> *   &#125;</span><br><span class="line"> *</span><br><span class="line"> *   void doWork() &#123; ... &#125;</span><br><span class="line"> * &#125;&#125;&lt;/pre&gt;</span><br><span class="line"> *</span><br></pre></td></tr></table></figure><h5 id="CyclicBarrier"><a href="#CyclicBarrier" class="headerlink" title="CyclicBarrier"></a>CyclicBarrier</h5><p>也可以实现线程间的计数等待，但是计数器可以循环使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">*  &lt;pre&gt; &#123;@code</span><br><span class="line">* class Solver &#123;</span><br><span class="line">*   final int N;</span><br><span class="line">*   final float[][] data;</span><br><span class="line">*   final CyclicBarrier barrier;</span><br><span class="line">*</span><br><span class="line">*   class Worker implements Runnable &#123;</span><br><span class="line">*     int myRow;</span><br><span class="line">*     Worker(int row) &#123; myRow = row; &#125;</span><br><span class="line">*     public void run() &#123;</span><br><span class="line">*       while (!done()) &#123;</span><br><span class="line">*         processRow(myRow);</span><br><span class="line">*</span><br><span class="line">*         try &#123;</span><br><span class="line">*           barrier.await();</span><br><span class="line">*         &#125; catch (InterruptedException ex) &#123;</span><br><span class="line">*           return;</span><br><span class="line">*         &#125; catch (BrokenBarrierException ex) &#123;</span><br><span class="line">*           return;</span><br><span class="line">*         &#125;</span><br><span class="line">*       &#125;</span><br><span class="line">*     &#125;</span><br><span class="line">*   &#125;</span><br><span class="line">*</span><br><span class="line">*   public Solver(float[][] matrix) &#123;</span><br><span class="line">*     data = matrix;</span><br><span class="line">*     N = matrix.length;</span><br><span class="line">*     Runnable barrierAction =</span><br><span class="line">*       new Runnable() &#123; public void run() &#123; mergeRows(...); &#125;&#125;;</span><br><span class="line">*     barrier = new CyclicBarrier(N, barrierAction);</span><br><span class="line">*</span><br><span class="line">*     List&lt;Thread&gt; threads = new ArrayList&lt;Thread&gt;(N);</span><br><span class="line">*     for (int i = 0; i &lt; N; i++) &#123;</span><br><span class="line">*       Thread thread = new Thread(new Worker(i));</span><br><span class="line">*       threads.add(thread);</span><br><span class="line">*       thread.start();</span><br><span class="line">*     &#125;</span><br><span class="line">*</span><br><span class="line">*     // wait until done</span><br><span class="line">*     for (Thread thread : threads)</span><br><span class="line">*       thread.join();</span><br><span class="line">*   &#125;</span><br><span class="line">* &#125;&#125;&lt;/pre&gt;</span><br><span class="line">*</span><br></pre></td></tr></table></figure><h5 id="LockSupport"><a href="#LockSupport" class="headerlink" title="LockSupport"></a>LockSupport</h5><p>可以在线程内任意位置让线程阻塞。和Thread。suspend相比，弥补了由于resume在前发生，导致线程无法继续执行的情况。和Object.wait相比，它不需要先获得某个对象的锁，也不会抛出InterruptedException异常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">*  &lt;pre&gt; &#123;@code</span><br><span class="line"> * class FIFOMutex &#123;</span><br><span class="line"> *   private final AtomicBoolean locked = new AtomicBoolean(false);</span><br><span class="line"> *   private final Queue&lt;Thread&gt; waiters</span><br><span class="line"> *     = new ConcurrentLinkedQueue&lt;Thread&gt;();</span><br><span class="line"> *</span><br><span class="line"> *   public void lock() &#123;</span><br><span class="line"> *     boolean wasInterrupted = false;</span><br><span class="line"> *     Thread current = Thread.currentThread();</span><br><span class="line"> *     waiters.add(current);</span><br><span class="line"> *</span><br><span class="line"> *     // Block while not first in queue or cannot acquire lock</span><br><span class="line"> *     while (waiters.peek() != current ||</span><br><span class="line"> *            !locked.compareAndSet(false, true)) &#123;</span><br><span class="line"> *       LockSupport.park(this);</span><br><span class="line"> *       if (Thread.interrupted()) // ignore interrupts while waiting</span><br><span class="line"> *         wasInterrupted = true;</span><br><span class="line"> *     &#125;</span><br><span class="line"> *</span><br><span class="line"> *     waiters.remove();</span><br><span class="line"> *     if (wasInterrupted)          // reassert interrupt status on exit</span><br><span class="line"> *       current.interrupt();</span><br><span class="line"> *   &#125;</span><br><span class="line"> *</span><br><span class="line"> *   public void unlock() &#123;</span><br><span class="line"> *     locked.set(false);</span><br><span class="line"> *     LockSupport.unpark(waiters.peek());</span><br><span class="line"> *   &#125;</span><br><span class="line"> * &#125;&#125;&lt;/pre&gt;</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><h4 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h4><p>为了避免系统频繁地创建和销毁线程，可以让创建的线程进行复用</p><p>Executor 框架是 Java 5 中引入的，其内部使用了线程池机制，它在 java.util.cocurrent 包下，通过该框架来控制线程的启动、执行和关闭，可以简化并发编程的操作。因此，在 Java 5之后，通过 Executor 来启动线程比使用 Thread 的 start 方法更好，除了更易管理，效率更好（用线程池实现，节约开销）外，还有关键的一点：有助于避免 this 逃逸问题——如果我们在构造器中启动一个线程，因为另一个任务可能会在构造器结束之前开始执行，此时可能会访问到初始化了一半的对象用 Executor 在构造器中。</p><p>Executor 框架包括：线程池，<code>Executor，Executors，ExecutorService，CompletionService，Future，Callable</code> 等</p><p><img src="201907160006.png" alt="7989898"></p><h5 id="线程池类型"><a href="#线程池类型" class="headerlink" title="线程池类型"></a>线程池类型</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public static ExecutorService newFixedThreadPool(int nThreads) &#123;</span><br><span class="line">        return new ThreadPoolExecutor(nThreads, nThreads,</span><br><span class="line">                                      0L, TimeUnit.MILLISECONDS,</span><br><span class="line">                                      new LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>该方法返回一个固定线程数量的线程池，当有一个新任务提交的时候，线程池中若有空闲线程，则立即执行。若没有，则新的任务会被暂存在一个任务队列中，待有线程空闲时，便处理在任务队列中的任务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public static ExecutorService newSingleThreadExecutor() &#123;</span><br><span class="line">        return new FinalizableDelegatedExecutorService</span><br><span class="line">            (new ThreadPoolExecutor(1, 1,</span><br><span class="line">                                    0L, TimeUnit.MILLISECONDS,</span><br><span class="line">                                    new LinkedBlockingQueue&lt;Runnable&gt;()));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>该方法返回一个只有一个线程的线程池，若多余一个任务被提交到该线程池，任务会被保存在一个任务队列中，待线程空闲，按先入先出的顺序执行队列中的任务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public static ExecutorService newCachedThreadPool() &#123;</span><br><span class="line">        return new ThreadPoolExecutor(0, Integer.MAX_VALUE,</span><br><span class="line">                                      60L, TimeUnit.SECONDS,</span><br><span class="line">                                      new SynchronousQueue&lt;Runnable&gt;());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>该方法返回一个可根据实际情况调整线程数量的线程池。当有线程来的时候且现在线程池的线程都在工作的时候，才创建新的线程，否则使用空闲的线程，默认情况下，如果某个线程空闲超过60秒就会自动结束</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public static ScheduledExecutorService newSingleThreadScheduledExecutor() &#123;</span><br><span class="line">        return new DelegatedScheduledExecutorService</span><br><span class="line">            (new ScheduledThreadPoolExecutor(1));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>该方法返回一个ScheduledExecutorService对象，线程池的大小为1，扩展了在给定时间执行某任务的功能，如在某个固定的延时之后执行，或者周期性执行某个任务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize) &#123;</span><br><span class="line">        return new ScheduledThreadPoolExecutor(corePoolSize);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>该方法返回一个ScheduledExecutorService对象，但该线程池可以指定线程数量</p><h5 id="ForkJoinPoll"><a href="#ForkJoinPoll" class="headerlink" title="ForkJoinPoll"></a>ForkJoinPoll</h5><p> 核心思想就是分治，Fork分解任务，Join收集数据</p><p>  <img src="201907160007.png" alt="12314"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">public class CountTask extends RecursiveTask&lt;Long&gt; &#123;</span><br><span class="line">    private static final int THRESHOLD = 10000;</span><br><span class="line">    private long start;</span><br><span class="line">    private long end;</span><br><span class="line"></span><br><span class="line">    public CountTask(long start , long end)&#123;</span><br><span class="line">        this.start = start;</span><br><span class="line">        this.end = end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Long compute()&#123;</span><br><span class="line">        long sum = 0;</span><br><span class="line">        boolean canCompute = (end-start)&lt;THRESHOLD;</span><br><span class="line">        if(canCompute)&#123;</span><br><span class="line">            for(long i=start;i&lt;=end;i++)&#123;</span><br><span class="line">                sum+=i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            //分成100个任务</span><br><span class="line">            long step = (start+end)/100;</span><br><span class="line">            ArrayList&lt;CountTask&gt; subTasks = new ArrayList&lt;&gt;();</span><br><span class="line">            long pos = start;</span><br><span class="line">            for(int i=0;i&lt;100;i++)&#123;</span><br><span class="line">                long lastOne = pos + step;</span><br><span class="line">                if(lastOne&gt;end) lastOne=end;</span><br><span class="line">                CountTask subTask = new CountTask(pos,lastOne);</span><br><span class="line">                pos+=step+1;</span><br><span class="line">                subTasks.add(subTask);</span><br><span class="line">                subTask.fork();</span><br><span class="line">            &#125;</span><br><span class="line">            for(CountTask t : subTasks)&#123;</span><br><span class="line">                sum+=t.join();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        ForkJoinPool forkJoinPool = new ForkJoinPool();</span><br><span class="line">        CountTask task = new CountTask(0,200000L);</span><br><span class="line">        ForkJoinTask&lt;Long&gt; result = forkJoinPool.submit(task);</span><br><span class="line">        try&#123;</span><br><span class="line">            long res = result.get();</span><br><span class="line">            System.out.println(&quot;sum=&quot; +res);</span><br><span class="line">        &#125;catch (InterruptedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;catch (ExecutionException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ThreadPoolExecutor类"><a href="#ThreadPoolExecutor类" class="headerlink" title="ThreadPoolExecutor类"></a>ThreadPoolExecutor类</h5><p>主要构造方法为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * Creates a new &#123;@code ThreadPoolExecutor&#125; with the given initial</span><br><span class="line">     * parameters.</span><br><span class="line">     *</span><br><span class="line">     * @param corePoolSize the number of threads to keep in the pool, even</span><br><span class="line">     *        if they are idle, unless &#123;@code allowCoreThreadTimeOut&#125; is set</span><br><span class="line">     * @param maximumPoolSize the maximum number of threads to allow in the</span><br><span class="line">     *        pool</span><br><span class="line">     * @param keepAliveTime when the number of threads is greater than</span><br><span class="line">     *        the core, this is the maximum time that excess idle threads</span><br><span class="line">     *        will wait for new tasks before terminating.</span><br><span class="line">     * @param unit the time unit for the &#123;@code keepAliveTime&#125; argument</span><br><span class="line">     * @param workQueue the queue to use for holding tasks before they are</span><br><span class="line">     *        executed.  This queue will hold only the &#123;@code Runnable&#125;</span><br><span class="line">     *        tasks submitted by the &#123;@code execute&#125; method.</span><br><span class="line">     * @param threadFactory the factory to use when the executor</span><br><span class="line">     *        creates a new thread</span><br><span class="line">     * @param handler the handler to use when execution is blocked</span><br><span class="line">     *        because the thread bounds and queue capacities are reached</span><br><span class="line">     * @throws IllegalArgumentException if one of the following holds:&lt;br&gt;</span><br><span class="line">     *         &#123;@code corePoolSize &lt; 0&#125;&lt;br&gt;</span><br><span class="line">     *         &#123;@code keepAliveTime &lt; 0&#125;&lt;br&gt;</span><br><span class="line">     *         &#123;@code maximumPoolSize &lt;= 0&#125;&lt;br&gt;</span><br><span class="line">     *         &#123;@code maximumPoolSize &lt; corePoolSize&#125;</span><br><span class="line">     * @throws NullPointerException if &#123;@code workQueue&#125;</span><br><span class="line">     *         or &#123;@code threadFactory&#125; or &#123;@code handler&#125; is null</span><br><span class="line">     */</span><br><span class="line">    public ThreadPoolExecutor(int corePoolSize,</span><br><span class="line">                              int maximumPoolSize,</span><br><span class="line">                              long keepAliveTime,</span><br><span class="line">                              TimeUnit unit,</span><br><span class="line">                              BlockingQueue&lt;Runnable&gt; workQueue,</span><br><span class="line">                              ThreadFactory threadFactory,</span><br><span class="line">                              RejectedExecutionHandler handler) &#123;</span><br><span class="line">        if (corePoolSize &lt; 0 ||</span><br><span class="line">            maximumPoolSize &lt;= 0 ||</span><br><span class="line">            maximumPoolSize &lt; corePoolSize ||</span><br><span class="line">            keepAliveTime &lt; 0)</span><br><span class="line">            throw new IllegalArgumentException();</span><br><span class="line">        if (workQueue == null || threadFactory == null || handler == null)</span><br><span class="line">            throw new NullPointerException();</span><br><span class="line">        this.corePoolSize = corePoolSize;</span><br><span class="line">        this.maximumPoolSize = maximumPoolSize;</span><br><span class="line">        this.workQueue = workQueue;</span><br><span class="line">        this.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class="line">        this.threadFactory = threadFactory;</span><br><span class="line">        this.handler = handler;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>参数workQueue指被提交但未执行的任务队列，是一个BlockingQueue接口的对象，仅用于存放Runnable对象。根据队列功能分类，可以使用的BlockingQueue有：</p><p> 直接提交的队列：SynchronousQueue，是一个特殊的BlockingQueue。没有容量，每一个插入都要等待一个相应的删除操作，反之，每一个删除操作都要等待对应的插入操作。如果使用SynchronousQueue，提交的任务不会被真实的保存，而总是将新任务提交给线程执行，如果没有空闲的线程，则尝试创建新的线程，如果线程数量已经达到最大值则执行拒绝策略</p><p>有界的任务队列：ArrayBlockingQueue，当使用有界的任务队列时，若有新的任务需要执行，如何线程池的实际线程小于corePoolSize，则会优先创建新的线程，若大于corePoolSize，则会将新任务加入等待队列。若等待队列已满，无法加入，则在总线程数不大于maximumPoolSize的前提下，创建新的线程执行任务，若大于maximumPoolSize则执行拒绝策略</p><p>无界的任务队列：LinkedBlockingQueue，与有界队列相比，除非系统资源耗尽，否则无界的任务队列不存在任务入队失败的情况</p><p>优先任务队列：PriorityBlockingQueue， 可以根据任务自身的优先级顺序先后执行，在确保系统性能的同时，也能够很好的质量保证</p><h5 id="拒绝策略"><a href="#拒绝策略" class="headerlink" title="拒绝策略"></a>拒绝策略</h5><p>ThreadPoolExecutor的最后一个参数指定了拒绝策略，也就是当任务数量超过系统实际承载能力时，需要使用拒绝策略，JDK内置了四种拒绝策略</p><p>AbortPolicy策略：该策略会直接抛出异常，阻止系统正常工作</p><p>CallerRunsPolicy策略：只要线程池未关闭，该策略直接在调用者线程中,运行当前被丢弃的任务，</p><p>DiscardOledestPolicy策略：该策略将丢弃最老的一个请求，也就是即将被执行的一个任务，并尝试再次提交当前任务</p><p>DiscardPolicy策略：该策略默默地丢弃无法处理的任务，不予任何处理。</p><h4 id="锁优化"><a href="#锁优化" class="headerlink" title="锁优化"></a>锁优化</h4><p>减少锁持有时间，只在必要时进行同步，这样就能明显减少线程持有锁的时间，提高系统的吞吐量</p><p>减少锁粒度，就是缩小锁定对象的范围，从而减少锁冲突的可能性，进而提高系统的并发能力</p><p>读写分离锁来代替独占锁</p><p>锁分离，例如在LinkedBlockingQueue实现中，take和put函数分别实现了从队列中取得数据和往队列中增加数据功能，分别作用于队列的前端和尾端，所以可以通过takeLock和putLock两把锁</p><p>锁粗化，虚拟机在遇到一连串连续地对同一锁进行请求和释放的操作时，便会把所有的锁操作整合成对锁的一次请求，从而减少对锁的请求同步次数，这个操作叫做锁粗化</p><h4 id="JDK内部”锁“优化策略"><a href="#JDK内部”锁“优化策略" class="headerlink" title="JDK内部”锁“优化策略"></a>JDK内部”锁“优化策略</h4><p>锁偏向:如果一个线程获得了锁，那么锁就进入偏向模式，当这个线程再次请求锁时，无须再做任何同步操作</p><p>轻量级锁：只是简单地将对象头部作为指针，指向持有锁的线程堆栈的内部，来判断一个线程是否持有对象锁。如果线程获得轻量级锁成功，则可以顺利进入临界区。如果轻量级锁加锁失败，则表示其他线程抢先争夺到了锁，那么当前线程的锁请求就会膨胀为重量级锁</p><p>自旋锁：锁的等待者会原地忙等，不停的询问，直到获得锁。采用让当前线程不停地的在循环体内执行实现，当循环的条件被其他线程改变时才能进入临界区。</p><p>锁消除：Java虚拟机在JIT编译时，通过对运行上下文的扫描，去除不可能存在共享资源竞争的锁</p><h5 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">    * Returns the value in the current thread&apos;s copy of this</span><br><span class="line">    * thread-local variable.  If the variable has no value for the</span><br><span class="line">    * current thread, it is first initialized to the value returned</span><br><span class="line">    * by an invocation of the &#123;@link #initialValue&#125; method.</span><br><span class="line">    *</span><br><span class="line">    * @return the current thread&apos;s value of this thread-local</span><br><span class="line">    */</span><br><span class="line">   public T get() &#123;</span><br><span class="line">       Thread t = Thread.currentThread();</span><br><span class="line">       ThreadLocalMap map = getMap(t);</span><br><span class="line">       if (map != null) &#123;</span><br><span class="line">           ThreadLocalMap.Entry e = map.getEntry(this);</span><br><span class="line">           if (e != null) &#123;</span><br><span class="line">               @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">               T result = (T)e.value;</span><br><span class="line">               return result;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       return setInitialValue();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * Sets the current thread&apos;s copy of this thread-local variable</span><br><span class="line">     * to the specified value.  Most subclasses will have no need to</span><br><span class="line">     * override this method, relying solely on the &#123;@link #initialValue&#125;</span><br><span class="line">     * method to set the values of thread-locals.</span><br><span class="line">     *</span><br><span class="line">     * @param value the value to be stored in the current thread&apos;s copy of</span><br><span class="line">     *        this thread-local.</span><br><span class="line">     */</span><br><span class="line">    public void set(T value) &#123;</span><br><span class="line">        Thread t = Thread.currentThread();</span><br><span class="line">        ThreadLocalMap map = getMap(t);</span><br><span class="line">        if (map != null)</span><br><span class="line">            map.set(this, value);</span><br><span class="line">        else</span><br><span class="line">            createMap(t, value);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * Removes the current thread&apos;s value for this thread-local</span><br><span class="line">     * variable.  If this thread-local variable is subsequently</span><br><span class="line">     * &#123;@linkplain #get read&#125; by the current thread, its value will be</span><br><span class="line">     * reinitialized by invoking its &#123;@link #initialValue&#125; method,</span><br><span class="line">     * unless its value is &#123;@linkplain #set set&#125; by the current thread</span><br><span class="line">     * in the interim.  This may result in multiple invocations of the</span><br><span class="line">     * &#123;@code initialValue&#125; method in the current thread.</span><br><span class="line">     *</span><br><span class="line">     * @since 1.5</span><br><span class="line">     */</span><br><span class="line">     public void remove() &#123;</span><br><span class="line">         ThreadLocalMap m = getMap(Thread.currentThread());</span><br><span class="line">         if (m != null)</span><br><span class="line">             m.remove(this);</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><h5 id="AQS（AbstractQueuedSynchronizer）"><a href="#AQS（AbstractQueuedSynchronizer）" class="headerlink" title="AQS（AbstractQueuedSynchronizer）"></a>AQS（AbstractQueuedSynchronizer）</h5><p>AQS（AbstractQueuedSynchronizer），抽象的队列式的同步器，AQS定义了一套多线程访问共享资源的同步器框架，许多同步类实现都依赖于它，如常用的ReentrantLock/Semaphore/CountDownLatch…。</p><p><img src="201907160008.png" alt="312314"></p><p>AQS有以下几种方法：</p><ol><li>isHeldExclusively()：该线程是否正在独占资源。只有用到condition才需要去实现它。</li><li>tryAcquire(int)：独占方式。尝试获取资源，成功则返回true，失败则返回false。</li><li>tryRelease(int)：独占方式。尝试释放资源，成功则返回true，失败则返回false。</li></ol><p>以ReentrantLock为例，state初始化为0，表示未锁定状态。A线程lock()时，会调用tryAcquire()独占该锁并将state+1。此后，其他线程再tryAcquire()时就会失败，直到A线程unlock()到state=0（即释放锁）为止，其它线程才有机会获取该锁。当然，释放锁之前，A线程自己是可以重复获取此锁的（state会累加），这就是可重入的概念。但要注意，获取多少次就要释放多么次，这样才能保证state是能回到零态的。</p><p>上面是AQS定义的资源独占方式，其实还有资源共享方式，采用以下两种方法：</p><ol><li>tryAcquireShared(int)：共享方式。尝试获取资源。负数表示失败；0表示成功，但没有剩余可用资源；正数表示成功，且有剩余资源。</li><li>tryReleaseShared(int)：共享方式。尝试释放资源，如果释放后允许唤醒后续等待结点返回true，否则返回false。</li></ol><h5 id="CAS（Compare-and-swap）"><a href="#CAS（Compare-and-swap）" class="headerlink" title="CAS（Compare and swap）"></a>CAS（Compare and swap）</h5><p> CAS（Compare and swap）比较和替换是设计并发算法时用到的一种技术。简单来说，比较和替换是使用一个期望值和一个变量的当前值进行比较，如果当前变量的值与我们期望的值相等，就使用一个新值替换当前变量的值。</p><p>现在CPU内部已经执行原子的CAS操作，Java5+中内置的CAS特性可以让你利用底层的你的程序所运行机器的CPU的CAS特性，这会使代码运行更快。</p><p>Java5以来，你可以使用java.util.concurrent.atomic包中的一些原子类来使用CPU中的这些功能</p><p><img src="201907160009.png" alt="31231"></p><p>上面是一个使用AtomicBoolean类实现lock()方法的例子。</p><p>locked变量不再是boolean类型而是AtomicBoolean。这个类中有一个compareAndSet()方法，它使用一个期望值和AtomicBoolean实例的值比较，若两者相等，则使用一个新值替换原来的值。在这个例子中，它比较locked的值和false，如果locked的值为false，则把修改为true。</p><p>即compareAndSet()返回true，如果值被替换了，返回false。</p><p>CAS用于同步（乐观锁的机制就是CAS）</p><ol><li>通常将 CAS 用于同步的方式是从地址 V 读取值 A，执行多步计算来获得新 值  B，然后使用 CAS 将 V 的值从 A 改为 B。如果 V 处的值尚未同时更改，则 CAS 操作成功。</li><li>类似于 CAS 的指令允许算法执行读-修改-写操作，而无需害怕其他线程同时 修改变量，因为如果其他线程修改变量，那么 CAS 会检测它（并失败），算法 可以对该操作重新计算</li></ol><p>CAS存在的问题：有三个，ABA问题，循环时间长开销大和只能保证一个共享变量的原子操作。<br>ABA问题：</p><ol><li>因为CAS需要在操作值的时候检查下值有没有发生变化，如果没有发生变化则更新，但是如果一个值原来是A，变成了B，又变成了A，那么使用CAS进行检查时会发现它的值没有发生变化，但是实际上却变化了。ABA问题的解决思路就是使用版本号。在变量前面追加上版本号，每次变量更新的时候把版本号加一，那么A－B－A 就会变成1A-2B－3A。</li><li>从Java1.5开始JDK的atomic包里提供了一个类AtomicStampedReference来解决ABA问题。这个类的compareAndSet方法作用是首先检查当前引用是否等于预期引用，并且当前标志是否等于预期标志，如果全部相等，则以原子方式将该引用和该标志的值设置为给定的更新值。</li></ol><p>循环时间长开销大：</p><ol><li>自旋CAS如果长时间不成功，会给CPU带来非常大的执行开销。</li><li>如果JVM能支持处理器提供的pause指令那么效率会有一定的提升，pause指令有两个作用，第一它可以延迟流水线执行指令（de-pipeline）,使CPU不会消耗过多的执行资源，延迟的时间取决于具体实现的版本，在一些处理器上延迟时间是零。第二它可以避免在退出循环的时候因内存顺序冲突（memory order violation）而引起CPU流水线被清空（CPU pipeline flush），从而提高CPU的执行效率。</li></ol><p>只能保证一个共享变量的原子操作：</p><ol><li>当对一个共享变量执行操作时，我们可以使用循环CAS的方式来保证原子操作，但是对多个共享变量操作时，循环CAS就无法保证操作的原子性。</li><li>这个时候就可以用锁，或者有一个取巧的办法，就是把多个共享变量合并成一个共享变量来操作。比如有两个共享变量i＝2,j=a，合并一下ij=2a，然后用CAS来操作ij。从Java1.5开始JDK提供了AtomicReference类来保证引用对象之间的原子性，你可以把多个变量放在一个对象里来进行CAS操作</li></ol><h4 id="死锁分析"><a href="#死锁分析" class="headerlink" title="死锁分析"></a>死锁分析</h4><p>死锁就是两个或者多个线程，相互占用对方需要的资源，而都不进行释放，导致彼此之间相互等待对方释放资源，产生了无限制的等待现象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">public class DeadLockDemo extends Thread &#123;</span><br><span class="line">    protected Object tool;</span><br><span class="line">    static Object obj1 = new Object();</span><br><span class="line">    static Object obj2 = new Object();</span><br><span class="line"></span><br><span class="line">    public DeadLockDemo(Object obj)&#123;</span><br><span class="line">        this.tool=obj;</span><br><span class="line">        if(tool==obj1)&#123;</span><br><span class="line">            this.setName(&quot;哲学家A&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        if(tool==obj2)&#123;</span><br><span class="line">            this.setName(&quot;哲学家B&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void run()&#123;</span><br><span class="line">        if(tool==obj1)&#123;</span><br><span class="line">            synchronized (obj1)&#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    Thread.sleep(500);</span><br><span class="line">                &#125;catch (Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                synchronized (obj2)&#123;</span><br><span class="line">                    System.out.println(&quot;A eat&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if(tool==obj2)&#123;</span><br><span class="line">            synchronized (obj2)&#123;</span><br><span class="line">                try&#123;</span><br><span class="line">                    Thread.sleep(500);</span><br><span class="line">                &#125;</span><br><span class="line">                catch (Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                synchronized (obj1)&#123;</span><br><span class="line">                    System.out.println(&quot;B eat&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        DeadLockDemo A = new DeadLockDemo(obj1);</span><br><span class="line">        DeadLockDemo B = new DeadLockDemo(obj2);</span><br><span class="line">        A.start();</span><br><span class="line">        B.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>产生死锁的四个必要条件： </p><ol><li><p>互斥条件：一个资源每次只能被一个进程使用。 </p></li><li><p>请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放。 </p></li><li><p>不剥夺条件:进程已获得的资源，在末使用完之前，不能强行剥夺。 </p></li><li><p>循环等待条件:若干进程之间形成一种头尾相接的循环等待资源关系</p></li></ol><p>如何避免死锁？ </p><ol><li><p>从死锁的四个必要条件来看，破坏其中的任意一个条件就可以避免死锁。但互斥条件是由资源本身决定的，不剥夺条件一般无法破坏，要实现的话得自己写更多的逻辑。 </p></li><li><p>避免无限期的等待：用Lock.tryLock(),wait/notify等方法写出请求一定时间后，放弃已经拥有的锁的程序。 </p></li><li><p>注意锁的顺序：以固定的顺序获取锁，可以避免死锁。 </p></li><li><p>开放调用：即只对有请求的进行封锁。你应当只想你要运行的资源获取封锁，比如在上述程序中我在封锁的完全的对象资源。但是如果我们只对它所属领域中的一个感兴趣，那我们应当封锁住那个特殊的领域而并非完全的对象。 </p></li><li><p>最后，如果能避免使用多个锁，甚至写出无锁的线程安全程序是再好不过了</p></li></ol><h5 id="BlockingQueue解决生产者消费者问题"><a href="#BlockingQueue解决生产者消费者问题" class="headerlink" title="BlockingQueue解决生产者消费者问题"></a>BlockingQueue解决生产者消费者问题</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">public class ProduceAndConsumerDemo &#123;</span><br><span class="line">    public static void main(String[] argd)&#123;</span><br><span class="line">        final BlockingQueue&lt;Integer&gt; blockingQueue = new ArrayBlockingQueue&lt;&gt;(10);</span><br><span class="line">        Produce produce = new Produce(blockingQueue);</span><br><span class="line">        Consume consume = new Consume(blockingQueue);</span><br><span class="line">        produce.start();</span><br><span class="line">        consume.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static class Consume extends Thread&#123;</span><br><span class="line">        private final BlockingQueue&lt;Integer&gt; blockingQueue;</span><br><span class="line">        Consume(BlockingQueue&lt;Integer&gt; blockingQueue)&#123;</span><br><span class="line">            this.blockingQueue=blockingQueue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            while (true)&#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    Integer take = blockingQueue.take();</span><br><span class="line">                    System.out.println(&quot;consume:&quot; + take);</span><br><span class="line">                &#125;catch (InterruptedException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static class Produce extends Thread&#123;</span><br><span class="line">        private final BlockingQueue&lt;Integer&gt; blockingQueue;</span><br><span class="line">        Produce(BlockingQueue&lt;Integer&gt; blockingQueue)&#123;</span><br><span class="line">            this.blockingQueue=blockingQueue;</span><br><span class="line">        &#125;</span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            while (true)&#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    int i = new Random().nextInt(100);</span><br><span class="line">                    blockingQueue.add(i);</span><br><span class="line">                    System.out.println(&quot;produce:&quot;+ i);</span><br><span class="line">                    Thread.sleep(1000);</span><br><span class="line">                &#125;catch (InterruptedException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="使用wait和notify实现生产者和消费者"><a href="#使用wait和notify实现生产者和消费者" class="headerlink" title="使用wait和notify实现生产者和消费者"></a>使用wait和notify实现生产者和消费者</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">public class ProduceAndConsumerDemo2 &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Queue&lt;Integer&gt; queue = new LinkedList&lt;&gt;();</span><br><span class="line">        int maxSize = 5;</span><br><span class="line">        Produce produce = new Produce(queue,maxSize);</span><br><span class="line">        Consume consume = new Consume(queue,maxSize);</span><br><span class="line">        produce.start();</span><br><span class="line">        consume.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static class Produce extends Thread&#123;</span><br><span class="line">        private Queue&lt;Integer&gt; queue;</span><br><span class="line">        private int maxSize;</span><br><span class="line"></span><br><span class="line">        Produce(Queue&lt;Integer&gt; queue , int maxSize)&#123;</span><br><span class="line">            this.queue = queue;</span><br><span class="line">            this.maxSize = maxSize;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void run()&#123;</span><br><span class="line">            while (true)&#123;</span><br><span class="line">                synchronized (queue)&#123;</span><br><span class="line">                    while (queue.size()==maxSize)&#123;</span><br><span class="line">                        try &#123;</span><br><span class="line">                            System.out.println(&quot;full&quot;);</span><br><span class="line">                            queue.wait();</span><br><span class="line">                        &#125;catch (InterruptedException e)&#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    int i = new Random().nextInt(100);</span><br><span class="line">                    System.out.println(&quot;produce:&quot;+ i);</span><br><span class="line">                    queue.add(i);</span><br><span class="line">                    queue.notifyAll();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static class Consume extends Thread&#123;</span><br><span class="line">        private Queue&lt;Integer&gt; queue;</span><br><span class="line">        private int maxSize;</span><br><span class="line"></span><br><span class="line">        Consume(Queue&lt;Integer&gt; queue , int maxSize)&#123;</span><br><span class="line">            this.queue = queue;</span><br><span class="line">            this.maxSize = maxSize;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void run()&#123;</span><br><span class="line">            while (true)&#123;</span><br><span class="line">                synchronized (queue)&#123;</span><br><span class="line">                    while (queue.isEmpty())&#123;</span><br><span class="line">                        try &#123;</span><br><span class="line">                            System.out.println(&quot;empty&quot;);</span><br><span class="line">                            queue.wait();</span><br><span class="line">                        &#125;catch (InterruptedException e)&#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    int i = queue.poll();</span><br><span class="line">                    System.out.println(&quot;consume:&quot;+ i);</span><br><span class="line">                    queue.notifyAll();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h5><p>《Java高并发编程详解》</p><p>《实战Java高并发程序设计》</p><p>《Java多线程编程核心技术》</p><p><a href="https://github.com/ZXZxin/ZXBlog/tree/master/%E5%B9%B6%E5%8F%91/%E5%A4%9A%E7%BA%BF%E7%A8%8B" target="_blank" rel="noopener">https://github.com/ZXZxin/ZXBlog/tree/master/%E5%B9%B6%E5%8F%91/%E5%A4%9A%E7%BA%BF%E7%A8%8B</a></p><p><a href="https://blog.csdn.net/ll666634/article/details/78615505" target="_blank" rel="noopener">https://blog.csdn.net/ll666634/article/details/78615505</a></p><p><a href="https://blog.csdn.net/cmyperson/article/details/79610870" target="_blank" rel="noopener">https://blog.csdn.net/cmyperson/article/details/79610870</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Java多线程基础&quot;&gt;&lt;a href=&quot;#Java多线程基础&quot; class=&quot;headerlink&quot; title=&quot;Java多线程基础&quot;&gt;&lt;/a&gt;Java多线程基础&lt;/h2&gt;&lt;h3 id=&quot;并行基础概念&quot;&gt;&lt;a href=&quot;#并行基础概念&quot; class=&quot;head
      
    
    </summary>
    
      <category term="Java" scheme="http://ylovex.cn/categories/Java/"/>
    
    
      <category term="Java" scheme="http://ylovex.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Redis设计与实现笔记七</title>
    <link href="http://ylovex.cn/2019/07/13/Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E7%AC%94%E8%AE%B0%E4%B8%83/"/>
    <id>http://ylovex.cn/2019/07/13/Redis设计与实现笔记七/</id>
    <published>2019-07-13T03:37:37.000Z</published>
    <updated>2019-07-14T03:45:31.182Z</updated>
    
    <content type="html"><![CDATA[<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>Redis构建了一个对象系统，包含字符串、列表对象、哈希对象、集合对象和有序集合对象这五种类型的对象</p><p>Redis可以在执行命令前，根据对象的类型判断一个对象是否可以执行给定的命令。可以针对不同的使用场景，为对象设置多种不同的数据结构实现，从而优化对象在不同场景下的使用效率。</p><p>Redis对象系统实现基于引用计数技术的内存回收机制，还可以通过引用计数技术实现了对象共享机制，通过让多个数据库键共享同一个对象来节约内存</p><p>Redis对象带有访问时间记录信息，该信息可以用于计算数据库键的空转时长，在服务器启用了maxmemory功能情况下，空转时长较长的那些键可能会优先被服务器删除</p><h4 id="对象的类型与编码"><a href="#对象的类型与编码" class="headerlink" title="对象的类型与编码"></a>对象的类型与编码</h4><p>Redis使用对象来表示数据库中的键和值，新创建一个键值对的时候，会创建两个对象，一个用于键一个用于值。</p><p>每个对象都由一个redisObject结构表示，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/* The actual Redis Object */</span><br><span class="line">/*</span><br><span class="line"> * Redis 对象</span><br><span class="line"> */</span><br><span class="line">#define REDIS_LRU_BITS 24</span><br><span class="line">#define REDIS_LRU_CLOCK_MAX ((1&lt;&lt;REDIS_LRU_BITS)-1) /* Max value of obj-&gt;lru */</span><br><span class="line">#define REDIS_LRU_CLOCK_RESOLUTION 1000 /* LRU clock resolution in ms */</span><br><span class="line">typedef struct redisObject &#123;</span><br><span class="line"></span><br><span class="line">    // 类型</span><br><span class="line">    unsigned type:4;</span><br><span class="line"></span><br><span class="line">    // 编码</span><br><span class="line">    unsigned encoding:4;</span><br><span class="line"></span><br><span class="line">    // 对象最后一次被访问的时间</span><br><span class="line">    unsigned lru:REDIS_LRU_BITS; /* lru time (relative to server.lruclock) */</span><br><span class="line"></span><br><span class="line">    // 引用计数</span><br><span class="line">    int refcount;</span><br><span class="line"></span><br><span class="line">    // 指向实际值的指针</span><br><span class="line">    void *ptr;</span><br><span class="line"></span><br><span class="line">&#125; robj;</span><br></pre></td></tr></table></figure><ol><li>type属性记录了对象的类型，键总是一个字符串对象；值可以是字符串对象、列表对象、哈希对象、集合对象或者有序集合对象，当对一个数据库键执行TYPE命令时候，返回的是值对象类型</li><li>对象的ptr指针指向对象的底层实现数据结构，而这个数据结构又对象的enconding属性决定</li></ol><p>enconding属性记录了对象所使用的编码：</p><p><img src="2019071208503.png" alt="32433211"></p><p>每种类型对象都至少使用了两种不同的编码：</p><p><img src="2019071208504.png" alt="213112241"></p><p>根据不同的使用场景为一个对象设置不同的编码，从而优化对象在某一场景下的效率</p><h4 id="字符串对象"><a href="#字符串对象" class="headerlink" title="字符串对象"></a>字符串对象</h4><p>字符串对象编码可以是int、raw、embstr</p><p>如果一个字符串对象保存的是整数值，并且这个整数值可以用long类型来表示，那么字符串对象会将整数值保持在字符串对象结构的ptr属性里面（将void*转换为long），并将字符串对象编码设置为int</p><p>如果字符串对象保存的是一个字符串值，并且这个字符串值的长度大于32字节，那么字符串对象将使用一个简单动态字符串（SDS）来保存这个字符串值，并将对象的编码设置为raw</p><p>如果保存的字符串长度小于等于32字节。用embstr编码保存，专门用于保存短字符串，这种编码和raw编码一样，都使用redisObject结构和sdshdr结构来表示字符串对象，但是raw编码会调用两次内存分配函数分别创建redisObject结构和sdshdr结构，而embstr编码则通过调用一次内存分配函数分配一块连续空间，空间中依次包含redisObject和sdshdr两个结构</p><p>可以用long double类型表示的浮点数在Redis中也是作为字符串值保存</p><p>int编码的字符串对象和embstr编码的字符串对象在条件满足的情况下，会被转换为raw编码</p><h4 id="列表对象"><a href="#列表对象" class="headerlink" title="列表对象"></a>列表对象</h4><p>编码可以是ziplist或者linkedlist</p><p><img src="2019071208505.png" alt="32314141"></p><p><img src="2019071208506.png" alt="241414141"></p><p>编码转换：当列表对象同时满足以下两个条件，使用ziplist编码</p><ol><li>保存的所有字符串元素的长度都小于64字节</li><li>列表对象保存的元素数量小于512个</li></ol><p>可以在配置文件中list-max-ziplist-value和list-max-ziplist-entries配置</p><h4 id="哈希对象"><a href="#哈希对象" class="headerlink" title="哈希对象"></a>哈希对象</h4><p>编码可以是ziplist或者hashtable</p><p>ziplist编码的哈希对象使用压缩列表作为底层实现，每当有新的键值对要加入到哈希对象时候，程序会将保存了键的压缩列表节点推入到压缩列表表尾，然后将保存了值的压缩列表节点推入到压缩列表表尾，因此：</p><ol><li>保存了同一个键值对的两个节点总是紧挨在一起，保存键的节点在前，保存值的节点在后</li><li>先添加到哈希对象中的键值对会被放在压缩列表的表头方向，后来添加的放在表尾方向</li></ol><p>hashtable编码的哈希对象使用字典作为底层实现，哈希对象中的每个键值对都使用一个字典键值对保存</p><p>编码转换，当哈希对象同时满足：</p><ol><li>保存的所以键值对的键和值的字符串长度都小于64字节</li><li>保存的键值对数量小于512个</li></ol><p>使用ziplist编码，否则编码转化为hashtable</p><h4 id="集合对象"><a href="#集合对象" class="headerlink" title="集合对象"></a>集合对象</h4><p>编码可以是intset或者hashtable</p><p>hashtablw编码的集合对象使用字典作为底层实现，字典的每个键都是一个字符串对象，每个字符串对象包含了一个集合元素，而字典的值则全部被设置为NULL</p><p>编码转换，当满足：</p><ol><li>集合对象保存的所有元素都是整数值</li><li>保存元素数量不超过512</li></ol><p>使用intset编码，否则使用hashtable</p><h4 id="有序集合对象"><a href="#有序集合对象" class="headerlink" title="有序集合对象"></a>有序集合对象</h4><p>编码可以是ziplist或者skiplist</p><p>ziplist编码的压缩列表对象使用压缩列表作为底层实现，每个集合元素使用两个紧挨在一起的压缩列表节点来保存，第一个节点保存元素的成员，而第二个元素保存元素的分值，压缩列表内的集合元素按分值从小到大进行排序，分值较小的元素被放置在靠近表头的方向，而分值较大的元素则被放置在靠近表尾方法</p><p>skiplist编码的有序集合对象使用zset结构作为底层实现，一个zset结构同时包含一个字典和一个跳跃表，zset结构中的zsl跳跃表按分值从小到大保存了所有集合元素，通过跳跃表可以进行范围型操作比如ZRANK、ZRANGE等，dict字典为有序集合创建了一个从成员到分值的映射，可以用O（1）查找给定成员的分值</p><h4 id="类型检查与命名多态"><a href="#类型检查与命名多态" class="headerlink" title="类型检查与命名多态"></a>类型检查与命名多态</h4><p>命令可以分为两种类型，一种命令可以对任何类型的键执行，比如DEL、EXPIRE、RENAME、TYPE、OBJECT等</p><p>另一种只能对特定类型的键执行，比如SET只能对字符串键执行，HSET只能对哈希键执行</p><h5 id="类型检查的实现"><a href="#类型检查的实现" class="headerlink" title="类型检查的实现"></a>类型检查的实现</h5><p>为了确保只有指定类型的键可以执行某些特定的命令，在执行一个类型特定的命令之前，Redis会先检查输入键的类型是否正确，然后再决定是否执行给定的命令</p><h5 id="多态命令实现"><a href="#多态命令实现" class="headerlink" title="多态命令实现"></a>多态命令实现</h5><p>根据值对象的编码方式，选择正确的命令实现代码执行命令</p><h4 id="内存回收"><a href="#内存回收" class="headerlink" title="内存回收"></a>内存回收</h4><p>跟踪对象的引用计数信息，在适当的时候自动释放对象并进行内存回收</p><h4 id="对象共享"><a href="#对象共享" class="headerlink" title="对象共享"></a>对象共享</h4><p> Redis会在初始化服务器时，创建一万个字符串对象，这些对象包含了从0到9999的所以整数值，当服务器需要用到值为0到999的字符串对象时，服务器就会使用这些共享对象，而不是新创建对象</p><p>Redis只对包含整数值的字符串对象进行共享</p><h4 id="对象的空转时长"><a href="#对象的空转时长" class="headerlink" title="对象的空转时长"></a>对象的空转时长</h4><p>redisObject结构包含的lru属性，记录了对象最后一次被命令程序访问的时间</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;对象&quot;&gt;&lt;a href=&quot;#对象&quot; class=&quot;headerlink&quot; title=&quot;对象&quot;&gt;&lt;/a&gt;对象&lt;/h3&gt;&lt;p&gt;Redis构建了一个对象系统，包含字符串、列表对象、哈希对象、集合对象和有序集合对象这五种类型的对象&lt;/p&gt;
&lt;p&gt;Redis可以在执行命令
      
    
    </summary>
    
      <category term="Redis" scheme="http://ylovex.cn/categories/Redis/"/>
    
    
      <category term="Redis" scheme="http://ylovex.cn/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis设计与实现笔记六</title>
    <link href="http://ylovex.cn/2019/07/10/Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E7%AC%94%E8%AE%B0%E5%85%AD/"/>
    <id>http://ylovex.cn/2019/07/10/Redis设计与实现笔记六/</id>
    <published>2019-07-10T03:37:28.000Z</published>
    <updated>2019-07-14T03:43:38.196Z</updated>
    
    <content type="html"><![CDATA[<h3 id="压缩列表"><a href="#压缩列表" class="headerlink" title="压缩列表"></a>压缩列表</h3><p>压缩列表是列表键和哈希键的底层实现之一。</p><p>使用压缩列表作为列表键底层实现：列表键只包含少量列表项，并且每个列表项要么是小整数值要么是长度比较短的字符串</p><p>使用压缩列表作为哈希键底层实现：哈希键只包含少量键值对，并且每个键值对的键和值要么就是小整数值，要么就是长度比较短的字符串</p><h4 id="压缩列表构成"><a href="#压缩列表构成" class="headerlink" title="压缩列表构成"></a>压缩列表构成</h4><p>ziplist是Redis为了节约内存而开发的，各部分如下</p><p><img src="2019071208502.png" alt="31284971924"></p><h4 id="节点构成"><a href="#节点构成" class="headerlink" title="节点构成"></a>节点构成</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">* 保存 ziplist 节点信息的结构</span><br><span class="line"> */</span><br><span class="line">typedef struct zlentry &#123;</span><br><span class="line"></span><br><span class="line">    // prevrawlen ：前置节点的长度</span><br><span class="line">    // prevrawlensize ：编码 prevrawlen 所需的字节大小</span><br><span class="line">    unsigned int prevrawlensize, prevrawlen;</span><br><span class="line"></span><br><span class="line">    // len ：当前节点值的长度</span><br><span class="line">    // lensize ：编码 len 所需的字节大小</span><br><span class="line">    unsigned int lensize, len;</span><br><span class="line"></span><br><span class="line">    // 当前节点 header 的大小</span><br><span class="line">    // 等于 prevrawlensize + lensize</span><br><span class="line">    unsigned int headersize;</span><br><span class="line"></span><br><span class="line">    // 当前节点值所使用的编码类型</span><br><span class="line">    unsigned char encoding;</span><br><span class="line"></span><br><span class="line">    // 指向当前节点的指针</span><br><span class="line">    unsigned char *p;</span><br><span class="line"></span><br><span class="line">&#125; zlentry;</span><br></pre></td></tr></table></figure><p>每个压缩列表节点可以保存一个字节数组或者一个整数值，</p><p>添加新节点或者删除节点，可能会引发连锁更新操作，导致需要对压缩列表执行N次空间重分配操作，最坏复杂度O（N^2）。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;压缩列表&quot;&gt;&lt;a href=&quot;#压缩列表&quot; class=&quot;headerlink&quot; title=&quot;压缩列表&quot;&gt;&lt;/a&gt;压缩列表&lt;/h3&gt;&lt;p&gt;压缩列表是列表键和哈希键的底层实现之一。&lt;/p&gt;
&lt;p&gt;使用压缩列表作为列表键底层实现：列表键只包含少量列表项，并且每个列表
      
    
    </summary>
    
      <category term="Redis" scheme="http://ylovex.cn/categories/Redis/"/>
    
    
      <category term="Redis" scheme="http://ylovex.cn/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>jvm虚拟机执行子系统</title>
    <link href="http://ylovex.cn/2019/07/09/jvm%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%89%A7%E8%A1%8C%E5%AD%90%E7%B3%BB%E7%BB%9F/"/>
    <id>http://ylovex.cn/2019/07/09/jvm虚拟机执行子系统/</id>
    <published>2019-07-09T12:26:37.000Z</published>
    <updated>2019-07-11T12:33:18.278Z</updated>
    
    <content type="html"><![CDATA[<h3 id="虚拟机执行子系统"><a href="#虚拟机执行子系统" class="headerlink" title="虚拟机执行子系统"></a>虚拟机执行子系统</h3><h4 id="类文件结构"><a href="#类文件结构" class="headerlink" title="类文件结构"></a>类文件结构</h4><p>任何一个Class文件都对应着唯一一个类或者接口的定义信息，但反过来说，类或接口并不一定都得定义在文件里（譬如类或者接口也可以通过类加载器直接生成）。</p><p>Class文件是一组以8位字节为基础单位的二进制流，各个数据项目严格按照顺序紧凑地 排列在Class文件之中，中间没有添加任何分隔符，这使得整个Class文件中存储的内容几乎 全部是程序运行的必要数据，没有空隙存在。当遇到需要占用8位字节以上空间的数据项时，则会按照高位在前的方式分割成若干个8位字节进行存储。</p><p>Class文件格式采用一种类似于C语言结构体的伪结构来存 储数据，这种伪结构中只有两种数据类型：无符号数和表：</p><ol><li>无符号数属于基本的数据类型，以u1、u2、u4、u8来分别代表1个字节、2个字节、4个 字节和8个字节的无符号数，无符号数可以用来描述数字、索引引用、数量值或者按照UTF-8 编码构成字符串值。 </li><li>表是由多个无符号数或者其他表作为数据项构成的复合数据类型，所有表都习惯性以“_info”结尾。表用于描述有层次关系的复合结构的数据，整个Class文件本质上就是一张表。</li></ol><p><img src="201907070950.png" alt="2070950"></p><h5 id="Class类文件结构详解："><a href="#Class类文件结构详解：" class="headerlink" title="Class类文件结构详解："></a>Class类文件结构详解：</h5><ol><li>魔数：每个Class文件的头4个字节称为魔数，唯一的作用是确定这个文件是否为一个能被虚拟机接受的Class文件。值为：0xCAFEBABE。</li><li>版本号：紧接着魔数的4个字节存储的是Class文件的版本号，第5和第6个字节是次版本号，第7和第8个字节是主版本号。java版本号从45开始。</li><li>常量池：紧接着版本号之后的是常量池入口，常量池可以理解为Class文件之中的资源仓库，常量池入口需要放置一项u2类型的数据，代表常量池容量计数器，该容量计数从1开始而不是0；常量池主要存在两大类常量：字面量和符号引用，字面量比较接近于java语言层面的常量概念，如文本字符串、声明为final的常量值等。符号引用则属于编译原理方面的概念，包含：类和接口的全限定名、字段的名称和描述符、方法的名称和描述符。</li><li>访问标志：常量池结束后，紧接着的两个字符代表访问标志，这个标志用于识别一些类或者接口层次的访问信息，包括：这个Class是类还是接口、是否定义为public类型、是否定义为abstract类型、如果是类的话，是否被声明为final等</li><li>类索引、父类索引、接口索引：类索引和父类索引都是一个u2类型的数据，而接口索引集合是一组u2类型的数据集合</li><li>字符表集合：用于描述接口或者类中声明的变量，字段包括类级变量以及实例级变量，但不包括在方法内部声明的局部变量。</li><li>方法表集合：结构如同字段表一样，依次包括了访问标志、名称索引、描述符索引、属性表集合几项</li><li>属性表集合：常用属性如下<ol><li>Code属性；使用位置：方法表；含义：Java代码编译成的字节码指令</li><li>ConstantValue属性；字段表；final关键字定义的常量值</li><li>Deprecated属性；类、方法表、字段表；被声明为deprecated的方法和字段</li><li>Exceptions属性、方法表、方法抛出的异常</li><li>EnclosingMethod属性、方法表、仅当一个类为局部类或者匿名类时才能拥有这个属性，这个属性用于标识这个类所在的外围方法</li></ol></li></ol><h4 id="虚拟机类加载机制"><a href="#虚拟机类加载机制" class="headerlink" title="虚拟机类加载机制"></a>虚拟机类加载机制</h4><p>虚拟机把描述类的数据从Class文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的Java类型，这就是JVM的类加载机制。</p><h5 id="类加载的时机"><a href="#类加载的时机" class="headerlink" title="类加载的时机"></a>类加载的时机</h5><p>类从被加载到虚拟机内存中开始，到卸载出内存为止，它的整个生命周期包括：加载 （Loading）、验证（Verification）、准备（Preparation）、解析（Resolution）、初始化 （Initialization）、使用（Using）和卸载（Unloading）7个阶段。其中验证、准备、解析3个 部分统称为连接（Linking）</p><p><img src="201907080950.png" alt="7080950"></p><p>其中，加载、验证、准备、初始化和卸载这5个阶段是确认的，</p><p>解析阶段不一定：在某些情况在初始化阶段之后开始，这是为了支持Java语言的运行时绑定（也称为动态绑定或晚期绑定）</p><p>虚拟机严格规定了有且只有5种情况必须立即对类进行“初始化”（而加载、验证、准备自然需要在此之前开始）：</p><ol><li>遇到new、getstatic、putstatic或invokestatic这4条字节码指令时，如果类没有进行过初始化，则需要先触发其初始化。生成这4条指令的最常见的Java代码场景是：使用new关键字实例化对象的时候、读取或设置一个类的静态字段（被final修饰、已在编译期把结果放入常量池的静态字段除外）的时候，以及调用一个类的静态方法的时候。 </li><li>使用java.lang.reflect包的方法对类进行反射调用的时候，如果类没有进行过初始化， 则需要先触发其初始化</li><li>当初始化一个类的时候，如果发现其父类还没有进行过初始化，则需要先触发其父类的初始化</li><li>当虚拟机启动时，用户需要指定一个要执行的主类（包含main（）方法的那个 类），虚拟机会先初始化这个主类</li><li>当使用JDK 1.7的动态语言支持时，如果一个java.lang.invoke.MethodHandle实例最后<br>的解析结果REF_getStatic、REF_putStatic、REF_invokeStatic的方法句柄，并且这个方法句柄 所对应的类没有进行过初始化，则需要先触发其初始化。 </li></ol><p>对于这5种会触发类进行初始化的场景，虚拟机规范中使用了一个很强烈的限定语：“有 且只有”，这5种场景中的行为称为对一个类进行主动引用。除此之外，所有引用类的方式都 不会触发初始化，称为被动引用：</p><ol><li>对于静态字段，只有直接定义这个字段的类才会被初始化，因此通过其子类来引用父类中定义的静态字段，只会触发父类的初始化而不会触发子类的初始化</li><li>通过数组定义来引用类，不会触发此类的初始化 </li><li>常量在编译阶段会存入调用类的常量池中，本质上并没有直接引用到定义常量的类，因此不会触发定义常量的类的初始化</li></ol><p>接口也用初始化过程，当一个类在初始化时，要求其父类全部都已经初始 化过了，但是一个接口在初始化时，并不要求其父接口全部都完成了初始化，只有在真正使 用到父接口的时候（如引用接口中定义的常量）才会初始化。 </p><h5 id="类加载过程"><a href="#类加载过程" class="headerlink" title="类加载过程"></a>类加载过程</h5><h6 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h6><ol><li>通过一个类的全限定名来获取定义此类的二进制字节流。JVM把这个阶段的动作放在了虚拟机外部的“类加载器”中实现。未指明从哪里获取，因此有各种花样，比如从JAR包、WAR包，或者网络，或者运行时计算生成比如动态代理、由其他文件生成、从数据库读取等等。</li><li>将这个字节流所代表的的静态存储结构转化为方法区的运行时数据结构。</li><li>在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口。即对象类型数据（非对象实例数据）存在方法区。</li></ol><h6 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h6><p>验证的目的是确保Class文件的字节流中包含的信号符合当前虚拟机的要求，不会危害虚拟机自身的安全。</p><p>分为四个阶段：</p><ol><li>文件格式验证：验证字节流是否符合Class文件格式的规范，并且能被当前版本的虚拟机处理</li><li>元数据验证：是对字节码描述的信息进行语义分析，以保证其描述的信息符合Java语言规范的要求</li><li>字节码验证：主要是通过数据流和控制流分析，确定程序语义是合法的、符合逻辑的</li><li>符号引用验证：发生在虚拟机将符号引用转化为直接引用的时候，这个转化动作将在连接的第三阶段–解析阶段中发生。符号引用验证可以看做是对类自身以外的信息进行匹配性校验。</li></ol><p>对于虚拟机的类加载机制来说，验证阶段是一个非常重要的、但不是一定必要（因为对 程序运行期没有影响）的阶段。如果所运行的全部代码（包括自己编写的及第三方包中的代 码）都已经被反复使用和验证过，那么在实施阶段就可以考虑使用-Xverify：none参数来关 闭大部分的类验证措施，以缩短虚拟机类加载的时间。 </p><h6 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h6><p>准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，这些变量所使用的内存都将在方法区中进行分配。</p><p>这个阶段中有两个容易产生混淆的概念需要强调一下，首先，这时候进行内存分配的仅包括类变量（被static修饰的变量），而不包括实例变量，实例变量将会在对象实例化时随着对象一起分配在Java堆中。其次，这里所说的初始值“通常情况”下是数据类型的零值。</p><p>比如public static int value=123：在准备阶段过后value=0，只有在初始化阶段后，value才等于123；</p><p>但是如何类字段的字段属性表中存在ConstantValue属性，那么在准备阶段变量value就会被初始化为ConstantValue属性所指定的值，比如 public static final int value=123，编译时Javac将会为value生成ConstantValue属性，在准备阶段虚拟机就会根据ConstantValue的设置将value赋值为123.</p><h6 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h6><p>解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程。</p><p>符号引用（Symbolic References）：符号引用以一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可。符号引用与虚拟机实现的内存布局无关，引用的目标并不一定已经加载到内存中。</p><p>直接引用（Direct References）：直接引用可以是直接指向目标的指针、相对偏移量或是 一个能间接定位到目标的句柄。直接引用是和虚拟机实现的内存布局相关的，同一个符号引 用在不同虚拟机实例上翻译出来的直接引用一般不会相同。如果有了直接引用，那引用的目标必定已经在内存中存在</p><p>虚拟机规范之中并未规定解析阶段发生的具体时间，只要求了在执行anewarray、 checkcast、getfield、getstatic、instanceof、invokedynamic、invokeinterface、invokespecial、 invokestatic、invokevirtual、ldc、ldc_w、multianewarray、new、putfield和putstatic这16个用于 操作符号引用的字节码指令之前，先对它们所使用的符号引用进行解析</p><p>对同一个符号引用进行多次解析请求是很常见的事情，除invokedynamic指令以外，虚拟 机实现可以对第一次解析的结果进行缓存（在运行时常量池中记录直接引用，并把常量标识 为已解析状态）从而避免解析动作重复进行。</p><p>对于invokedynamic指令，上面规则则不成立。当碰到某个前面已经由invokedynamic指令 触发过解析的符号引用时，并不意味着这个解析结果对于其他invokedynamic指令也同样生 效。因为invokedynamic指令的目的本来就是用于动态语言支持（目前仅使用Java语言不会生 成这条字节码指令），它所对应的引用称为“动态调用点限定符”（Dynamic Call Site Specifier），这里“动态”的含义就是必须等到程序实际运行到这条指令的时候，解析动作才能进行。相对的，其余可触发解析的指令都是“静态”的，可以在刚刚完成加载阶段，还没有 开始执行代码时就进行解析。</p><p>解析动作主要针对类或者接口、字段、类方法、接口方法、方法类型、方法句柄和调用点限定符7类符号引用进行</p><h6 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h6><p>是类加载过程的最后一步，类加载过程中，除了在加载阶段用户应用程序可以通过自定义类加载器参与之外，其余动作完全由虚拟机主导和控制，到了初始化阶段，才开始真正执行类中定义的Java程序代码。</p><p>在准备阶段，变量已经赋过一次系统要求的初始值，而在初始化阶段，则根据程序员通 过程序制定的主观计划去初始化类变量和其他资源，或者可以从另外一个角度来表达：初始 化阶段是执行类构造器＜clinit＞（）方法的过程。</p><h5 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h5><p>虚拟机把类加载阶段中的通过一个类的全限定名来获取定义此类的二进制字节流这个动作放在了虚拟机外部的“类加载器”中实现。</p><p>对于任意一个类，都需要由加载它的类加载器和这个类本身一同确立其在Java虚拟机中的唯一性</p><p>比较两个类是否“相等”，只有在这个两个类是由同一个类加载器加载的前提下才有意义。</p><h6 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h6><p>绝大部分Java程序都会使用到3种系统提供的类加载器：</p><ol><li>启动类加载器：这个类将器负责将存放在＜ JAVA_HOME＞\lib目录中的，或者被-Xbootclasspath参数所指定的路径中的，并且是虚拟机 识别的（仅按照文件名识别，如rt.jar，名字不符合的类库即使放在lib目录中也不会被加载） 类库加载到虚拟机内存中</li><li>扩展类加载器：它负责加载＜JAVA_HOME＞\lib\ext目录中的，或者被java.ext.dirs系 统变量所指定的路径中的所有类库，开发者可以直接使用扩展类加载器。 </li><li>应用程序类加载器：它负责加载用户类路径（ClassPath）上所指定的类 库，开发者可以直接使用这个类加载器，如果应用程序中没有自定义过自己的类加载器，一 般情况下这个就是程序中默认的类加载器。</li></ol><p><img src="201907080951.png" alt="7080951"></p><p>上图就是类加载器的双亲委派模型，双亲委派模型要求除了顶层的启动类加载器外，其余的类加载器都应当 有自己的父类加载器。这里类加载器之间的父子关系一般不会以继承（Inheritance）的关系 来实现，而是都使用组合（Composition）关系来复用父加载器的代码</p><p>双亲委派模型的工作过程是：如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到顶层的启动类加载器中，只有当父加载器反馈自己无法完成这个加载请求（它的搜索范围中没有找到所需的类）时，子加载器才会尝试自己去加载。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">protected synchronized Class＜?＞loadClass（String name,boolean resolve）throws ClassNotFoundException &#123; //首先，检查请求的类是否已经被加载过了 Class c=findLoadedClass（name）； </span><br><span class="line">if（c==null）&#123; </span><br><span class="line">try&#123; </span><br><span class="line">if（parent！=null）&#123; </span><br><span class="line">c=parent.loadClass（name,false）；</span><br><span class="line">&#125;else&#123;</span><br><span class="line">c=findBootstrapClassOrNull（name）；</span><br><span class="line">&#125; </span><br><span class="line">&#125;catch（ClassNotFoundException e）&#123; </span><br><span class="line">//如果父类加载器抛出ClassNotFoundException </span><br><span class="line">//说明父类加载器无法完成加载请求</span><br><span class="line">&#125; </span><br><span class="line">if（c==null）&#123; </span><br><span class="line">//在父类加载器无法加载的时候 </span><br><span class="line">//再调用本身的findClass方法来进行类加载</span><br><span class="line">c=findClass（name）；</span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line">if（resolve）&#123; </span><br><span class="line">resolveClass（c）； </span><br><span class="line">&#125; return c；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好处：Java类随着它的类加载器一起具备了一种带有优先级的层次关系。</p><p>为什么需要双亲委派模型：</p><ol><li>例如类java.lang.Object，它存在在rt.jar中，无论哪一个类加载器要加载这个类，最终都是委派给处于模型最顶端的Bootstrap ClassLoader进行加载，因此Object类在程序的各种类加载器环境中都是同一个类。相反，如果没有双亲委派模型而是由各个类加载器自行加载的话，如果用户编写了一个java.lang.Object的同名类并放在ClassPath中，那系统中将会出现多个不同的Object类，程序将混乱。</li><li>如果不采用双亲委派模型，那么由各个类加载器自己去加载的话，那么系统中会存在多种不同的Object类。</li></ol><h4 id="虚拟机字节码执行引擎"><a href="#虚拟机字节码执行引擎" class="headerlink" title="虚拟机字节码执行引擎"></a>虚拟机字节码执行引擎</h4><p>执行引擎是Java虚拟机最核心的组成部分之一。</p><h5 id="运行时栈帧结构"><a href="#运行时栈帧结构" class="headerlink" title="运行时栈帧结构"></a>运行时栈帧结构</h5><p>栈帧（Stack Frame）是用于支持虚拟机进行方法调用和方法执行的数据结构，它是虚拟机运行时数据区中的虚拟机栈（Virtual Machine Stack）的栈元素。</p><p>栈帧存储了方法的局部变量表、操作数栈、动态连接和方法返回地址等信息。每一个方法从调用开始至执行完成的过程，都对应着一个栈帧在虚拟机栈里面从入栈到出栈的过程。</p><p> 每一个栈帧都包括了局部变量表、操作数栈、动态连接、方法返回地址和一些额外的附加信息。在编译程序代码的时候，栈帧中需要多大的局部变量表，多深的操作数栈都已经完全确定了，并且写入到方法表的Code属性之中，因此一个栈帧需要分配多少内存，不会受 到程序运行期变量数据的影响，而仅仅取决于具体的虚拟机实现。</p><p> 一个线程中的方法调用链可能会很长，很多方法都同时处于执行状态。对于执行引擎来 说，在活动线程中，只有位于栈顶的栈帧才是有效的，称为当前栈帧（Current Stack Frame），与这个栈帧相关联的方法称为当前方法（Current Method）。执行引擎运行的所有 字节码指令都只针对当前栈帧进行操作。</p><p><img src="201907080953.png" alt="080953"></p><h6 id="局部变量表"><a href="#局部变量表" class="headerlink" title="局部变量表"></a>局部变量表</h6><p>是一组变量值存储空间，用于存放方法参数和方法 内部定义的局部变量。在Java程序编译为Class文件时，就在方法的Code属性的max_locals数 据项中确定了该方法所需要分配的局部变量表的最大容量</p><p>以变量槽（Slot）为最小单位，到每个Slot都应该能存放一 个boolean、byte、char、short、int、float、reference或returnAddress类型的数据。</p><h6 id="操作数栈"><a href="#操作数栈" class="headerlink" title="操作数栈"></a>操作数栈</h6><p>也常称为操作栈，它是一个后入先出（Last In First Out,LIFO）栈。同局部变量表一样，操作数栈的最大深度也在编译的时候写入到Code属性的 max_stacks数据项中。操作数栈的每一个元素可以是任意的Java数据类型，包括long和 double。32位数据类型所占的栈容量为1，64位数据类型所占的栈容量为2。在方法执行的任 何时候，操作数栈的深度都不会超过在max_stacks数据项中设定的最大值</p><h6 id="动态连接"><a href="#动态连接" class="headerlink" title="动态连接"></a>动态连接</h6><p>每个栈帧都包含一个指向运行时常量池[1]中该栈帧所属方法的引用，持有这个引用是为 了支持方法调用过程中的动态连接（Dynamic Linking）。Class 文件的常量池中存有大量的符号引用，字节码中的方法调用指令就以常量池中指向方法的符 号引用作为参数。这些符号引用一部分会在类加载阶段或者第一次使用的时候就转化为直接引用，这种转化称为静态解析。另外一部分将在每一次运行期间转化为直接引用，这部分称为动态连接</p><h6 id="方法返回地址"><a href="#方法返回地址" class="headerlink" title="方法返回地址"></a>方法返回地址</h6><p>当一个方法开始执行后，只有两种方法可以退出：</p><ol><li>执行引擎遇到任意一个方法返回的字节码指令</li><li>遇到异常，并且该异常没有在方法体内得到处理</li></ol><h5 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h5><p>方法调用阶段唯一的任务就是确认被调用方法的版本（即调用哪一个方法），一切方法调用在Class文件里面存储的都只是符号引用，而不是方法在实践运行时内存布局中的入口地址。</p><h6 id="解析-1"><a href="#解析-1" class="headerlink" title="解析"></a>解析</h6><p>所有方法调用中的目标方法在Class文件里面都是一个常量池中的符号引用，在类加载的解析阶段会将其中一部分符号引用转化为直接引用</p><p>这类解析成立前提：方法在程序真正运行之前就有一个可确定的调用版本，并且这个方法的调用版本在运行期不可变。</p><p>符合“编译期可知，运行期不可变”：主要包括静态方法和私有方法。</p><p>Java虚拟机里面提供了5条方法调用字节指令：</p><ol><li>invokestatic：调用静态方法</li><li>invokespecial：调用实例构造器<init>方法，私有方法和父类方法</init></li><li>invokevirtual;调用所有的虚方法</li><li>invokeinterface:调用接口方法，会在运行时再确认一个实现此接口的对象</li><li>invokedynamic:先在运行时动态解析出调用点限定符所引用的方法，然后再执行该方 法，在此之前的4条调用指令，分派逻辑是固化在Java虚拟机内部的，而invokedynamic指令 的分派逻辑是由用户所设定的引导方法决定</li></ol><p>只要能被invokestatic和invokespecial指令调用的方法，都可以在解析阶段中确定唯一的 调用版本，符合这个条件的有静态方法、私有方法、实例构造器、父类方法4类，它们在类 加载的时候就会把符号引用解析为该方法的直接引用。这些方法可以称为非虚方法，与之相 反，其他方法称为虚方法（除去final方法）</p><h6 id="分派"><a href="#分派" class="headerlink" title="分派"></a>分派</h6><p>静态分派：所有依赖静态类型来定位方法执行版本的分派动作称为静态分派。典型应用是方法重载。</p><p>动态分派：在运行期根据实际类型确定方法执行的颁布的分派过程，重要体现是方法重写</p><h5 id="Java代码编译过程"><a href="#Java代码编译过程" class="headerlink" title="Java代码编译过程"></a>Java代码编译过程</h5><p><img src="201907080952.png" alt="7080952"></p><p>代码编译是由Javac编译器来完成，流程如上图所示。<br>Javac的任务就是将Java源代码编译成Java字节码，也就是JVM能够识别的二进制代码，从表面看是将.java文件转化为.class文件。而实际上是将Java源代码转化成一连串二进制数字，这些二进制数字是有格式的，只有JVM能够真确的识别他们到底代表什么意思。</p><p>具体流程：</p><ol><li>词法分析：读取源代码，一个字节一个字节的读进来，找出这些词法中我们定义的语言关键词如：if、else、while等，识别哪些if是合法的哪些是不合法的。这个步骤就是词法分析过程</li><li>语法分析：就是对词法分析中得到的token流进行语法分析，这一步就是检查这些关键词组合在一起是不是符合Java语言规范。如if的后面是不是紧跟着一个布尔型判断表达式。</li><li>语义分析：语法分析完成之后也就不存在语法问题了，语义分析的主要工作就是把一些难懂的，复杂的语法转化成更简单的语法。比如将foreach转化为for循环。</li><li>字节码生成：将会根据经过注释的抽象语法树生成字节码，也就是将一个数据结构转化为另外一个数据结构，结果就是生成符合java虚拟机规范的字节码。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;虚拟机执行子系统&quot;&gt;&lt;a href=&quot;#虚拟机执行子系统&quot; class=&quot;headerlink&quot; title=&quot;虚拟机执行子系统&quot;&gt;&lt;/a&gt;虚拟机执行子系统&lt;/h3&gt;&lt;h4 id=&quot;类文件结构&quot;&gt;&lt;a href=&quot;#类文件结构&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="jvm" scheme="http://ylovex.cn/categories/jvm/"/>
    
    
      <category term="java" scheme="http://ylovex.cn/tags/java/"/>
    
      <category term="jvm" scheme="http://ylovex.cn/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>Redis设计与实现笔记五</title>
    <link href="http://ylovex.cn/2019/07/08/Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E7%AC%94%E8%AE%B0%E4%BA%94/"/>
    <id>http://ylovex.cn/2019/07/08/Redis设计与实现笔记五/</id>
    <published>2019-07-08T03:37:21.000Z</published>
    <updated>2019-07-14T03:41:48.350Z</updated>
    
    <content type="html"><![CDATA[<h3 id="整数集合"><a href="#整数集合" class="headerlink" title="整数集合"></a>整数集合</h3><p>整数集合是集合键的底层实现之一，当一个集合只包含整数值元素，并且这个集合的元素数量不多时，Redis就会使用整数集合作为集合键的底层实现</p><h4 id="整数集合实现"><a href="#整数集合实现" class="headerlink" title="整数集合实现"></a>整数集合实现</h4><p>用于保存整数值的集合抽象数据结构，可以保存类型为int16_t、int32_t、int64_t的整数值，并且保证不会出现重复元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">typedef struct intset &#123;</span><br><span class="line">    </span><br><span class="line">    // 编码方式</span><br><span class="line">    uint32_t encoding;</span><br><span class="line"></span><br><span class="line">    // 集合包含的元素数量</span><br><span class="line">    uint32_t length;</span><br><span class="line"></span><br><span class="line">    // 保存元素的数组</span><br><span class="line">    int8_t contents[];</span><br><span class="line"></span><br><span class="line">&#125; intset;</span><br></pre></td></tr></table></figure><p>contents数组是整数集合的底层实现：整数集合的每个元素都是contents数组的一个数组项，各个项在数组中按值的大小从小到大有序排列，并且数组不包含任何重复项</p><h4 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h4><p>当新元素类型比整数集合现有所有元素的类型都要长时候，整数集合需要先升级再把新元素添加</p><p>分为三步：</p><ol><li>根据新元素，扩展整数集合底层数组的空间大小，并为新元素分配空间</li><li>将底层数组现有的所有元素都转换成与新元素相同的类型，并将类型转换后的元素放在正确位上，维持有序性质不变</li><li>将新元素添加到底层数组里面</li></ol><h5 id="升级的好处"><a href="#升级的好处" class="headerlink" title="升级的好处"></a>升级的好处</h5><ol><li>提升灵活性</li><li>节约内存</li></ol><h4 id="降级"><a href="#降级" class="headerlink" title="降级"></a>降级</h4><p>整数集合不支持降级操作，一旦对数组进行了升级，编码就会一直保持升级后的状态</p><h4 id="整数集合API"><a href="#整数集合API" class="headerlink" title="整数集合API"></a>整数集合API</h4><p><img src="2019071208501.png" alt="6876868"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;整数集合&quot;&gt;&lt;a href=&quot;#整数集合&quot; class=&quot;headerlink&quot; title=&quot;整数集合&quot;&gt;&lt;/a&gt;整数集合&lt;/h3&gt;&lt;p&gt;整数集合是集合键的底层实现之一，当一个集合只包含整数值元素，并且这个集合的元素数量不多时，Redis就会使用整数集合作为集合
      
    
    </summary>
    
      <category term="Redis" scheme="http://ylovex.cn/categories/Redis/"/>
    
    
      <category term="Redis" scheme="http://ylovex.cn/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>nowcoder-病毒传播</title>
    <link href="http://ylovex.cn/2019/07/07/nowcoder-%E7%97%85%E6%AF%92%E4%BC%A0%E6%92%AD/"/>
    <id>http://ylovex.cn/2019/07/07/nowcoder-病毒传播/</id>
    <published>2019-07-06T23:37:20.000Z</published>
    <updated>2019-07-10T23:57:56.384Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目来源："><a href="#题目来源：" class="headerlink" title="题目来源："></a>题目来源：</h3><p><a href="https://www.nowcoder.com/practice/3b6060942397444cb0fe5846e230f6d9?tpId=90&amp;tqId=30850&amp;tPage=4&amp;rp=4&amp;ru=/ta/2018test&amp;qru=/ta/2018test/question-ranking" target="_blank" rel="noopener">https://www.nowcoder.com/practice/3b6060942397444cb0fe5846e230f6d9?tpId=90&amp;tqId=30850&amp;tPage=4&amp;rp=4&amp;ru=/ta/2018test&amp;qru=/ta/2018test/question-ranking</a></p><h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p>给出一个图G(V,E)，图上有n个点，m条边，所有的边都是无向边。</p><p>最开始，也就是第0天的时候，这n个点中有一个点v感染了病毒，之后的每一天，凡是感染病毒的点都会向它的邻居点传播病毒。经过了t天之后，得到了感染病毒的点集S。要求找出第0天感染病毒的点v。如果v有很多不同的答案，把它们都找出来。</p><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>bfs算法，显然感染源一定是感染的点，先用ArrayLIst生成图，以每个感染的点为起点在t时间内进行广度遍历，将结果与给定的感染集合进行比较，如果一样则该点可以是感染源。</p><h3 id="参考代码："><a href="#参考代码：" class="headerlink" title="参考代码："></a>参考代码：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Now_74</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span>[] infected;</span><br><span class="line">    <span class="keyword">static</span> ArrayList&lt;Integer&gt;[] graph;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> n, m, k, t;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        n = sc.nextInt();</span><br><span class="line">        m = sc.nextInt();</span><br><span class="line">        infected = <span class="keyword">new</span> <span class="keyword">boolean</span>[n+<span class="number">1</span>];</span><br><span class="line">        graph = <span class="keyword">new</span> ArrayList[n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            graph[i]=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;m;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> u = sc.nextInt();</span><br><span class="line">            <span class="keyword">int</span> v = sc.nextInt();</span><br><span class="line">            graph[u].add(v);</span><br><span class="line">            graph[v].add(u);</span><br><span class="line">        &#125;</span><br><span class="line">        k = sc.nextInt();</span><br><span class="line">        t = sc.nextInt();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;k;i++)&#123;</span><br><span class="line">            infected[sc.nextInt()]=<span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(infected[i] &amp;&amp; bfs(i))&#123;</span><br><span class="line">                res.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(res.size()==<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;res.size();i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i==res.size()-<span class="number">1</span>)&#123;</span><br><span class="line">                    System.out.print(res.get(i));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.print(res.get(i)+<span class="string">" "</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//以x为起点传播t天的结果和实际结果比较是否相同</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//每个点被传染需要的时间, 为0表明没有被传染</span></span><br><span class="line">        <span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        LinkedList&lt;Integer&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        temp[x]=<span class="number">1</span>;</span><br><span class="line">        queue.offer(x);</span><br><span class="line">        <span class="keyword">while</span> (! queue.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">int</span> cur = queue.poll();</span><br><span class="line">            <span class="keyword">if</span>(temp[cur]&gt;t) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">for</span>(Integer e : graph[cur])&#123;</span><br><span class="line">                <span class="keyword">if</span>(temp[e]==<span class="number">0</span>)&#123;</span><br><span class="line">                   temp[e]=temp[cur]+<span class="number">1</span>;</span><br><span class="line">                   queue.offer(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!infected[i] &amp;&amp; temp[i]!=<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(infected[i] &amp;&amp; temp[i]==<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目来源：&quot;&gt;&lt;a href=&quot;#题目来源：&quot; class=&quot;headerlink&quot; title=&quot;题目来源：&quot;&gt;&lt;/a&gt;题目来源：&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/3b6060942397444
      
    
    </summary>
    
      <category term="nowcoder" scheme="http://ylovex.cn/categories/nowcoder/"/>
    
    
      <category term="code" scheme="http://ylovex.cn/tags/code/"/>
    
      <category term="bfs" scheme="http://ylovex.cn/tags/bfs/"/>
    
  </entry>
  
  <entry>
    <title>Redis设计与实现笔记四</title>
    <link href="http://ylovex.cn/2019/07/06/Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E7%AC%94%E8%AE%B0%E5%9B%9B/"/>
    <id>http://ylovex.cn/2019/07/06/Redis设计与实现笔记四/</id>
    <published>2019-07-06T03:37:07.000Z</published>
    <updated>2019-07-14T03:39:43.999Z</updated>
    
    <content type="html"><![CDATA[<h3 id="跳跃表"><a href="#跳跃表" class="headerlink" title="跳跃表"></a>跳跃表</h3><p>跳跃表是一种有序数据结构，它通过在每个节点中维持多个指向其他节点的指针，从而达到快速访问节点的目的。</p><p>跳跃表支持平均O（logN），最坏O（N）复杂度的节点查找，还可以通过顺序性操作来批量处理节点</p><p>Redis使用跳跃表作为有序集合键的底层实现之一，如果一个有序集合包含的元素数量比较多，或者有序集合中的元素的成员是比较长的字符串时候，Redis就会使用跳跃表来作为有序集合键的底层实现</p><p>Redis只在两个地方用到了跳跃表，一个是实现有序集合键，另一个是在集群节点中用作内部数据结构</p><h4 id="跳跃表的实现"><a href="#跳跃表的实现" class="headerlink" title="跳跃表的实现"></a>跳跃表的实现</h4><p>跳跃表由redis.h/zskiplistNode和redis.h/zskiplist两个结构定义，其中zskiplistNode结构用于表示跳跃表节点，zskiplist结构则用于保存跳跃表节点的相关信息，比如节点的数量，以及指向表头节点和表尾节点的指针等。 </p><p><img src="201907120850.png" alt="21971250"></p><ol><li>header：指向跳跃表的表头节点</li><li>tail：指向跳跃表的表尾节点</li><li>level：记录目前跳跃表内，层数最大的那个节点层数（表头节点除外）</li><li>length：记录跳跃表长度（表头节点不计算在内）</li></ol><h5 id="跳跃表节点"><a href="#跳跃表节点" class="headerlink" title="跳跃表节点"></a>跳跃表节点</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">* 跳跃表节点</span><br><span class="line"> */</span><br><span class="line">typedef struct zskiplistNode &#123;</span><br><span class="line"></span><br><span class="line">    // 成员对象</span><br><span class="line">    robj *obj;</span><br><span class="line"></span><br><span class="line">    // 分值</span><br><span class="line">    double score;</span><br><span class="line"></span><br><span class="line">    // 后退指针</span><br><span class="line">    struct zskiplistNode *backward;</span><br><span class="line"></span><br><span class="line">    // 层</span><br><span class="line">    struct zskiplistLevel &#123;</span><br><span class="line"></span><br><span class="line">        // 前进指针</span><br><span class="line">        struct zskiplistNode *forward;</span><br><span class="line"></span><br><span class="line">        // 跨度</span><br><span class="line">        unsigned int span;</span><br><span class="line"></span><br><span class="line">    &#125; level[];</span><br><span class="line"></span><br><span class="line">&#125; zskiplistNode;</span><br></pre></td></tr></table></figure><ol><li>层：level数组可以包含多个元素，每个元素都包含一个指向其他节点的指针，一般层数越多访问其他节点的速度就越快。每次创建一个新跳跃表节点的时候，程序都根据幂次定律（越大的数出现的概率越小）随机生成一个介于1和32之间的值作为level数组的大小。</li><li>前进指针：每个层都有一个指向表尾方向的前进指针，用于从表头向表尾方向访问节点</li><li>跨度：用于记录两个节点之间的距离</li><li>后退指针：用于从表尾向表头方向访问节点，因为每个节点只有一个后退指针，所以每次只能后退至前一个节点。</li><li>分值和成员：分值是一个double类型的浮点数，跳跃表中的所有节点都按分值从小到大来排序；成员对象是一个指针，它指向一个字符串对象，而字符串对象保存一个SDS值</li></ol><p>在同一个跳跃表中，各个节点保存的成员对象必须是唯一的，但是多个节点保存的分值却可以是相同的：分值相同的节点将按照成员对象的字典序中的大小来进行排序，成员对象较小的节点会排在前面（靠近表头的方向），而成员对象较大的节点则会排在后面（靠近表尾的反向）</p><h5 id="跳跃表-1"><a href="#跳跃表-1" class="headerlink" title="跳跃表"></a>跳跃表</h5><p>通过使用zskiplist结构来持有多个跳跃表节点，程序可以更方便地对整个跳跃表进行处理，如何快速访问跳跃表的表头节点和表尾节点，或者快速地获取跳跃表节点的数量等信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">* 跳跃表</span><br><span class="line"> */</span><br><span class="line">typedef struct zskiplist &#123;</span><br><span class="line"></span><br><span class="line">    // 表头节点和表尾节点</span><br><span class="line">    struct zskiplistNode *header, *tail;</span><br><span class="line"></span><br><span class="line">    // 表中节点的数量</span><br><span class="line">    unsigned long length;</span><br><span class="line"></span><br><span class="line">    // 表中层数最大的节点的层数</span><br><span class="line">    int level;</span><br><span class="line"></span><br><span class="line">&#125; zskiplist;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;跳跃表&quot;&gt;&lt;a href=&quot;#跳跃表&quot; class=&quot;headerlink&quot; title=&quot;跳跃表&quot;&gt;&lt;/a&gt;跳跃表&lt;/h3&gt;&lt;p&gt;跳跃表是一种有序数据结构，它通过在每个节点中维持多个指向其他节点的指针，从而达到快速访问节点的目的。&lt;/p&gt;
&lt;p&gt;跳跃表支持平均O
      
    
    </summary>
    
      <category term="Redis" scheme="http://ylovex.cn/categories/Redis/"/>
    
    
      <category term="Redis" scheme="http://ylovex.cn/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis设计与实现笔记三</title>
    <link href="http://ylovex.cn/2019/07/05/Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E7%AC%94%E8%AE%B0%E4%B8%89/"/>
    <id>http://ylovex.cn/2019/07/05/Redis设计与实现笔记三/</id>
    <published>2019-07-04T22:55:12.000Z</published>
    <updated>2019-07-11T00:22:48.289Z</updated>
    
    <content type="html"><![CDATA[<h3 id="字典："><a href="#字典：" class="headerlink" title="字典："></a>字典：</h3><p>又称符号表、关联数组、映射，是一种保存键值对的抽象数据结构。</p><p>Redis的字典使用哈希表作为底层实现，一个哈希表里面可以有多个哈希表节点，一个哈希表节点就保存了字典中的一个键值对。</p><h4 id="哈希表："><a href="#哈希表：" class="headerlink" title="哈希表："></a>哈希表：</h4><p>由dict.h/dictht结构定义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">typedef struct dictht&#123;</span><br><span class="line">    //哈希表数组</span><br><span class="line">    dictEntry **table;</span><br><span class="line">    //哈希表大小</span><br><span class="line">    unsigned long size;</span><br><span class="line">    //哈希表大小掩码，用于计算索引值</span><br><span class="line">    //总是等于size-1</span><br><span class="line">    unsigned long sizemask;</span><br><span class="line">    //该哈希表已有节点数量</span><br><span class="line">    unsigned long user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>table属性是一个数组，数组中的每个元素都是一个指向dict.h/dictEntry结构的指针，每个dictEntry结构保存一个键值对。size属性记录了哈希表的大小，也即是table数组的大小，而used属性则记录了哈希表目前已有节点的数量，sizemask属性的值总是等于size-1，这个属性和哈希值一起决定一个键应该被放在table数组的哪个索引上面。</p><h4 id="哈希表节点："><a href="#哈希表节点：" class="headerlink" title="哈希表节点："></a>哈希表节点：</h4><p>使用dictEntry结构，每个dictEntry结构都保存一个键值对。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">typedef struct dictEntry&#123;</span><br><span class="line">    //键</span><br><span class="line">    void *key;</span><br><span class="line">    //值</span><br><span class="line">    union&#123;</span><br><span class="line">        void *val;</span><br><span class="line">        uint64_t u64;</span><br><span class="line">        unt64_t s64;</span><br><span class="line">    &#125;v;</span><br><span class="line">    //指向下个哈希表节点，形成链表</span><br><span class="line">    strcut dictEntry *next;</span><br><span class="line">&#125;dictEntry;</span><br></pre></td></tr></table></figure><p>key属性保存键，v属性保存值，可以是指针、uint64_t、uint64_t。</p><p>next属性指向另一个哈希表节点指针，解决哈希冲突。</p><p><img src="201907050731.png" alt="207050731"></p><h4 id="字典：-1"><a href="#字典：-1" class="headerlink" title="字典："></a>字典：</h4><p>由dict.h/dict结构表示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">typedef struct dict&#123;</span><br><span class="line">    //类型特定函数</span><br><span class="line">    sictType *type;</span><br><span class="line">    //私有数据</span><br><span class="line">    void *privtata;</span><br><span class="line">    //哈希表</span><br><span class="line">    dictht ht[2];</span><br><span class="line">    //rehash索引</span><br><span class="line">    //当rehash不在进行时，值为-1</span><br><span class="line">    int trehashidx;/*rehashing not in progress if rehashidx==-1 */</span><br><span class="line">&#125;dict;</span><br></pre></td></tr></table></figure><p>type属性和privdata属性是针对不同的类型的键值对，为创建多态字典而设置的：</p><p>type属性是一个指向dictType结构的指针，每个dictType结构保存了一簇用于操作特定类型键值对的函数，Redis会为用途不同的字典设置不同的类型特定函数。</p><p>privdata属性则保存了需要传给那些类型特定函数的可选参数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">typedef struct dictType&#123;</span><br><span class="line">    //计算哈希值的函数</span><br><span class="line">    unsigned int (*hashFunction)(const void *key);</span><br><span class="line">    //复制键的函数</span><br><span class="line">    void *(*keyDup)(void *privdata,const void *key);</span><br><span class="line">    //复制值的函数</span><br><span class="line">    void *(*valDup)(void *privdata,const void *obj);</span><br><span class="line">    //对比键的函数</span><br><span class="line">    int (*keyCompare)(void *privdata,const void *key1.const void *key2);</span><br><span class="line">    //销毁键的函数</span><br><span class="line">    void (*keyDestructor)(void *prevdata,void *key);</span><br><span class="line">    //销毁值的函数</span><br><span class="line">    void (*valDestructor)(void *prevdata,void *obj);</span><br><span class="line">&#125;dictType；</span><br></pre></td></tr></table></figure><p>ht属性是一个包含两项的数组，数组的每一项都是一个dictht哈希表，一般，字典只使用ht[0]，ht[1]用于对ht[0]rehash。</p><p><img src="201907050732.png" alt="2050732"></p><h3 id="哈希算法："><a href="#哈希算法：" class="headerlink" title="哈希算法："></a>哈希算法：</h3><p>Redis计算哈希值和索引值方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//使用字典设置的哈希函数，计算键key的哈希值</span><br><span class="line">hash = dict-&gt;type-&gt;hashFunction(key);</span><br><span class="line">//使用哈希值的sizemask属性和哈希值，计算索引</span><br><span class="line">//根据情况不同，ht[x]可以是hx[0]或者ht[1]</span><br><span class="line">index = hash &amp; dict-&gt;ht[x].sizemask;</span><br></pre></td></tr></table></figure><h3 id="解决键冲突："><a href="#解决键冲突：" class="headerlink" title="解决键冲突："></a>解决键冲突：</h3><p>当有两个或者以上数量的键被分配到哈希表数组的同一个索引上面的时候，产生了冲突。</p><p>使用链地址法来解决键冲突，每个哈希表节点都有一个next指针，多个哈希表节点可以用next指针构成一个单向链表，被分配到同一个索引上的多个节点可以用这个单向链表连接起来，从而解决键冲突。</p><p>新节点总是添加到链表的表头位置（复杂度为O(1)）</p><h3 id="rehash"><a href="#rehash" class="headerlink" title="rehash:"></a>rehash:</h3><p>扩展和收缩哈希表通过rehash（重新散列）完成</p><ol><li><p>为字典的ht[1]哈希表分配空间，这个哈希表的空间大小取决于要执行的操作，以及ht[0]当前包含的键值对数量（也即是ht[0].used属性值）</p><p>如果执行的是扩展操作，那么ht[1]的大小为第一个大于等于ht[0].used*2的2^n值</p><p>如果执行的收缩，那么ht[1]的大小是第一个大于等于ht[0].used的2^n值</p></li><li><p>将保存在ht[0]中的所有键值对rehash到ht[1]上面：rehash指的是重新计算键的哈希值和索引值，然后将键值对放在ht[1]哈希表指定位置</p></li><li><p>当ht[0]包含所有键值对都迁移到ht[1]后，释放ht[0]，将ht[1]设置为ht[0]，并在ht[1]新建一个空白哈希表，为下一次rehash做准备。</p></li></ol><h3 id="哈希表的扩展与收缩："><a href="#哈希表的扩展与收缩：" class="headerlink" title="哈希表的扩展与收缩："></a>哈希表的扩展与收缩：</h3><p>哈希表的负载因子=哈希表已保存节点数量/哈希表大小</p><h3 id="渐进式rehash"><a href="#渐进式rehash" class="headerlink" title="渐进式rehash"></a>渐进式rehash</h3><p>为了避免rehash对服务器性能造成影响，服务器不是一次性将ht[0]里面的所有键值对全部rehash到ht[1],二十分多次、渐进式地将ht[0]里面的键值对慢慢rehash。</p><p>在渐进式rehash进行期间，字典的删除、查找、更新等操作会在两个哈希表进行</p><p>渐进式rehash期间，新添加到字典的键值对一律会保存到ht[1]中</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;字典：&quot;&gt;&lt;a href=&quot;#字典：&quot; class=&quot;headerlink&quot; title=&quot;字典：&quot;&gt;&lt;/a&gt;字典：&lt;/h3&gt;&lt;p&gt;又称符号表、关联数组、映射，是一种保存键值对的抽象数据结构。&lt;/p&gt;
&lt;p&gt;Redis的字典使用哈希表作为底层实现，一个哈希表里面可
      
    
    </summary>
    
      <category term="Redis" scheme="http://ylovex.cn/categories/Redis/"/>
    
    
      <category term="Redis" scheme="http://ylovex.cn/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis设计与实现笔记二</title>
    <link href="http://ylovex.cn/2019/07/03/Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E7%AC%94%E8%AE%B0%E4%BA%8C/"/>
    <id>http://ylovex.cn/2019/07/03/Redis设计与实现笔记二/</id>
    <published>2019-07-03T04:52:07.000Z</published>
    <updated>2019-07-11T00:22:29.026Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链表："><a href="#链表：" class="headerlink" title="链表："></a>链表：</h3><h4 id="链表和链表节点的实现："><a href="#链表和链表节点的实现：" class="headerlink" title="链表和链表节点的实现："></a>链表和链表节点的实现：</h4><p>链表节点使用一个adlist.h/listNode结构表示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">typedef struct listNode&#123;</span><br><span class="line">    //前置节点</span><br><span class="line">    struct listNode *prev;</span><br><span class="line">    //后置节点</span><br><span class="line">    struct listNode *next;</span><br><span class="line">    //节点的值</span><br><span class="line">    void *value;</span><br><span class="line">&#125;listNode;</span><br></pre></td></tr></table></figure><p>多个listNode可以通过prev和next指针组成双端链表。</p><p><img src="201907020905.png" alt="27020905"></p><p>使用adlist.h/list来持有链表。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">typedef struct list&#123;</span><br><span class="line">    //表头节点</span><br><span class="line">    listNode *head;</span><br><span class="line">    //表尾节点</span><br><span class="line">    listNode *tail;</span><br><span class="line">    //链表所包含的节点数量</span><br><span class="line">    unsigned long len;</span><br><span class="line">    //节点值复制函数</span><br><span class="line">    void *(*dup)(void *ptr);</span><br><span class="line">    //节点值释放函数</span><br><span class="line">    void *(*free)(void *ptr);</span><br><span class="line">    //节点值对比函数</span><br><span class="line">    int (*match)(void *pre , void *key);</span><br><span class="line">&#125;list;</span><br></pre></td></tr></table></figure><p><img src="201907020916.png" alt="2020916"></p><p>上图是一个由list结构和三个listNode结构组成的链表。</p><h4 id="Redis链表实现特性"><a href="#Redis链表实现特性" class="headerlink" title="Redis链表实现特性:"></a>Redis链表实现特性:</h4><ol><li>双端：链表节点带有prev和next指针，获取某个节点的前置和后置复杂度都是O(1)</li><li>无环：表头节点的prev和表尾的next都指向NULL，对链表访问都以NULL为终点</li><li>带表头指针和表尾指针：通过list结构的head指针和tail指针，程序获取链表的表头节点和表尾节点都是O(1)</li><li>带链表长度计数器：获取链表中节点数量的复杂度为O(1)</li><li>多态：链表节点使用void* 指针来保存节点值，并且可以通过list结构的dup、free、match三个属性为节点值设置类型特定函数，所以链表可以用于保存各种不同类型的值。 </li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;链表：&quot;&gt;&lt;a href=&quot;#链表：&quot; class=&quot;headerlink&quot; title=&quot;链表：&quot;&gt;&lt;/a&gt;链表：&lt;/h3&gt;&lt;h4 id=&quot;链表和链表节点的实现：&quot;&gt;&lt;a href=&quot;#链表和链表节点的实现：&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="Redis" scheme="http://ylovex.cn/categories/Redis/"/>
    
    
      <category term="Redis" scheme="http://ylovex.cn/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>nowcoder-骰子游戏</title>
    <link href="http://ylovex.cn/2019/07/02/nowcoder-%E9%AA%B0%E5%AD%90%E6%B8%B8%E6%88%8F/"/>
    <id>http://ylovex.cn/2019/07/02/nowcoder-骰子游戏/</id>
    <published>2019-07-01T23:37:01.000Z</published>
    <updated>2019-07-10T23:57:09.536Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目来源："><a href="#题目来源：" class="headerlink" title="题目来源："></a>题目来源：</h3><p><a href="https://www.nowcoder.com/practice/0e83797c34e54cca91179fe9ad681bc4?tpId=90&amp;tqId=30849&amp;tPage=4&amp;rp=4&amp;ru=%2Fta%2F2018test&amp;qru=%2Fta%2F2018test%2Fquestion-ranking" target="_blank" rel="noopener">https://www.nowcoder.com/practice/0e83797c34e54cca91179fe9ad681bc4?tpId=90&amp;tqId=30849&amp;tPage=4&amp;rp=4&amp;ru=%2Fta%2F2018test&amp;qru=%2Fta%2F2018test%2Fquestion-ranking</a></p><h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p>小易参加了一个骰子游戏,这个游戏需要同时投掷n个骰子,每个骰子都是一个印有数字1~6的均匀正方体。<br>小易同时投掷出这n个骰子,如果这n个骰子向上面的数字之和大于等于x,小易就会获得游戏奖励。<br>小易想让你帮他算算他获得奖励的概率有多大。</p><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">动态规划，用dp[i][j]表示i个骰子产生数字和j的结果数，</span><br><span class="line">初始值dp[1][j]=1(j=1~6),dp[i] [i]=1,dp[i][6*i]=1,</span><br><span class="line">由于第i个骰子的点数可以为1~6，要使i个骰子的数字和为j的话，</span><br><span class="line">则前i-1个骰子的数字和可以为j-1~j-6，</span><br><span class="line">所以得到公式dp[i][j] +=dp[i-1][j-k] (k=1~6)。</span><br></pre></td></tr></table></figure><h3 id="参考代码："><a href="#参考代码：" class="headerlink" title="参考代码："></a>参考代码：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Now_73</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n=sc.nextInt();</span><br><span class="line">        <span class="keyword">int</span> x=sc.nextInt();</span><br><span class="line">        <span class="keyword">if</span>(n&gt;=x) System.out.print(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">6</span>*n&lt;x) System.out.print(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">long</span>[][] dp=<span class="keyword">new</span> <span class="keyword">long</span>[n+<span class="number">1</span>][<span class="number">6</span>*n+<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">6</span>;i++) dp[<span class="number">1</span>][i]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;=<span class="number">6</span>*n;j++) &#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;j&amp;&amp;k&lt;=<span class="number">6</span>;k++) &#123;</span><br><span class="line">                        dp[i][j]+=dp[i-<span class="number">1</span>][j-k];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">long</span> total=(<span class="keyword">long</span>)Math.pow(<span class="number">6</span>,n);</span><br><span class="line">            <span class="keyword">long</span> sum=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;x;i++) sum+=dp[n][i];</span><br><span class="line">            <span class="keyword">long</span> num=gcd(total-sum,total);</span><br><span class="line">            System.out.print((total-sum)/num+<span class="string">"/"</span>+total/num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">gcd</span><span class="params">(<span class="keyword">long</span> a,<span class="keyword">long</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (a%b==<span class="number">0</span>)?b:gcd(b,a%b);<span class="comment">//求最大公约数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目来源：&quot;&gt;&lt;a href=&quot;#题目来源：&quot; class=&quot;headerlink&quot; title=&quot;题目来源：&quot;&gt;&lt;/a&gt;题目来源：&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/0e83797c34e54cc
      
    
    </summary>
    
      <category term="nowcoder" scheme="http://ylovex.cn/categories/nowcoder/"/>
    
    
      <category term="code" scheme="http://ylovex.cn/tags/code/"/>
    
      <category term="dp" scheme="http://ylovex.cn/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>Redis设计与实现笔记一</title>
    <link href="http://ylovex.cn/2019/07/01/Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E7%AC%94%E8%AE%B0%E4%B8%80/"/>
    <id>http://ylovex.cn/2019/07/01/Redis设计与实现笔记一/</id>
    <published>2019-07-01T13:33:42.000Z</published>
    <updated>2019-07-11T00:23:04.211Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简单动态字符串："><a href="#简单动态字符串：" class="headerlink" title="简单动态字符串："></a>简单动态字符串：</h3><p>Redis并没有直接使用C语音传统的字符串（以空字符串结尾的字符数组），而是构建了一种名为简单动态字符串（simple dynamic string ， SDS）的抽象类型。</p><p>每个sds.h/sdshdr结构表示一个SDS值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">struct sdshdr&#123;</span><br><span class="line">    //记录buf数组中已使用字节的数量</span><br><span class="line">    //等于SDS所保存字符串的长度</span><br><span class="line">    int len;</span><br><span class="line">    </span><br><span class="line">    //记录buf数组中未使用字节的数量</span><br><span class="line">    int free;</span><br><span class="line">    </span><br><span class="line">    //字节数组，用于保存字符串</span><br><span class="line">    char buf[];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>下图展示了一个SDS示例：</p><p><img src="1561985098307.png" alt="1565098307"></p><p>其中：</p><ol><li>free属性的值为0，表示这个SDS没有分配任何未使用的空间</li><li>len属性的值为5，表示这个SDS保存一个5字节长的字符串</li><li>buf属性是一个char类型的数组，最后以空字符‘\0’。</li></ol><p>SDS遵循C字符串以空字符结尾的惯例，保存的空字符的1字节不计算在SDS的len属性中，并且为空字符分配额外的1字节空间，以及添加空字符到字符末尾等操作都是SDS自动完成，对使用者完成透明，遵循空字符结尾可以重用一部分C字符串函数库里面的函数。</p><h4 id="SDS优点："><a href="#SDS优点：" class="headerlink" title="SDS优点："></a>SDS优点：</h4><h5 id="常数复杂度获取字符串的长度："><a href="#常数复杂度获取字符串的长度：" class="headerlink" title="常数复杂度获取字符串的长度："></a>常数复杂度获取字符串的长度：</h5><p>通过使用SDS而不是C字符串，Redis将获取字符串长度所需要的复杂度从O(n)降低到了O(1)。</p><h5 id="杜绝缓冲区溢出："><a href="#杜绝缓冲区溢出：" class="headerlink" title="杜绝缓冲区溢出："></a>杜绝缓冲区溢出：</h5><p>当SDS API需要对SDS进行修改时候，API会先检查SDS空间是否满足修改所需的要求，如果不满足的话，API会自动将SDS空间扩展至执行修改所需的大小，然后才执行实际的修改操作。</p><h5 id="减少修改字符串时候带来的内存重分配次数："><a href="#减少修改字符串时候带来的内存重分配次数：" class="headerlink" title="减少修改字符串时候带来的内存重分配次数："></a>减少修改字符串时候带来的内存重分配次数：</h5><p>对于一个包含N个字符的C字符串，这个C字符串的底层实现总是一个N+1个字符长的数组（额外的一个字符空间用于保存空字符），因为C字符串的长度和底层数组的长度之间存在这种关联，所以每次增长或者缩短一个C字符串，程序都总要对保存这个C字符串的数组进行一个内存重分配操作：</p><ol><li>如果程序执行的是增长字符串操作，比如拼接（append），那么在执行这个操作之前，程序需要先通过内存重分配来扩展底层数组的空间大小—如果忘了这一步就会产生缓冲区溢出。</li><li>如果程序执行的就是缩短字符串操作，比如截断（trim），那么在执行这个操作之后，程序需要通过内存重分配来释放字符串不再使用的那部分空间—如果忘了这步就会产生内存泄漏。</li></ol><p>为了避免C字符串这种缺陷，SDS通过未使用空间解除了字符串长度和底层数组长度的关联，在SDS中，buf数组的长度不一定是字符数量加一，数组里面可以包含未使用的字节，而这个未使用的字节由SDS的free属性记录。</p><p>通过未使用空间，SDS实现了空间预分配和惰性空间释放两种优化策略。</p><h6 id="空间预分配："><a href="#空间预分配：" class="headerlink" title="空间预分配："></a>空间预分配：</h6><p>空间预分配用于优化SDS字符串增长操作：当SDS的API对一个SDS进行修改，并且需要对SDS进行空间扩展的时候，程序不仅会为SDS分配修改所必须的空间的时候，还会为SDS分配额外的未使用空间。</p><p>其中，额外分配的未使用空间数量由以下公式决定：</p><ol><li>如果对SDS进行修改之后，SDS的的长度将小于1MB，那么程序分配和len属性同样大小的未使用空间。</li><li>如何对SDS进行修改后，SDS的长度将大于等于1MB，那么程序会分配1MB的未使用空间。</li></ol><p>通过空间预分配策略，Redis可以减少连续执行字符串增长操作所需要的内存重分配次数。</p><h6 id="惰性空间释放："><a href="#惰性空间释放：" class="headerlink" title="惰性空间释放："></a>惰性空间释放：</h6><p>惰性空间释放用于优化SDS字符串缩短操作：当SDS的API需要缩短的SDS保存的字符串时候，程序并不立即使用内存重分配来回收缩短后多出来的字节，而是使用free属性将这些字节数量记录起来，并等到将来使用。</p><h5 id="二进制安全："><a href="#二进制安全：" class="headerlink" title="二进制安全："></a>二进制安全：</h5><p>C字符中的字符必须符合某种编码（比如ASCII），并且除了字符串的末尾之外，字符串里面不能包含空字符，否则最先被程序读入的空字符将被误认为是字符串结尾，这些限制使C字符只能保存文本数据，不能保存像图像、音频、视频、压缩文件这样的二进制数据。</p><p>SDS的API都是二进制安全的，所有SDS API都会处理二进制的方式来处理SDS存放在buf数组里的数据，程序不会对其中的数据做任何限制、过滤、或者假设，数据在写入是什么样，被读取就是什么样。</p><h5 id="兼容部分C字符串函数："><a href="#兼容部分C字符串函数：" class="headerlink" title="兼容部分C字符串函数："></a>兼容部分C字符串函数：</h5><p>通过遵循C字符串以空字符结尾的惯例，SDS可以在有需要时重用&lt;string.h&gt;函数库，从而避免了不必要的代码重复。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;简单动态字符串：&quot;&gt;&lt;a href=&quot;#简单动态字符串：&quot; class=&quot;headerlink&quot; title=&quot;简单动态字符串：&quot;&gt;&lt;/a&gt;简单动态字符串：&lt;/h3&gt;&lt;p&gt;Redis并没有直接使用C语音传统的字符串（以空字符串结尾的字符数组），而是构建了一种名为简
      
    
    </summary>
    
      <category term="Redis" scheme="http://ylovex.cn/categories/Redis/"/>
    
    
      <category term="Redis" scheme="http://ylovex.cn/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>jvm自动内存管理机制</title>
    <link href="http://ylovex.cn/2019/06/28/jvm%E8%87%AA%E5%8A%A8%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E6%9C%BA%E5%88%B6/"/>
    <id>http://ylovex.cn/2019/06/28/jvm自动内存管理机制/</id>
    <published>2019-06-28T00:11:47.000Z</published>
    <updated>2019-07-11T00:24:12.390Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JVM组成："><a href="#JVM组成：" class="headerlink" title="JVM组成："></a>JVM组成：</h3><p>JVM 由类加载器子系统、运行时数据区、执行引擎以及本地方法接口组成。</p><p><img src="201907030747.png" alt="27030747"></p><h3 id="运行时数据区域："><a href="#运行时数据区域：" class="headerlink" title="运行时数据区域："></a>运行时数据区域：</h3><p>Java虚拟机在执行Java程序的过程中会把它所管理的内存划分为若干个不同的数据区域。这些区域都有各自的用途，以及创建和销毁的时间，有的区域随着虚拟机进程的启动而存在，有些区域则依赖用户线程的启动和结束而建立和销毁。</p><h5 id="程序计数器："><a href="#程序计数器：" class="headerlink" title="程序计数器："></a>程序计数器：</h5><p>是当前线程所执行的字节码的行号指示器。字节码解释器工作时候通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复都依赖该计数器。</p><p>线程私有，此内存区域是唯一一个在Java虚拟机规范中没有规定任何OutOfMemoryError情况区域。</p><h5 id="Java虚拟机栈："><a href="#Java虚拟机栈：" class="headerlink" title="Java虚拟机栈："></a>Java虚拟机栈：</h5><p>存储局部变量表、操作数栈、动态链接、方法出口等信息。</p><p>线程私有。</p><p>局部变量表存放编译期可知的各种基本数据类型、对象引用和returnAddress类型（指向一条字节码指令地址）。</p><p>其中64位长度的long和double类型数据占用2个局部变量空间（slot），其余数据类型只占1个字节。</p><h5 id="本地方法栈："><a href="#本地方法栈：" class="headerlink" title="本地方法栈："></a>本地方法栈：</h5><p>虚拟机栈为虚拟机执行Java方法（字节码）服务，本地方法栈为虚拟机使用Native方法服务。</p><h5 id="Java堆："><a href="#Java堆：" class="headerlink" title="Java堆："></a>Java堆：</h5><p>存放对象实例，是垃圾收集器管理的主要区域。</p><p>线程共享。</p><h5 id="方法区："><a href="#方法区：" class="headerlink" title="方法区："></a>方法区：</h5><p>存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</p><p>线程共享。</p><h5 id="运行时常量池："><a href="#运行时常量池：" class="headerlink" title="运行时常量池："></a>运行时常量池：</h5><p>是方法区的一部分。具有动态性，不仅预置入Class文件中常量池的内容可以进入方法区运行时常量池，运行期间也可以将新的常量放入池中。</p><h3 id="对象的创建："><a href="#对象的创建：" class="headerlink" title="对象的创建："></a>对象的创建：</h3><ol><li>虚拟机遇到一条new指令时，会先去常量池检测能否找到new对应的类的符号引用，并检测这个类是否加载、初始化。</li><li>如果加载检查通过，则分配内存。分配内存有两种方式：⑴指针碰撞，针对连续内存区域；⑵空闲列表，针对不连续内存区域</li><li>内存分配完之后，会对内存初始化零值，保证实例字段能在java代码不赋初值也能使用。</li><li>接下来对对象信息进行设置，把类的元数据信息、对象的哈希吗、对象的GC分代年龄等信息存放在对象头之中</li><li>最后执行用户的Init方法</li></ol><h3 id="对象的内存布局："><a href="#对象的内存布局：" class="headerlink" title="对象的内存布局："></a>对象的内存布局：</h3><ol><li>分为三部分，对象头、实例数据、对齐填充</li><li>对象头：⑴对象自身运行时数据，如哈希吗、GC分代年龄、锁状态标志、线程持有的锁等。⑵类型指针，虚拟机通过这个来确定这个对象是哪个类的实例。⑶如果对象是一个Java数组，那么对象头中还必须有一块用于记录数组长度的数据。</li><li>实例数据：对象真正存储的有效信息，也是在程序代码中定义的各种类型的字段内容。</li><li>对齐填充：JVM要求对象的起始地址必须是8字节的整数倍，因此当对象实例数据没有对齐时，这部分来补全。</li></ol><h3 id="对象的访问定位："><a href="#对象的访问定位：" class="headerlink" title="对象的访问定位："></a>对象的访问定位：</h3><h5 id="使用句柄访问："><a href="#使用句柄访问：" class="headerlink" title="使用句柄访问："></a>使用句柄访问：</h5><p>Java堆中会划分一块内存作为句柄池，reference中存储的就是对象的句柄地址，而句柄中包含了对象实例数据与类型数据各自的具体地址信息。</p><p><img src="201907030826.png" alt="2010826"></p><h5 id="直接指针访问："><a href="#直接指针访问：" class="headerlink" title="直接指针访问："></a>直接指针访问：</h5><p>那么Java堆对象的布局中就必须考虑如何放置访问类型数据的 相关信息，而reference中存储的直接就是对象地址</p><p><img src="201907030827.png" alt="207030827"></p><h3 id="Java垃圾回收区域："><a href="#Java垃圾回收区域：" class="headerlink" title="Java垃圾回收区域："></a>Java垃圾回收区域：</h3><ol><li>Java垃圾回收只针对堆和方法区的内存。</li><li>程序计数器、虚拟机栈、本地方法栈随线程而生，随线程而灭，因此不用管。</li></ol><p><img src="201907030830.png" alt="20030830"></p><h3 id="如何确认垃圾："><a href="#如何确认垃圾：" class="headerlink" title="如何确认垃圾："></a>如何确认垃圾：</h3><h5 id="引用计数算法："><a href="#引用计数算法：" class="headerlink" title="引用计数算法："></a>引用计数算法：</h5><p>给对象中添加一个引用计数器，每当有 一个地方引用它时，计数器值就加1；当引用失效时，计数器值就减1；任何时刻计数器为0 的对象就是不可能再被使用的。</p><h5 id="可达性分析算法："><a href="#可达性分析算法：" class="headerlink" title="可达性分析算法："></a>可达性分析算法：</h5><p>这个算法的基本思 路就是通过一系列的称为“GC Roots”的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链（Reference Chain），当一个对象到GC Roots没有任何引用链相连 （用图论的话来说，就是从GC Roots到这个对象不可达）时，则证明此对象是不可用的。如图所示，对象object 5、object 6、object 7虽然互相有关联，但是它们到GC Roots是不可达 的，所以它们将会被判定为是可回收的对象。</p><p><img src="201907030836.png" alt="20130836"></p><p>可作为GC Roots对象有：</p><ol><li>虚拟机栈（栈帧中的本地变量表）中引用的对象。 </li><li>方法区中类静态属性引用的对象。 </li><li>方法区中常量引用的对象。 </li><li>本地方法栈中JNI（即一般说的Native方法）引用的对象。</li></ol><h3 id="垃圾回收算法："><a href="#垃圾回收算法：" class="headerlink" title="垃圾回收算法："></a>垃圾回收算法：</h3><h5 id="标记-清除算法："><a href="#标记-清除算法：" class="headerlink" title="标记-清除算法："></a>标记-清除算法：</h5><p>首先标记出所有需要回收的对象，在标记完成后统一回收所有 被标记的对象。</p><p>不足有两个：一个是效率问题，标记和清除两个过程的效率都不高；另一个是 空间问题，标记清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致以后在程序运行过程中需要分配较大对象时，无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。</p><h5 id="复制算法："><a href="#复制算法：" class="headerlink" title="复制算法："></a>复制算法：</h5><p>它将可用内存按容 量划分为大小相等的两块，每次只使用其中的一块。当这一块的内存用完了，就将还存活着 的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。这样使得每次都是 对整个半区进行内存回收，内存分配时也就不用考虑内存碎片等复杂情况，只要移动堆顶指 针，按顺序分配内存即可，实现简单，运行高效。只是这种算法的代价是将内存缩小为了原来的一半。</p><h5 id="标记-整理算法："><a href="#标记-整理算法：" class="headerlink" title="标记-整理算法："></a>标记-整理算法：</h5><p>标记过程仍然与“标记-清除”算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存 活的对象都向一端移动，然后直接清理掉端边界以外的内存。</p><h5 id="分代收集："><a href="#分代收集：" class="headerlink" title="分代收集："></a>分代收集：</h5><p>一般是把Java堆 分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。在新生代 中，每次垃圾收集时都发现有大批对象死去，只有少量存活，那就选用复制算法，只需要付 出少量存活对象的复制成本就可以完成收集。而老年代中因为对象存活率高、没有额外空间 对它进行分配担保，就必须使用“标记—清理”或者“标记—整理”算法来进行回收。</p><h3 id="JVM-GC："><a href="#JVM-GC：" class="headerlink" title="JVM GC："></a>JVM GC：</h3><h5 id="枚举根节点"><a href="#枚举根节点" class="headerlink" title="枚举根节点"></a>枚举根节点</h5><p>要GC就得枚举根节点，如果逐一去检查引用，效率很低。因此JVM使用一组称为OopMap的数据结构，直接知道哪些地方存放着对象引用。</p><h5 id="安全点"><a href="#安全点" class="headerlink" title="安全点"></a>安全点</h5><p>可能导致引用关系、或者说OopMap内容变化的指令非常多，不可能为每一条指令都生成对应的OopMap，因此有了安全点，在安全点才记录OopMap，在安全点才能进行GC，例如方法调用、循环跳转、异常跳转等，具有这些功能的指令才会产生安全点</p><h5 id="如何让GC发生时线程都跑到安全点"><a href="#如何让GC发生时线程都跑到安全点" class="headerlink" title="如何让GC发生时线程都跑到安全点"></a>如何让GC发生时线程都跑到安全点</h5><p>采用主动式中断思想，GC时，不直接对线程操作，而是设置一个中断标志，各个线程执行时主动去轮询这个标志，发现中断标志为真时就自己中断挂起，轮询标志的地方和安全点是重合的</p><h5 id="安全区域"><a href="#安全区域" class="headerlink" title="安全区域"></a>安全区域</h5><p>如果程序不执行时，比如sleep了，岂不是就进不了安全点？因此有了安全区域，安全区域指在一段代码中，引用关系不会发生变化，在这个区域内GC都是安全的。线程进入安全区域后，会标志自己进入了。JVM要GC时就不会管这些线程。线程要离开安全区域时，必须检查GC是否完成，如果GC完成了线程就继续执行，否则一直等待直到GC完成。</p><h3 id="垃圾收集器："><a href="#垃圾收集器：" class="headerlink" title="垃圾收集器："></a>垃圾收集器：</h3><p><img src="201907030914.png" alt="20130914"></p><h5 id="Serial收集器："><a href="#Serial收集器：" class="headerlink" title="Serial收集器："></a>Serial收集器：</h5><p>单线程，GC时候需要暂停其他所有的工作线程，直到它收集结束。</p><p>JVM运行在Client模式下的默认新生代收集器：简单而高效。</p><p><img src="20190704649.png" alt="2014649"></p><h5 id="ParNew收集器："><a href="#ParNew收集器：" class="headerlink" title="ParNew收集器："></a>ParNew收集器：</h5><p>Serial收集器的多线程版本。</p><p>许多运行在Server模式下虚拟机的首选新生代收集器。</p><p>在单CPU环境次啊ParNew不会有比Serial收集器效果更好，Serial和ParNew都是与CMS配合工作。</p><p><img src="20190704650.png" alt="20704650"></p><h5 id="Parallel-Scavenge收集器："><a href="#Parallel-Scavenge收集器：" class="headerlink" title="Parallel Scavenge收集器："></a>Parallel Scavenge收集器：</h5><p>新生代收集器，使用复制算法。</p><p>关注吞吐量，吞吐量=运行用户代码时间/（运行用户代码时间+垃圾收集时间）。</p><p><img src="20190704652.png" alt="2004652"></p><h5 id="Serial-Old收集器："><a href="#Serial-Old收集器：" class="headerlink" title="Serial Old收集器："></a>Serial Old收集器：</h5><p>是Seraial收集器的老年代版本，单线程，采用“标记-整理”算法。</p><h5 id="Parallel-Old收集器："><a href="#Parallel-Old收集器：" class="headerlink" title="Parallel Old收集器："></a>Parallel Old收集器：</h5><p>是Parallel Scavenge收集器的老年代版本，“标记-整理”。</p><h5 id="CMS收集器："><a href="#CMS收集器：" class="headerlink" title="CMS收集器："></a>CMS收集器：</h5><p>是一种以获取最短回收停顿时间为目标的收集器。</p><p>基于“标记-清除”。</p><p>初始标记，并发标记，重新标记，并发清除。其中，初始标记、重新标记这两个步骤仍然需要“Stop The World”。初始标记仅仅只是 标记一下GC Roots能直接关联到的对象，速度很快，并发标记阶段就是进行GC RootsTracing 的过程，而重新标记阶段则是为了修正并发标记期间因用户程序继续运作而导致标记产生变 动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段稍长一些，但远 比并发标记的时间短。 由于整个过程中耗时最长的并发标记和并发清除过程收集器线程都可以与用户线程一起 工作，所以，从总体上来说，CMS收集器的内存回收过程是与用户线程一起并发执行的。</p><p><img src="20190704653.png" alt="204653"></p><p>缺点：对CPU资源非常敏感、无法处理浮动垃圾、基于“标记-清除”，产生大量空间碎片。</p><h5 id="G1收集器："><a href="#G1收集器：" class="headerlink" title="G1收集器："></a>G1收集器：</h5><p>是一款面向服务端应用的垃圾收集器，、并行与并发、分代收集、空间整合、可预测停顿</p><p>将整个Java堆划分多个大小相等的独立区域（Region），虽然还保留有新生代和老年代的概念，但新生代和老年代不再是物理隔离的。</p><p><img src="20190704654.png" alt="204654"></p><h3 id="内存分配与回收策略："><a href="#内存分配与回收策略：" class="headerlink" title="内存分配与回收策略："></a>内存分配与回收策略：</h3><ol><li>对象优先在Eden分配。</li><li>老年代GC（Full GC/Major GC）一般比新生代GC（Minor GC）慢10倍以上。</li><li>大对象直接进入老年代，大对象指需要大量连续内存空间的Java对象，比如很长的字符串和数组。可通过参数设置。</li><li>长期存活的对象将进入老年代。默认15岁。</li><li>动态对象年龄判定。如果Survivor空间中相同年龄所有对象大小的总和大于Survivor空间的一半，年龄大于或等于该年龄的对象就可以直接进入老年代。</li><li>空间分配担保。当出现大量对象Minor GC后仍然存活的情况，需要老年代进行分配担保，让Survivor无法容纳的对象直接进入老年代。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;JVM组成：&quot;&gt;&lt;a href=&quot;#JVM组成：&quot; class=&quot;headerlink&quot; title=&quot;JVM组成：&quot;&gt;&lt;/a&gt;JVM组成：&lt;/h3&gt;&lt;p&gt;JVM 由类加载器子系统、运行时数据区、执行引擎以及本地方法接口组成。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;2
      
    
    </summary>
    
      <category term="jvm" scheme="http://ylovex.cn/categories/jvm/"/>
    
    
      <category term="java" scheme="http://ylovex.cn/tags/java/"/>
    
      <category term="jvm" scheme="http://ylovex.cn/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络基础</title>
    <link href="http://ylovex.cn/2019/06/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    <id>http://ylovex.cn/2019/06/25/计算机网络基础/</id>
    <published>2019-06-25T11:42:18.000Z</published>
    <updated>2019-07-22T11:51:22.591Z</updated>
    
    <content type="html"><![CDATA[<h3 id="计算机网络基础"><a href="#计算机网络基础" class="headerlink" title="计算机网络基础"></a>计算机网络基础</h3><h4 id="OSI七层模型"><a href="#OSI七层模型" class="headerlink" title="OSI七层模型"></a>OSI七层模型</h4><p>介绍：开放式系统互联，一般都叫OSI参考模型。</p><p>七层模型划分：物理层、数据链路层、网络层、传输层、会话层、表示层、应用层），每一层实现各自的功能和协议，并完成与相邻层的接口通信。</p><p><img src="201907200001.png" alt="7392747239"></p><h4 id="TCP-IP五层协议"><a href="#TCP-IP五层协议" class="headerlink" title="TCP/IP五层协议"></a>TCP/IP五层协议</h4><p><img src="201907200002.png" alt="31213"></p><p>在每一层都工作者不同的设备，如：交换机就工作在数据链路层的，一般的路由器是工作在网络层的。如下图：</p><p><img src="201907200003.png" alt="4341414"></p><p>各层协议：</p><p><img src="201907200004.png" alt="2123141"></p><h4 id="TCP-UDP协议的区别"><a href="#TCP-UDP协议的区别" class="headerlink" title="TCP/UDP协议的区别"></a>TCP/UDP协议的区别</h4><ol><li>TCP面向连接（如打电话要先拨号建立连接）;UDP是无连接的，即发送数据之前不需要建立连接</li><li>TCP提供可靠的服务。也就是说，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达;UDP尽最大努力交付，即不保证可靠交付</li><li>TCP实时性比UDP差，UDP更适用于对高速传输和实时性有较高的通信（比如LOL这种实时对战网络游戏）或广播通信。</li><li>每一条TCP连接只能是点到点的，即TCP不支持组播或者广播传输模式。UDP支持一对一，一对多，多对一和多对多的交互通信。</li><li>TCP对系统资源要求较多，UDP对系统资源要求较少。</li></ol><p><img src="201907200005.png" alt="4314"></p><p>UDP在越来越多的场景下取代了TCP：</p><ol><li>UDP以其简单、传输快的优势，在越来越多场景下取代了TCP，不能容忍延迟比如LOL、Dota用UDP，可以容忍延迟的游戏如RPG还是用TCP。</li><li>网速的提升给UDP的稳定性提供可靠网络保障，丢包率很低，如果使用应用层重传，能够确保传输的可靠性。</li><li>网络游戏如果采用TCP，一旦发生丢包，TCP会将后续的包缓存起来，等前面的包重传并接收到后再继续发送，延时会越来越大，基于UDP对实时性要求较为严格的情况下，采用自定义重传机制，能够把丢包产生的延迟降到最低，尽量减少网络问题对游戏性造成影响。</li></ol><p>设计UDP丢包检查来保证可靠性：</p><ol><li>可以采用一个近似TCP的ack机制，可以给每个数据包都添加一个sequence ID，然后服务端就依次发送数据包，客户端收到数据包后就可以根据sequence ID来判断是否有丢包了。</li><li>接下来是重点，客户端需要发该sequenceID的ack给服务端，服务端才会知道这个包是否已经送达。但这是一笔不小的开销，而且，ack本身也有可能丢包。</li><li>可以这样，客户端发送一个sequence ID的ack时，附加一个32bit的位序列，表示当前sequence ID之前的32个连续顺位的数据包是否已经送达，其实就是冗余的发送连续32个包的送达状态，如果bit为0说明这个包还没到，如果为1，说明已经收到了。这样一来，除非连续丢包30多次，ack是一定会送到的，这种几率已经非常小了。</li><li>相应的，在服务端设置一个超时机制，这个时间差不多比连续发30个ack的时间长一点，如果发送一个包后开始计时，达到超时还没有收到ack，这个包就丢失了。</li><li>但即使丢包了也不一定需要重发！是否需要重发，如何重发可以和游戏的逻辑结合起来，没有必要实现类似TCP那样的完全可靠的机制，毕竟战斗中的同步速率很高，丢一个一般也没啥事情。</li></ol><h4 id="TCP如何保证可靠性"><a href="#TCP如何保证可靠性" class="headerlink" title="TCP如何保证可靠性"></a>TCP如何保证可靠性</h4><p>TCP通过校验和，重传控制，序号标识，滑动窗口、确认应答实现可靠传输。如丢包时的重发控制，还可以对次序乱掉的分包进行顺序控制</p><ol><li>数据被分割成TCP认为最合适的数据块</li><li>包是按序收到的，即发送顺序和接受顺序一致。</li><li>TCP发送一个段之后会启动一个定时器，等待目标端的确认信息，如果没有收到确认信息，会重发</li><li>防止序号回绕机制。即在连接期间，时间戳被用来辅助扩展32位序号，而且采用了伪随机的初始序号，防止重复数据包。</li><li>TCP保证收到的包不出错，即保持首部和数据的校验和，如果收到的校验和出错，TCP将丢弃这个数据报也不会确认这个数据报</li><li>TCP会对收到的数据进行重新排序，保证数据以正确的顺序交给应用层</li><li>TCP还有流量控制和拥塞控制</li><li>滑动窗口协议也是来保证可靠的</li></ol><h4 id="TCP三次握手、四次挥手"><a href="#TCP三次握手、四次挥手" class="headerlink" title="TCP三次握手、四次挥手"></a>TCP三次握手、四次挥手</h4><p>TCP是面向连接的，在传输报文段之前先要建立连接。发起连接请求的一方叫客户端，想要连接请求的一方叫服务端。</p><p><img src="201907200006.png" alt="31344"></p><p>第一次握手： 客户端向服务端发送请求连接报文(SYN)；其中报头控制位SYN=1，初始序列号seq=x。并进入SYN_SENT(SYN-sent)状态，等待服务器确认； </p><p>第二次握手： 服务端收到请求连接报文(SYN)后，向客户端发送确认报文(SYN+ACK包)。确认报文段的首部中，ACK=1、SYN=1。确认序号：ack=x+1，同时为自己选择一个初始序列号seq=y。此时，服务器进入SYN_RCVD（SYN-received）状态； </p><p>第三次握手： 客户端收到服务器的确认报文(SYN＋ACK包)后，还要再向服务端发送一个确认报文(ACK)。该确认报文段首部中，ACK=1，确认号是ack=y+1，自己的序列号是seq=x+1。此包发送完毕，客户端进入ESTABLISHED(established)状态，服务端收到确认报文后，也进入ESTABLISHED(established)状态。 </p><p>至此TCP连接建立。 三次握手过程中传送的包里不携带数据。三次握手完毕后，客户端与服务端才正式开始传输数据。理想状态下，TCP连接一旦建立，在通信双方中的任何一方主动关闭连接之前，TCP 连接都将被一直保持下去。</p><p>断开一个TCP连接需要“四次挥手”，此处，客户端为主动关闭方：</p><p><img src="201907200007.png" alt="423441"></p><p>第一次挥手： 此时两端还都处于ESTABLISHED状态，客户端停止发送数据，并发送一个请求断开连接报文(FIN)。（此时客户端处于半连接状态）该报文首部中，FIN=1，序列号seq=u。 服务端接收到请求报文后，进入CLOSE_WAIT(关闭等待)状态。 也就是告诉服务端，我的数据发送完了，不会再给你发数据了。(另，在FIN包发送之前发送出去的数据，如果没有收到服务端对应的ACK确认报文，主动关闭方依然会重发这些数据)；此时，客户端还可以接受数据。 </p><p>第二次挥手： 服务端收到请求断开连接报文(FIN)后，回复确认报文(ACK)，确认号：ack=u+1，序列号seq=v。 客户端收到确认报文(ACK)后，进入FIN-WAIT-1(终止等待-1)状态。 现在TCP连接处于半开半闭状态，服务端如果继续发送数据，客户端依然接收。</p><p>第三次挥手： 服务端发送一个请求断开连接报文(FIN)，用来服务端到客户端的数据传送。 该报文段首部中，FIN=1，ACK=1，确认序列号ack=u+1，序列号seq=w。 客户端接收到确认断开连接报文(ACK、FIN)后，进入FIN-WAIT-2(终止等待-2)状态。也就是告诉客户端，我的数据也发送完了，不会再给你发数据了。 </p><p>第四次挥手： 客户端收到确认断开连接报文(ACK、FIN)后，回复确认报文(ACK)给服务端。 确认序号ack=w+1。序列号=u+1。 然后进入TIME_WAIT(时间等待)状态。</p><p>注意：此时，TCP连接还没有被释放，需要时间等待状态结束后(2MSL)，两端才会进入CLOSED状态。设置时间等待是因为——最后一个确认报文可能会丢失，而需要重传。</p><h4 id="seq、ack、ACK、SYN、FIN"><a href="#seq、ack、ACK、SYN、FIN" class="headerlink" title="seq、ack、ACK、SYN、FIN"></a>seq、ack、ACK、SYN、FIN</h4><p>序列号seq：占4个字节，用来标记数据段的顺序，TCP把连接中发送的所有数据字节都编上一个序号，第一个字节的编号由本地随机产生；给字节编上序号后，就给每一个报文段指派一个序号；序列号seq就是这个报文段中的第一个字节的数据编号。</p><p>确认号ack：占4个字节，期待收到对方下一个报文段的第一个数据字节的序号；序列号表示报文段携带数据的第一个字节的编号；而确认号指的是期望接收到的下一个字节的编号；因此当前报文段最后一个字节的编号+1即为确认号。</p><p>确认ACK：占1位，仅当ACK=1时，确认号字段才有效。ACK=0时，确认号无效</p><p>同步SYN：连接建立时用于同步序号。当SYN=1，ACK=0时表示：这是一个连接请求报文段。若同意连接，则在响应报文段中使得SYN=1，ACK=1。因此，SYN=1表示这是一个连接请求，或连接接受报文。SYN这个标志位只有在TCP建立连接时才会被置1，握手完成后SYN标志位被置0。</p><p>终止FIN：用来释放一个连接。FIN=1表示：此报文段的发送方的数据已经发送完毕，并要求释放传输连接<br>ACK、SYN和FIN这些大写的单词表示标志位，其值要么是1，要么是0；ack、seq小写的单词表示序号。</p><h4 id="TCP状态中TIME-WAIT作用"><a href="#TCP状态中TIME-WAIT作用" class="headerlink" title="TCP状态中TIME_WAIT作用"></a>TCP状态中TIME_WAIT作用</h4><p>客户端接收到服务端的FIN报文后进入状态，此时并不是直接进入CLOSED状态，还需要等待一个时间计时器设置的时间，理由如下：</p><ol><li>确保最后一个确认报文段能够到达，如果B没有收到A发送来的确认报文段，那么就会重新发送连接释放请求报文段，A等待一段时间就是为了处理这种情况发生。</li><li>可能存在’已失效的连接请求报文段，为了防止这种报文段出现在本次连接之外，需要等待一段时间。</li></ol><h5 id="服务器出现异常？"><a href="#服务器出现异常？" class="headerlink" title="服务器出现异常？"></a>服务器出现异常？</h5><p>如果服务器出现异常，百分之八九十都是下面两种情况：</p><ol><li>服务器保持了大量TIME_WAIT状态</li><li>服务器保持了大量CLOSE_WAIT状态</li></ol><p>因为linux分配给一个用户的文件句柄是有限的，而TIME_WAIT和CLOSE_WAIT两种状态如果一直被保持，那么意味着对应数目的通道就一直被占着，而且是“占着茅坑不使劲”，一旦达到句柄数上限，新的请求就无法被处理了，接着就是大量Too Many Open Files异常，tomcat崩溃。。。</p><h5 id="服务器大量CLOSE-WAIT状态的原因？？"><a href="#服务器大量CLOSE-WAIT状态的原因？？" class="headerlink" title="服务器大量CLOSE_WAIT状态的原因？？"></a>服务器大量CLOSE_WAIT状态的原因？？</h5><ol><li>CLOSE_WAIT产生的原因在于：TCP Server 已经ACK了过来的FIN数据包，但是上层应用程序迟迟没有发命令关闭Server到client 端的连接。所以TCP一直在那等啊等…..</li><li>所以说如果发现自己的服务器保持了大量的CLOSE_WAIT，问题的根源十有八九是自己的server端程序代码的问题。</li></ol><h5 id="服务器大量TIME-WAIT状态原因？"><a href="#服务器大量TIME-WAIT状态原因？" class="headerlink" title="服务器大量TIME_WAIT状态原因？"></a>服务器大量TIME_WAIT状态原因？</h5><ol><li>服务器处理大量连接并主动关闭连接时，将导致服务器端存在大量的处于TIME_WAIT状态的socket。</li><li>因为主动关闭方会进入TIME_WAIT的状态，然后在保持这个状态2MSL（max segment lifetime）时间（1到4分钟）之后，彻底关闭回收资源（被占用的是一个五元组：（协议，本地IP，本地端口，远程IP，远程端口）。对于 Web 服务器，协议是 TCP，本地 IP 通常也只有一个，本地端口默认的 80 或者 443。只剩下远程 IP 和远程端口可以变了。如果远程 IP 是相同的话，就只有远程端口可以变了。这个只有几万个）。</li><li>所以如果大量关闭，资源还没来得及回收，会导致大量TIME_WAIT。</li></ol><p>解决方案是修改linux内核，允许将TIME-WAIT sockets重新用于新的TCP连接，并开启TCP连接中TIME-WAIT sockets的快速回收，这些默认都是关闭的。</p><h5 id="TCP连接为什么不是两次连接"><a href="#TCP连接为什么不是两次连接" class="headerlink" title="TCP连接为什么不是两次连接"></a>TCP连接为什么不是两次连接</h5><p>防止失效的连接请求报文段被服务端接受，从而产生错误。</p><p>失效的连接请求：若客户端向服务端发送的连接请求丢失，客户端等待应答超时后就会再次发送连接请求，此时，上一个连接请求就是『失效的』。</p><p>若建立连接只需两次握手，客户端并没有太大的变化，仍然需要获得服务端的应答后才进入ESTABLISHED状态，而服务端在收到连接请求后就进入ESTABLISHED状态。此时如果网络拥塞，客户端发送的连接请求迟迟到不了服务端，客户端便超时重发请求，如果服务端正确接收并确认应答，双方便开始通信，通信结束后释放连接。此时，如果那个失效的连接请求抵达了服务端，由于只有两次握手，服务端收到请求就会进入ESTABLISHED状态，等待发送数据或主动发送数据。但此时的客户端早已进入CLOSED状态，服务端将会一直等待下去，这样浪费服务端连接资源。</p><h5 id="TCP第三次握手失败会出现什么"><a href="#TCP第三次握手失败会出现什么" class="headerlink" title="TCP第三次握手失败会出现什么"></a>TCP第三次握手失败会出现什么</h5><p>当失败时，服务器并不会重传ack报文，而是直接发送RTS（注意区分RST）报文段，进入CLOSED状态，防止SYN洪泛攻击。</p><p>syn洪泛攻击，通俗的理解是：当第三次握手没有发送确认信息时，等待一段时间后，主机就会断开之前的半开连接并回收资源，这为dos（deny of service）攻击埋下隐患，当主动方主动发送大量的syn数据包，但并不做出第三次握手响应，server就会为这些syn包分配资源（但并未使用），就会使server占用大量内存，使server连接环境耗尽，这就是syn洪泛攻击</p><h4 id="RST"><a href="#RST" class="headerlink" title="RST"></a>RST</h4><h5 id="RST标志位"><a href="#RST标志位" class="headerlink" title="RST标志位"></a>RST标志位</h5><p>RST表示复位，用来异常的关闭连接，在TCP的设计中它是不可或缺的。就像上面说的一样，发送RST包关闭连接时，不必等缓冲区的包都发出去（不像上面的FIN包），直接就丢弃缓存区的包发送RST包。而接收端收到RST包后，也不必发送ACK包来确认。</p><p>TCP处理程序会在自己认为的异常时刻发送RST包。例如，A向B发起连接，但B之上并未监听相应的端口，这时B操作系统上的TCP处理程序会发RST包。</p><p>又比如，AB正常建立连接了，正在通讯时，A向B发送了FIN包要求关连接，B发送ACK后，网断了，A通过若干原因放弃了这个连接（例如进程重启）。网通了后，B又开始发数据包，A收到后表示压力很大，不知道这野连接哪来的，就发了个RST包强制把连接关了，B收到后会出现connect reset by peer错误。</p><h5 id="RST攻击"><a href="#RST攻击" class="headerlink" title="RST攻击"></a>RST攻击</h5><p>A和服务器B之间建立了TCP连接，此时C伪造了一个TCP包发给B，使B异常的断开了与A之间的TCP连接，就是RST攻击了。实际上从上面RST标志位的功能已经可以看出这种攻击如何达到效果了。</p><p>那么伪造什么样的TCP包可以达成目的呢？我们至顶向下的看。</p><p>假定C伪装成A发过去的包，这个包如果是RST包的话，毫无疑问，B将会丢弃与A的缓冲区上所有数据，强制关掉连接。</p><p>如果发过去的包是SYN包，那么，B会表示A已经发疯了（与OS的实现有关），正常连接时又来建新连接，B主动向A发个RST包，并在自己这端强制关掉连接。</p><p>这两种方式都能够达到复位攻击的效果。似乎挺恐怖，然而关键是，如何能伪造成A发给B的包呢？这里有两个关键因素，源端口和序列号。</p><p>一个TCP连接都是四元组，由源IP、源端口、目标IP、目标端口唯一确定一个连接。所以，如果C要伪造A发给B的包，要在上面提到的IP头和TCP头，把源IP、源端口、目标IP、目标端口都填对。这里B作为服务器，IP和端口是公开的，A是我们要下手的目标，IP当然知道，但A的源端口就不清楚了，因为这可能是A随机生成的。当然，如果能够对常见的OS如windows和linux找出生成source port规律的话，还是可以搞定的。</p><p>序列号问题是与滑动窗口对应的，伪造的TCP包里需要填序列号，如果序列号的值不在A之前向B发送时B的滑动窗口内，B是会主动丢弃的。所以我们要找到能落到当时的AB间滑动窗口的序列号。这个可以暴力解决，因为一个sequence长度是32位，取值范围0-4294967296，如果窗口大小像上图中我抓到的windows下的65535的话，只需要相除，就知道最多只需要发65537（4294967296/65535=65537）个包就能有一个序列号落到滑动窗口内。RST包是很小的，IP头＋TCP头也才40字节，算算我们的带宽就知道这实在只需要几秒钟就能搞定。</p><h5 id="发送RST的情况："><a href="#发送RST的情况：" class="headerlink" title="发送RST的情况："></a>发送RST的情况：</h5><p>在某些特殊情况下，TCP连接的一端会向另一端发送复位报文段，以通知对方关闭或重新建立连接。</p><ol><li>访问不存在的端口。若端口不存，则直接返回RST，同时RST报文接收通告窗口大小为0。其实客户端向服务器的某个端口发起连接，如果端口被处于TIME_WAIT 状态的连接占用时，客户端也会收到RST。</li><li>异常终止连接。一方直接发送RST报文，表示异常终止连接。一旦发送方发送复位报文段，发送端所有排队等待发送的数据都被丢弃。应用程序可以通过socket选项SO_LINGER来发送RST复位报文。<br>3.处理半打开连接。一方关闭了连接，另一方却没有收到结束报文（如网络故障），此时另一方还维持着原来的连接。而一方即使重启，也没有该连接的任何信息。这种状态就叫做半打开连接。而此时另一方往处于半打开状态的连接写数据，则对方回应RST复位报文。</li></ol><h4 id="TCP长连接和短连接"><a href="#TCP长连接和短连接" class="headerlink" title="TCP长连接和短连接"></a>TCP长连接和短连接</h4><p>在HTTP/1.0中默认使用短连接。也就是说，客户端和服务器每进行一次HTTP操作，就建立一次连接，任务结束就中断连接。当客户端浏览器访问的某个HTML或其他类型的Web页中包含有其他的Web资源（如JavaScript文件、图像文件、CSS文件等），每遇到这样一个Web资源，浏览器就会重新建立一个HTTP会话。</p><p>而从HTTP/1.1起，默认使用长连接，用以保持连接特性。使用长连接的HTTP协议，会在响应头加入这行代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Connection:keep-alive</span><br></pre></td></tr></table></figure><p>在使用长连接的情况下，当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，客户端再次访问这个服务器时，会继续使用这一条已经建立的连接。Keep-Alive不会永久保持连接，它有一个保持时间，可以在不同的服务器软件（如Apache）中设定这个时间。实现长连接需要客户端和服务端都支持长连接。</p><p>HTTP协议的长连接和短连接，实质上是TCP协议的长连接和短连接。</p><p><img src="2019072000010.png" alt="796678"></p><h4 id="TCP流量控制"><a href="#TCP流量控制" class="headerlink" title="TCP流量控制"></a>TCP流量控制</h4><p>流量控制：一般来说，我们希望数据传输得更快一些，但如果发送方把数据发送的过快，接收方可能来不及接收，这就会造成数据的丢失。所谓流量控制就是让发送方的发送速率不要太快，要让接收方来得及接收。<br>有两种控制方式：</p><ol><li>基于速率流量控制，它是给发送方指定某个速率，同时确保数据永远不能超过这个速率发送。这种类型的流量控制最适合流应用程序，可被用于广播和组播发现。</li><li>基于窗口流量控制，是使用滑动窗口时最流行的方法。在这种方法里，窗口大小不是固定的，而是允许随时间而变动的。为了使用这种技术，必须有种方法让接收方可以通知发送方使用多大的窗口。这一般称为窗口通告或者窗口更新。窗口更新和ACK是由同一个分组携带的，意味着发送方往往在它的窗口滑动到右边的同时调整它的大小。</li></ol><p>在TCP的实现中广泛使用的Nagle算法:若发送方应用进程把要发送的数据逐个字节地送到TCP的发送缓存，则发送方就把第一个字节先发送出去，把后面到达的数据字节都缓存起来。当发送方收到对第一个数据字符的确认后，再把发送缓存中的所有数据组装成一个报文段发送出去，同时继续对随后到达的数据进行缓存。只有在收到对前一个报文段的确认后才继续发送下一个报文段。当数据到达较快而网络速率缓慢时，用这种方法可明显减少所用的网络带宽。Nagle算法还规定，当到达的数据已达到发送窗口大小的一半或者报文段的最大长度时，就立即发送一个报文段。这样做，可以有效提高网络的吞吐量。</p><h4 id="TCP拥塞控制"><a href="#TCP拥塞控制" class="headerlink" title="TCP拥塞控制"></a>TCP拥塞控制</h4><p>发生拥塞控制的原因：资源(带宽、交换节点的缓存、处理机)的需求&gt;可用资源。</p><p>拥塞控制就是为了防止过多的数据注入到网络中，这样可以使网络中的路由器或者链路不至于过载。拥塞控制要做的都有一个前提：就是网络能够承受现有的网络负荷。</p><p>包括：慢启动、拥塞避免、快重传、快启动。</p><p>对比流量控制：拥塞控制是一个全局的过程，涉及到所有的主机、路由器、以及降低网络相关的所有因素。流量控制往往指点对点通信量的控制。是端对端的问题。</p><p>拥塞窗口：发送方为一个动态变化的窗口叫做拥塞窗口，拥塞窗口的大小取决于网络的拥塞程度。发送方让自己的发送窗口=拥塞窗口，但是发送窗口不是一直等于拥塞窗口的，在网络情况好的时候，拥塞窗口不断的增加，发送方的窗口自然也随着增加，但是接受方的接受能力有限，在发送方的窗口达到某个大小时就不在发生变化了。发送方如果知道网络拥塞了呢？发送方发送一些报文段时，如果发送方没有在时间间隔内收到接收方的确认报文段，则就可以认为网络出现了拥塞。</p><p>慢启动：主机开发发送数据报时，如果立即将大量的数据注入到网络中，可能会出现网络的拥塞。慢启动算法就是在主机刚开始发送数据报的时候先探测一下网络的状况，如果网络状况良好，发送方每发送一次报文段都能正确的接受确认报文段。那么就从小到大的增加拥塞窗口的大小，即增加发送窗口的大小。例子：开始发送方先设置cwnd（拥塞窗口）=1,发送第一个报文段M1，接收方接收到M1后，发送方接收到接收方的确认后，把cwnd增加到2，接着发送方发送M2、M3，发送方接收到接收方发送的确认后cwnd增加到4，慢启动算法每经过一个传输轮次（认为发送方都成功接收接收方的确认），拥塞窗口cwnd就加倍。</p><p>拥塞控制：为了防止cwnd增加过快而导致网络拥塞，所以需要设置一个慢启动开始门限ssthresh状态变量（我也不知道这个到底是什么，就认为他是一个拥塞控制的标识）,它的用法：</p><ol><li>当cwnd &lt; ssthresh,使用慢启动算法，</li><li>当cwnd &gt; ssthresh,使用拥塞控制算法，停用慢启动算法。</li><li>当cwnd = ssthresh，这两个算法都可以。</li></ol><p>拥塞避免的思路：是让cwnd缓慢的增加而不是加倍的增长，每经历过一次往返时间就使cwnd增加1，而不是加倍，这样使cwnd缓慢的增长，比慢启动要慢的多。</p><p>无论是慢启动算法还是拥塞避免算法，只要判断网络出现拥塞，就要把慢启动开始门限(ssthresh)设置为设置为发送窗口的一半（&gt;=2），cwnd(拥塞窗口)设置为1，然后在使用慢启动算法，这样做的目的能迅速的减少主机向网络中传输数据，使发生拥塞的路由器能够把队列中堆积的分组处理完毕。拥塞窗口是按照线性的规律增长，比慢启动算法拥塞窗口增长块的多。</p><p><img src="2019072000011.png" alt="2131"></p><p>实例：</p><p>TCP连接进行初始化的时候，cwnd=1,ssthresh=16。</p><p>在慢启动算法开始时，cwnd的初始值是1，每次发送方收到一个ACK拥塞窗口就增加1，当ssthresh =cwnd时，就启动拥塞控制算法，拥塞窗口按照规律增长，</p><p>当cwnd=24时，网络出现超时，发送方收不到确认ACK，此时设置ssthresh=12,(二分之一cwnd),设置cwnd=1,然后开始慢启动算法，当cwnd=ssthresh=12,慢启动算法变为拥塞控制算法，cwnd按照线性的速度进行增长。</p><p>AIMD(加法增大乘法减小)</p><p>乘法减小：无论在慢启动阶段还是在拥塞控制阶段，只要网络出现超时，就是将cwnd置为1，ssthresh置为cwnd的一半，然后开始执行慢启动算法（cwnd&lt;ssthresh）。</p><p>加法增大：当网络频发出现超时情况时，ssthresh就下降的很快，为了减少注入到网络中的分组数，而加法增大是指执行拥塞避免算法后，是拥塞窗口缓慢的增大，以防止网络过早出现拥塞。</p><p>这两个结合起来就是AIMD算法，是使用最广泛的算法。拥塞避免算法不能够完全的避免网络拥塞，通过控制拥塞窗口的大小只能使网络不易出现拥塞。</p><p>快重传：快重传算法要求首先接收方收到一个失序的报文段后就立刻发出重复确认，而不要等待自己发送数据时才进行捎带确认。接收方成功的接受了发送方发送来的M1、M2并且分别给发送了ACK，现在接收方没有收到M3，而接收到了M4，显然接收方不能确认M4，因为M4是失序的报文段。如果根据可靠性传输原理接收方什么都不做，但是按照快速重传算法，在收到M4、M5等报文段的时候，不断重复的向发送方发送M2的ACK,如果接收方一连收到三个重复的ACK,那么发送方不必等待重传计时器到期，由发送方尽早重传未被确认的报文段。</p><p>快恢复:</p><ol><li>当发送发连续接收到三个确认时，就执行乘法减小算法，把慢启动开始门限（ssthresh）减半，但是接下来并不执行慢开始算法。</li><li>此时不执行慢启动算法，而是把cwnd设置为ssthresh的一半， 然后执行拥塞避免算法，使拥塞窗口缓慢增大。</li></ol><h4 id="TCP如何解决粘包、拆包问题"><a href="#TCP如何解决粘包、拆包问题" class="headerlink" title="TCP如何解决粘包、拆包问题"></a>TCP如何解决粘包、拆包问题</h4><p>我们都知道TCP属于传输层的协议，传输层除了有TCP协议外还有UDP协议。那么UDP是否会发生粘包或拆包的现象呢？答案是不会。UDP是基于报文发送的，从UDP的帧结构可以看出，在UDP首部采用了16bit来指示UDP数据报文的长度，因此在应用层能很好的将不同的数据报文区分开，从而避免粘包和拆包的问题。而TCP是基于字节流的，虽然应用层和TCP传输层之间的数据交互是大小不等的数据块，但是TCP把这些数据块仅仅看成一连串无结构的字节流，没有边界；另外从TCP的帧结构也可以看出，在TCP的首部没有表示数据长度的字段，基于上面两点，在使用TCP传输数据时，才有粘包或者拆包现象发生的可能。</p><p>粘包、拆包表现形式</p><p>现在假设客户端向服务端连续发送了两个数据包，用packet1和packet2来表示，那么服务端收到的数据可以分为三种，现列举如下：</p><p>第一种情况，接收端正常收到两个数据包，即没有发生拆包和粘包的现象：</p><p><img src="2019072000012.png" alt="314114"></p><p>第二种情况，接收端只收到一个数据包，由于TCP是不会出现丢包的，所以这一个数据包中包含了发送端发送的两个数据包的信息，这种现象即为粘包。这种情况由于接收端不知道这两个数据包的界限，所以对于接收端来说很难处理</p><p><img src="2019072000013.png" alt="14241"></p><p>第三种情况，这种情况有两种表现形式，如下图。接收端收到了两个数据包，但是这两个数据包要么是不完整的，要么就是多出来一块，这种情况即发生了拆包和粘包。这两种情况如果不加特殊处理，对于接收端同样是不好处理的。</p><p><img src="2019072000014.png" alt="414352"></p><p>发生TCP粘包或拆包有很多原因，现列出常见的几点： </p><ol><li>要发送的数据大于TCP发送缓冲区剩余空间大小，将会发生拆包。</li><li>待发送数据大于MSS（最大报文长度），TCP在传输前将进行拆包。</li><li>要发送的数据小于TCP发送缓冲区的大小，TCP将多次写入缓冲区的数据一次发送出去，将会发生粘包。</li><li>接收数据端的应用层没有及时读取接收缓冲区中的数据，将发生粘包。等等。</li></ol><p>粘包、拆包解决办法：<br>通过以上分析，我们清楚了粘包或拆包发生的原因，那么如何解决这个问题呢？解决问题的关键在于如何给每个数据包添加边界信息，常用的方法有如下几个：</p><ol><li>发送端给每个数据包添加包首部，首部中应该至少包含数据包的长度，这样接收端在接收到数据后，通过读取包首部的长度字段，便知道每一个数据包的实际长度了。</li><li>发送端将每个数据包封装为固定长度（不够的可以通过补0填充），这样接收端每次从接收缓冲区中读取固定长度的数据就自然而然的把每个数据包拆分开来。</li><li>可以在数据包之间设置边界，如添加特殊符号，这样，接收端通过这个边界就可以将不同的数据包拆分开。等等。。。</li></ol><h4 id="IP知识点总结"><a href="#IP知识点总结" class="headerlink" title="IP知识点总结"></a>IP知识点总结</h4><p>IP（Internet Protocol）即网络之间互连的协议。网络层的功能是基于IP地址进行不同网络系统间的路径选择。</p><p>IP作用：对不同数据链路的相异特性进行抽象化，在复杂的网络环境中将数据包发给最终的目标地址。</p><p>IP的两大功能</p><p>路由控制</p><ol><li>含义：指分组数据发送到最终目标地址的功能。</li><li>作用：即使网络非常复杂，通过路由控制就可以确定到达目标地址的通路。</li><li>例子：坐火车，每到一站再向车站工作人员打听接下来该坐什么车。“各跳之间无计划传输”。<br>火车-数据链路，旅客-IP数据包，车站工作人员-路由器。</li><li>路由控制表：所有主机都维护着一张路由控制表（Routing Table），记录了IP数据在下一步应该发给哪个路由器。IP包根据这个路由表在各个数据链路上传输。</li></ol><p>数据链路的抽象化</p><ol><li>IP对不同数据链路进行了抽象。那么不同数据链路之间最大的区别是：他们各自的最大传输单位（MTU，Maximum Transmission Unit）不同。IP会进行分片处理（IP Fragmentation），将较大的IP包分成多个较小的IP包。</li><li>从网络层上看，可以忽略数据包在各个数据链路上的MTU，只需要按照原地址发送的长度接收数据包。</li></ol><p>IP属于面向无连接型</p><ol><li>无连接型含义：发包之前，不需要建立与对端目标地址之间的连接。上次如果有需要发送给IP的数据，该数据会立即被压缩成IP包发出去。</li><li>缺点：产生冗余的通信。</li><li>为什么IP要采用面向无连接？<br>简化：面向连接相对复杂，管理每个连接本身就是一个很繁琐的事情。<br>提速：每次通信之前都要事先建立连接，会降低处理速度。需要有连接时，可以委托上一层提供此项服务。</li></ol><p>IP地址的分类:</p><p>A类地址:定义：首位0开头，后24位是主机标识；网络地址范围：0.0.0.0~127.0.0.0；一个网段内可以容纳的主机上限是2^24-2个</p><p>B类地址：定义：前两位是10的地址，后16位是主机标识；网络地址范围：128.0.0.1~191.255.0.0；一个网段可以容纳的主机上限是2^16-2个</p><p>C类地址：定义：前三位是110的地址，前24位是网络标识，后8位是主机标识。网络地址范围：192.0.0.0~239.255.255.0；一个网段内可容纳的主机地址上限是2^8-2个(254个)</p><p>D类地址：定义：前四位是1110的地址，前32位是网络标识；网络地址范围：224.0.0.0~239.255.255.255；D类地址没有主机标识，常被用于多播</p><p>关于分配IP主机地址的注意事项：</p><ol><li>主机地址不可以全部为0或全部为1。</li><li>全部为0标识对应的网络地址或IP地址不可获知。</li><li>全部为1的主机地址通常作为广播地址。</li><li>所以以上每个网段的主机数量上限是2^n-2个。</li></ol><p>广播地址：</p><ol><li>广播地址定义：IP地址的主机标识全部设置为1。</li><li>广播定义：向某个网段的广播地址发送IP包，这个网段的所有主机都能收到这个包，由主机IP之上的一层去判断是否接收数据。</li><li>缺点：给毫无关系的网络或主机带来影响，造成不必要的流量。</li></ol><p>子网掩码</p><ol><li>作用：理论上B类网络一个链路允许65000多台计算机连接。然而实际网络架构中，一般不会有在同一连路上连接65000多台计算机的情况。因此，直接使用A\B\C类地址，有点浪费资源，人们开始采用一种新的组合方式减少地址空间的浪费。子网掩码可以通过子网网络地址细分出比A\B\C类更小粒度的网络。</li><li>定义<br>子网掩码用二进制方式表示，也是32位二进制数字，</li><li>规则<br>1表示IP地址的网络地址对应位。<br>0表示IP地址的主机地址对应位。</li><li>特点<br>子网掩码可以灵活指定网络标识的长度，从而网络粒度更细。</li></ol><p>路由控制</p><ol><li>作用：仅仅有IP地址不足以将数据发向目标地址，在数据发送过程中需要“指明路由器或主机”的信息，以便真正发往目标地址。保存这种信息的就是路由控制表（Routing Table）。该表是由一个“路由协议”（有别于IP协议）制作而成的。</li><li>路由控制与IP地址<br>默认路由<br>主机路由<br>环回地址<br>同一台计算机的程序之间进行网络通信，使用一个特殊IP地址 127.0.0.1作为环回地址，与该地址等价的是localhost主机名。使用这个IP或主机名，数据包不会发向网络。</li><li>路由控制表的聚合，又称路由汇总（Aggregation）。<br>作用：路由表越大，管理它需要的内存和CPU也就越大，而且查找路由表的时间就越长，导致转发IP数据包的性能下降。如果要构建大规模、高性能网络，需要尽可能削减路由表的大小。<br>利用网络地址的比特分步进行分层配置。对内即使有多个子网掩码，对外呈现出的也是同一个网络地址。</li><li>IP对数据的处理<br>背景&amp;作用<br>每种数据链路的MTU之所以不同，是因为每个不同类型的数据链路的使用目的不同，可承载的MTU也就不同。<br>IP数据传递到下一层数据链路层时，可能需要进行分片处理（IP Fragmentation)。<br>规则<br>按照路径中存在的所有数据链路中 最小的MTU发送，可以避免中途的路由器进行分片处理。</li></ol><p>IPv6</p><ol><li>定义：8个16位，共128比特，是IPv4长度的4倍。</li><li>作用：从根本上解决IPv4地址耗尽的问题。</li><li>特点：依旧适应互联网分层构造，路由控制上也尽可能避免路由表膨大，性能提升，简化首部，路由器不再分片，通过路径MTU只由发送端主机进行分片处理；即插即用；采用认证与加密功能；多播、Moblie IP比IPv4更顺利使用</li><li>规则<br>每16位比特为一组，用”:”隔开。出现连续的0时可以省略，用”::”表示。一个IP地址只允许出现一次“::”。</li></ol><p>IP包的具体内容</p><p><strong>IPv4首部</strong><br>IP首部包含着 用IP协议进行发包控制时 所有的必要信息。首部以每32比特（8字节）为一个单位：</p><p>版本号：4比特，IPv4即值为4</p><p>首部长度（IHL：Internet Header Length）：IP首部大小。4比特，单位是4字节。值为5时，IP首部长度为4*5=20字节。</p><p>区分服务（TOS：Type Of Service）：表明服务质量。8比特，现已划分为DSCP和ECN两个字段。</p><p>总长度（Total Length）：表示IP首部与数据部分的总字节数。该字段长16比特。因此IP包最大长度是65535字节。</p><p>标识（ID：Identification）:用于分片重组，该字段长16比特。同一分片的标识值相同，不同分片的标识值不同。</p><p>标志（Flags）:表示包被分片的相关信息，该字段长3比特。可以表示 是否使用分片、是否分片的最后一个包。</p><p>片偏移（FO：Fragment Offset）:标识被分片的每一个分段相对于原始数据的位置。该字段长13比特。单位是8字节，因此最大可以表示8* 2^13 =65536字节的位置。</p><p>生存时间（TTL：Time To Live）：指可以中转多少个路由器，没经过一个路由器，TTL会减1，该字段长度为8比特。因此一个包的中转路由次数不会超过2^8=256次。由此可以避免IP包在网络内无限传递的问题。</p><p>协议（Protocol）：表示IP首部的下一个首部属于哪个协议（其实就是上层协议）。该字段长度8比特。</p><p>首部校验和（Header Checksum）：按照一定算法校验数据报的首部，不校验数据部分，主要来确保IP数据报不被破坏。该字段长度16比特。</p><p>源地址（Source Address）：32比特，表示发送端IP地址。</p><p>目标地址（Destination Address）：32比特，表示接收端IP地址。</p><p>可选项（Options）:<br>长度可变，通常只用于实验或诊断时使用。包含如下几点信息：<br>安全级别<br>源路径<br>路径记录<br>时间戳<br>填充（Padding）：再有可选项的情况下，首部长度可能不是32比特的整数倍。为此，通过向该字段填充0，调整为32比特的整数倍。</p><p><strong>IP包数据部分</strong><br>OSI模型网络层之下 数据链路层的数据帧 就是IP包的数据部分。IP首部是对数据进行包装，增加了网络层的控制信息。*</p><h5 id="ICMP协议"><a href="#ICMP协议" class="headerlink" title="ICMP协议"></a>ICMP协议</h5><p>架构IP网络时需要注意：确认网络是否正常工作，以及遇到异常时进行问题诊断</p><p>作用</p><ol><li>确定IP包是否成功送达目标地址</li><li>通知发在发送过程中IP包被废弃的原因</li><li>改善网络设置</li></ol><p>根据以上，就可以获得网路是否正常、设置是否有误以及设备有何异常等信息，从而便于进行网络上的问题诊断。<br>网络的设置可以包括很多内容：网线、IP地址和子网掩码的设置、路由表的和值、DNS服务器的设置、邮件服务器的设置以及代理服务器的设置等。而ICMP只负责与IP相关的设置。</p><p>ICMP的包以明文的形式像TCP、UDP一样通过IP进行传输。然而，ICMP所承担的功能并非传输层的补充，而应该把它视为IP的一部分。</p><p>ICMP的消息分为两类：通知出错原因的错误消息;用于诊断的查询消息</p><p>ICMP超时消息<br>IP包首部有一个字段TTL，每经过一个路由器就会减1，直到减到0时IP报就会被丢弃。此时，IP路由器将会发送一个ICMP超时的消息给发送端，通知该包已被丢弃。</p><p>ICMP回送消息<br>用于进行通信的主机或路由器之间，判断所发送的数据包是否已经成功到达对端的一种消息。<br>向对端主机发送 回送请求消息（ICMP Echo Request Message）,接收对端主机发回来的 回送应答消息（ICMP Echo Reply Message）。<br>ping命令（Packet InterNetwork Groper） 就是利用这个消息实现的。<br>还有ICMP路由器探索消息用于发现与自己相连网络中的路由器、ICMP地址掩码消息获取子网掩码的信息。</p><h4 id="ARP解析过程"><a href="#ARP解析过程" class="headerlink" title="ARP解析过程"></a>ARP解析过程</h4><p>ARP是一种能够实现IP地址到物理地址的转化协议，以目标地址为线索用来定义下一位应该接收数据分包的网络设备对应的MAC地址，如果目标主机不在同一个数据链路层的话，可以通过ARP查找下一跳路由器的MAC地址，ARP只识用于IPV4，IPV6可以使用ICMPV6替代。</p><p>ARP工作过程：ARP借助ARP请求包和响应包来确定MAC地址。</p><p>例如：处在同一链路上的主机A 向B发送一个IP请求包，且互不知MAC地址：主机为了获取主机B的 MAC地址，起初通过广播发送一个ARP请求包，此包包含想要获取MAC地址主机的IP地址，因此ARP的请求包中会被同一链路上的所有主机或路由解析，如果ARP请求包中的目标IP与自己的IP地址相同，那么此节点就将自己MAC地址塞入ARP响应包，返回给主机A。</p><p>ARP缓存表：如果每发送一次IP数据包就进行一次ARP请求获取MAC地址，会造成不必要的网络流量。通常做法就是把获取的MAC地址缓存一端时间，即把第一次通过ARP获取的MAC地址作为IP对MAC的映射关系记忆，下一次如果若向该IP发送数据的时候，直接使用缓存表中的多应的MAC地址进行通信即可。当然每执行一次ARP请求去，其对应的ARP都会被清除。</p><h4 id="DNS原理"><a href="#DNS原理" class="headerlink" title="DNS原理"></a>DNS原理</h4><p>网络通讯大部分是基于TCP/IP的，而TCP/IP是基于IP地址的，所以计算机在网络上进行通讯时只能识别如“202.96.134.133”之类的IP地址，而不能认识域名。我们无法记住10个以上IP地址的网站，所以我们访问网站时，更多的是在浏览器地址栏中输入域名，就能看到所需要的页面，这是因为有一个叫“DNS服务器”的计算机自动把我们的域名“翻译”成了相应的IP地址，然后调出IP地址所对应的网页。</p><p>DNS( Domain Name System)是“域名系统”的英文缩写，是一种组织成域层次结构的计算机和网络服务命名系统，它用于TCP/IP网络，它所提供的服务是用来将主机名和域名转换为IP地址的工作</p><h5 id="DNS-的过程"><a href="#DNS-的过程" class="headerlink" title="DNS 的过程"></a>DNS 的过程</h5><ol><li>首先是查找浏览器缓存，浏览器会保存一段时间你之前访问过的一些网址的DNS信息，不同浏览器保存的时常不等。</li><li>如果没有找到对应的记录，这个时候浏览器会尝试调用系统缓存来继续查找这个网址的对应DNS信息。</li><li>如果还是没找到对应的IP，那么接着会发送一个请求到路由器上，然后路由器在自己的路由器缓存上查找记录，路由器一般也存有DNS信息。</li><li>如果还是没有，这个请求就会被发送到ISP（注：Internet Service Provider，互联网服务提供商，就是那些拉网线到你家里的运营商，中国电信中国移动什么的），ISP也会有相应的ISP DNS服务器，一听中国电信就知道这个DNS服务器的规模肯定不会小，所以基本上都能在这里找得到。题外话：会跑到这里进行查询是因为你没有改动过”网络中心”的”ipv4”的DNS地址，万恶的电信联通可以改动了这个DNS服务器，换句话说他们可以让你的浏览器跳转到他们设定的页面上，这也就是人尽皆知的DNS和HTTP劫持，ISP们还美名曰“免费推送服务”。强烈鄙视这种霸王行为。我们也可以自行修改DNS服务器来防止DNS被ISP污染。</li><li>如果还是没有的话， 你的ISP的DNS服务器会将请求发向根域名服务器进行搜索。根域名服务器就是面向全球的顶级DNS服务器，共有13台逻辑上的服务器，从A到M命名，真正的实体服务器则有几百台，分布于全球各大洲。所以这些服务器有真正完整的DNS数据库。如果到了这里还是找不到域名的对应信息，那只能说明一个问题：这个域名本来就不存在，它没有在网上正式注册过。或者卖域名的把它回收掉了（通常是因为欠费）。 这也就是为什么打开一个新页面会有点慢，因为本地没什么缓存，要这样递归地查询下去</li></ol><h4 id="DHCP动态主机配置协议"><a href="#DHCP动态主机配置协议" class="headerlink" title="DHCP动态主机配置协议"></a>DHCP动态主机配置协议</h4><p>即自动给主机配置IP地址、网络掩码等信息。</p><h5 id="DHCP如何实现分配IP？"><a href="#DHCP如何实现分配IP？" class="headerlink" title="DHCP如何实现分配IP？"></a>DHCP如何实现分配IP？</h5><ol><li>首先每个网络必须有一个DHCP服务器</li><li>计算机启动时，在自己的网络上广播一个报文，请求IP地址</li><li>这个请求就是DHCP DISCOVER包，这个包必须到达DHCP服务器</li><li>DHCP收到请求了就给主机分配一个IP地址，并通过DHCP OFFER包返回给主机</li><li>为了在主机没有IP地址的情况下完成此项工作，服务器用主机的以太网地址来标识这台主机</li></ol><h5 id="防止IP地址过期"><a href="#防止IP地址过期" class="headerlink" title="防止IP地址过期"></a>防止IP地址过期</h5><p>为了避免主机离开网络，并没有把IP地址返回给DHCP服务器，因此DHCP服务器在分配IP地址的时候都会指定一个有效期。在有效期满之前，主机必须请求续订。</p><h5 id="DHCP数据包格式及其原理"><a href="#DHCP数据包格式及其原理" class="headerlink" title="DHCP数据包格式及其原理"></a>DHCP数据包格式及其原理</h5><p>DHCP可为主机配置除了IP地址以外的其他各种参数，比如网络掩码、默认网关的IP地址，DNS服务器和时间服务器的IP地址。</p><h4 id="HTTP简介"><a href="#HTTP简介" class="headerlink" title="HTTP简介"></a>HTTP简介</h4><p>HTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写，是用于从万维网（WWW：World Wide Web）服务器传输超文本到本地浏览器的传送协议。HTTP基于TCP/IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）。工作于客户端-服务端架构上。浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器发送所有请求。Web服务器根据接收到的请求，向客户端发送响应信息。（明文传输）</p><p>HTTP之请求消息Request：请求行、请求头部（header）、空行和请求数据四部分组成。</p><p>HTTP响应消息Response：HTTP响应由四个部分组成：状态行、消息报头、空行和响应正文</p><h4 id="HTTPS和HTTP区别"><a href="#HTTPS和HTTP区别" class="headerlink" title="HTTPS和HTTP区别"></a>HTTPS和HTTP区别</h4><ol><li>http是HTTP协议运行在TCP之上。所有传输的内容都是明文，客户端和服务器端都无法验证对方的身份。</li><li>https是HTTP运行在SSL/TLS之上，SSL/TLS运行在TCP之上。所有传输的内容都经过加密，加密采用对称加密，但对称加密的密钥用服务器方的证书进行了非对称加密。此外客户端可以验证服务器端的身份，如果配置了客户端验证，服务器方也可以验证客户端的身份。</li><li>https协议需要到ca申请证书，一般免费证书很少，需要交费。</li><li>http是超文本传输协议，信息是明文传输，https 则是具有安全性的ssl加密传输协议</li><li>http和https使用的是完全不同的连接方式用的端口也不一样,前者是80,后者是443。</li><li>http的连接很简单,是无状态的</li><li>HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议 要比http协议安全</li></ol><h5 id="HTTPS不足之处："><a href="#HTTPS不足之处：" class="headerlink" title="HTTPS不足之处："></a>HTTPS不足之处：</h5><ol><li>HTTPS协议握手阶段比较费时，会使页面的加载时间延长近50%，增加10%到20%的耗电；</li><li>HTTPS连接缓存不如HTTP高效，会增加数据开销和功耗，甚至已有的安全措施也会因此而受到影响；</li><li>SSL证书需要钱，功能越强大的证书费用越高，个人网站、小网站没有必要一般不会用。</li><li>SSL证书通常需要绑定IP，不能在同一IP上绑定多个域名，IPv4资源不可能支撑这个消耗。</li><li>HTTPS协议的加密范围也比较有限，在黑客攻击、拒绝服务攻击、服务器劫持等方面几乎起不到什么作用。最关键的，SSL证书的信用链体系并不安全，特别是在某些国家可以控制CA根证书的情况下，中间人攻击一样可行。</li></ol><h5 id="HTTPS建立连接过程"><a href="#HTTPS建立连接过程" class="headerlink" title="HTTPS建立连接过程"></a>HTTPS建立连接过程</h5><p>建立HTTPS连接前需要建立SSL加密</p><p>过程：</p><ol><li>客户端发送请求到服务器端</li><li>服务器端返回证书和公开密钥，公开密钥作为证书的一部分而存在</li><li>客户端验证证书和公开密钥的有效性，如果有效，则生成共享密钥并使用公开密钥加密发送到服务器端</li><li>服务器端使用私有密钥解密数据，并使用收到的共享密钥加密数据，发送到客户端</li><li>客户端使用共享密钥解密数据</li></ol><h5 id="一次完整HTTP请求"><a href="#一次完整HTTP请求" class="headerlink" title="一次完整HTTP请求"></a>一次完整HTTP请求</h5><ol><li>网址进行DNS域名解析，得到对应的IP地址</li><li>根据这个IP，找到对应的服务器，发起TCP的三次握手　</li><li>建立TCP连接后发起HTTP请求</li><li>服务器响应HTTP请求，浏览器得到html代码</li><li>浏览器解析html代码，并请求html代码中的资源（如js、css图片等）（先得到html代码，才能去找这些资源）</li><li>浏览器对页面进行渲染呈现给用户</li></ol><p>注：</p><ol><li>DNS域名解析采用的是递归查询的方式，过程是，先去找DNS缓存-&gt;缓存找不到就去找根域名服务器-&gt;根域名又会去找下一级，这样递归查找之后，找到了，给我们的web浏览器。</li><li>为什么HTTP协议要基于TCP来实现？  TCP是一个端到端的可靠的面相连接的协议，HTTP基于传输层TCP协议不用担心数据传输的各种问题（当发生错误时，会重传）</li><li>最后一步浏览器是如何对页面进行渲染的？  a）解析html文件构成 DOM树，b）解析CSS文件构成渲染树，  c）边解析，边渲染 ，  d）JS 单线程运行，JS有可能修改DOM结构，意味着JS执行完成前，后续所有资源的下载是没有必要的，所以JS是单线程，会阻塞后续资源下载</li></ol><h4 id="HTTP1-0-HTTP1-1-HTTP2-0"><a href="#HTTP1-0-HTTP1-1-HTTP2-0" class="headerlink" title="HTTP1.0 HTTP1.1 HTTP2.0"></a>HTTP1.0 HTTP1.1 HTTP2.0</h4><h5 id="HTTP1-0、HTTP-1-1主要区别"><a href="#HTTP1-0、HTTP-1-1主要区别" class="headerlink" title="HTTP1.0、HTTP 1.1主要区别"></a>HTTP1.0、HTTP 1.1主要区别</h5><p>长链接：HTTP 1.0需要使用keep-alive参数来告知服务器端要建立一个长连接，而HTTP1.1默认支持长连接。HTTP是基于TCP/IP协议的，创建一个TCP连接是需要经过三次握手的,有一定的开销，如果每次通讯都要重新建立连接的话，对性能有影响。因此最好能维持一个长连接，可以用个长连接来发多个请求。</p><p>节约带宽：HTTP 1.1支持只发送header信息(不带任何body信息)，如果服务器认为客户端有权限请求服务器，则返回100，否则返回401。客户端如果接受到100，才开始把请求body发送到服务器。这样当服务器返回401的时候，客户端就可以不用发送请求body了，节约了带宽。另外HTTP还支持传送内容的一部分。这样当客户端已经有一部分的资源后，只需要跟服务器请求另外的部分资源即可。这是支持文件断点续传的基础</p><p>HOST域：现在可以web server例如tomat，设置虚拟站点是非常常见的，也即是说，web serve上的多个虚拟站点可以共享同一个ip和端口。HTTP1.0是没有host域的，HTTP1.1才支持这个参数。</p><h5 id="HTTP-1-1、HTTP2-0主要区别"><a href="#HTTP-1-1、HTTP2-0主要区别" class="headerlink" title="HTTP 1.1、HTTP2.0主要区别"></a>HTTP 1.1、HTTP2.0主要区别</h5><p>多路复用：HTTP2.0使用了多路复用的技术，做到同一个连接并发处理多个请求，而且并发请求的数量比HTTP1.1大了好几个数量级。当然HTTP1.1也可以多建立几个TCP连接，来支持处理更多并发的请求，但是创建TCP连接本身也是有开销的。TCP连接有一个预热和保护的过程，先检查数据是否传送成功，一旦成功过，则慢慢加大传输速度。因此对应瞬时并发的连接，服务器的响应就会变慢。所以最好能使用一个建立好的连接，并且这个连接可以支持瞬时并发的请求。</p><p>数据压缩：HTTP1.1不支持header数据的压缩，HTTP2.0使用HPACK算法对header的数据进行压缩，这样数据体积小了，在网络上传输就会更快。</p><p>服务器推送：当我们对支持HTTP2.0的web server请求数据的时候，服务器会顺便把一些客户端需要的资源一起推送到客户端，免得客户端再次创建连接发送请求到服务器端获取。这种方式非常合适加载静态资源。服务器端推送的这些资源其实存在客户端的某处地方，客户端直接从本地加载这些资源就可以了，不用走网络，速度自然是快很多的。</p><p><img src="2019072000016.png" alt="41344"></p><p>服务端推送过来的资源，会统一放在一个网络与http缓存之间的一个地方，在这里可以理解为“本地”。当客户端把index.html解析完以后，会向本地请求这个资源。由于资源已经本地化，所以这个请求的速度非常快，这也是服务端推送性能优势的体现之一</p><h4 id="session和cookie"><a href="#session和cookie" class="headerlink" title="session和cookie"></a>session和cookie</h4><p>会话（Session）跟踪是Web程序中常用的技术，用来跟踪用户的整个会话。常用的会话跟踪技术是Cookie与Session。Cookie通过在客户端记录信息确定用户身份，Session通过在服务器端记录信息确定用户身份。</p><p>理论上，一个用户的所有请求操作都应该属于同一个会话，而另一个用户的所有请求操作则应该属于另一个会话，二者不能混淆<br>HTTP协议是无状态的协议。一旦数据交换完毕，客户端与服务器端的连接就会关闭，再次交换数据需要建立新的连接。这就意味着服务器无法从连接上跟踪会话。即用户A购买了一件商品放入购物车内，当再次购买商品时服务器已经无法判断该购买行为是属于用户A的会话还是用户B的会话了。要跟踪该会话，必须引入一种机制。</p><p>Cookie ：由于HTTP是一种无状态的协议，服务器单从网络连接上无从知道客户身份。怎么办呢？就给客户端们颁发一个通行证吧，每人一个，无论谁访问都必须携带自己通行证。这样服务器就能从通行证上确认客户身份了。这就是Cookie的工作原理。<br>Cookie实际上是一小段的文本信息。客户端请求服务器，如果服务器需要记录该用户状态，就使用response向客 户端浏览器颁发一个Cookie。客户端浏览器会把Cookie保存起来。当浏览器再请求该网站时，浏览器把请求的网址连同该Cookie一同提交给服务器。服务器检查该Cookie，以此来辨认用户状态。服务器还可以根据需要修改Cookie的内容。</p><p>Session：Session是另一种记录客户状态的机制，不同的是Cookie保存在客户端浏览器中，而Session保存在服务器上。客户端浏览器访问服务器的时候，服务器把客户端信息以某种形式记录在服务器上。这就是Session。客户端浏览器再次访问时只需要从该Session中查找该客户的状态就可以了。<br>如果说Cookie机制是通过检查客户身上的“通行证”来确定客户身份的话，那么Session机制就是通过检查服务器上的“客户明细表”来确认客户身份。Session相当于程序在服务器上建立的一份客户档案，客户来访的时候只需要查询客户档案表就可以了。</p><p>区别：</p><ol><li>存放的位置：cookie保存在客户端，session一般保存在服务器端的文件系统或数据库或mamcache</li><li>安全性：由于session存放在服务器端，而客户端可以集中采用软、硬件技术保证安全性，所以cookie的安全性较session弱；</li><li>网络传输量：cookie需通过网络实现客户端与服务器端之间的传输，而session保存在服务器端，无需传输；</li><li>生存时间（以设置24分钟为例）<br>（1）cookie的生命周期是累计的。从创建的时候就开始计时，24分钟后cookie生命周期结束，cookie自动失效；<br>（2）session的生命周期是间隔的，从创建时开始计时，比如在24分钟内（php.ini默认session的失效时间就是1440s，即24m）没有访问过session(指没有执行含session的文件)，那么session信息就自动无效，但如果在24分钟之内，比如第23分钟访问过session，那么它的生命周期将重新开始计算。</li></ol><h4 id="GET和POST"><a href="#GET和POST" class="headerlink" title="GET和POST"></a>GET和POST</h4><p>在客户机和服务器之间进行请求-响应时，两种最常被用到的方法是：GET 和 POST。GET - 从指定的资源请求数据。POST - 向指定的资源提交要被处理的数据</p><p>GET交互</p><ol><li>GET交互方式是从服务器上获取数据，而并非修改数据，所以GET交互方式是安全的。就像数据库查询一样，从数据库查询数据，并不会影响数据库的数据信息，对数据库来说，也就是安全的。</li><li>GET交互方式是幂等的，幂等是一个数学概念，幂等函数就是可以使用相同参数重复执行，并且能获得相同结果的函数。在GET交互这里就是，对同一个URL的多个请求，得到的结果是相同的。就像数据库查询，不同的数据库连接对同一个数据库表用相同条件查询时，得到的结果也是一样的。</li></ol><p>POST交互</p><ol><li>POST交互是可以修改服务器数据的一种方式，涉及到信息的修改，就会有安全问题。就像数据库的更新，Update一个数据库表时，如果条件没有写对，就可能把不需要修改的数据给修改了，得到的数据就是错误的了。</li><li>一般的POST交互是必须要用到表单的，但是表单提交的默认方法是GET，如果改为POST方式，就需要修改表单提交时的Method。</li></ol><p>区别：</p><ol><li>get参数通过url传递，post放在request body中。</li><li>get请求在url中传递的参数是有长度限制的，而post没有。</li><li>get比post更不安全，因为参数直接暴露在url中，所以不能用来传递敏感信息。</li><li>1：get请求只能进行url编码，而post支持多种编码方式；2：get请求会浏览器主动cache，而post支持多种编码方式。3：get请求参数会被完整保留在浏览历史记录里，而post中的参数不会被保留。</li><li>GET和POST本质上就是TCP链接，并无差别。但是由于HTTP的规定和浏览器/服务器的限制，导致他们在应用过程中体现出一些不同。</li><li>GET产生一个TCP数据包；POST产生两个TCP数据包。</li><li>对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）。</li></ol><h4 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h4><ol><li>2开头 （请求成功）表示成功处理了请求的状态代码。</li><li>3开头 （请求被重定向）表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。</li><li>4开头 （请求错误）这些状态代码表示请求可能出错，妨碍了服务器的处理。</li><li>5开头（服务器错误）这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。</li></ol><h5 id="2XX"><a href="#2XX" class="headerlink" title="2XX"></a>2XX</h5><ol><li>200 OK</li><li>204 No Content：请求已经成功处理，但是返回的响应报文不包含实体的主体部分。一般在只需要从客户端往服务器发送信息，而不需要返回数据时使用。</li><li>206 Partial Content ：表示客户端进行了范围请求。响应报文包含由 Content-Range 指定范围的实体内容。</li></ol><h5 id="3XX"><a href="#3XX" class="headerlink" title="3XX"></a>3XX</h5><ol><li>301：表示永久重定向（301 moved permanently），表示请求的资源分配了新url，以后应使用新url。</li><li>302：表示临时性重定向（302 found），请求的资源临时分配了新url，本次请求暂且使用新url。302与301的区别是，302表示临时性重定向，重定向的url还有可能还会改变。</li><li>303：表示请求的资源路径发生改变，使用GET方法请求新url。她与302的功能一样，但是明确指出使用GET方法请求新url。<br>新url指的是，第一次请求返回的location。</li><li>304 not modified：客户端发送附带条件的请求时（if-matched,if-modified-since,if-none-match,if-range,if-unmodified-since任一个）服务器端允许请求访问资源，但因发生请求未满足条件的情况后，直接返回304Modified（服务器端资源未改变，可直接使用客户端未过期的缓存）。304状态码返回时，不包含任何响应的主体部分。304虽然被划分在3xx类别中，但是和重定向没有关系。</li></ol><h5 id="4XX"><a href="#4XX" class="headerlink" title="4XX"></a>4XX</h5><ol><li>400 Bad Request：请求报文中存在语法错误。</li><li>401 Unauthorized：该状态码表示发送的请求需要有认证信息（BASIC 认证、DIGEST 认证）。如果之前已进行过一次请求，则表示用户认证失败。</li><li>403 Forbidden ：请求被拒绝，服务器端没有必要给出拒绝的详细理由。</li><li>404 Not Found</li></ol><h5 id="5XX"><a href="#5XX" class="headerlink" title="5XX"></a>5XX</h5><ol><li>500 Internal Server Error：服务器正在执行请求时发生错误。</li><li>503 Service Unavailable ：服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。</li></ol><h4 id="HTTP方法"><a href="#HTTP方法" class="headerlink" title="HTTP方法"></a>HTTP方法</h4><p>客户端发送的 <strong>请求报文</strong> 第一行为请求行，包含了方法字段。</p><h5 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h5><blockquote><p>获取资源，当前网络请求中，绝大部分使用的是 GET 方法。</p></blockquote><h5 id="HEAD"><a href="#HEAD" class="headerlink" title="HEAD"></a>HEAD</h5><blockquote><p>获取报文首部，和 GET 方法一样，但是不返回报文实体主体部分。主要用于确认 URL 的有效性以及资源更新的日期时间等。</p></blockquote><h5 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h5><blockquote><p>传输实体主体，POST 主要用来传输数据，而 GET 主要用来获取资源。</p></blockquote><h5 id="PUT"><a href="#PUT" class="headerlink" title="PUT"></a>PUT</h5><blockquote><p>上传文件，由于自身不带验证机制，任何人都可以上传文件，因此存在安全性问题，一般不使用该方法。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT /new.html HTTP/1.1</span><br><span class="line">Host: example.com</span><br><span class="line">Content-type: text/html</span><br><span class="line">Content-length: 16</span><br><span class="line"></span><br><span class="line">&lt;p&gt;New File&lt;/p&gt;</span><br></pre></td></tr></table></figure><h5 id="PATCH"><a href="#PATCH" class="headerlink" title="PATCH"></a>PATCH</h5><blockquote><p>对资源进行部分修改，PUT 也可以用于修改资源，但是只能完全替代原始资源，PATCH 允许部分修改。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PATCH /file.txt HTTP/1.1</span><br><span class="line">Host: www.example.com</span><br><span class="line">Content-Type: application/example</span><br><span class="line">If-Match: &quot;e0023aa4e&quot;</span><br><span class="line">Content-Length: 100</span><br><span class="line"></span><br><span class="line">[description of changes]</span><br></pre></td></tr></table></figure><h5 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h5><blockquote><p>删除文件，与 PUT 功能相反，并且同样不带验证机制。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE /file.html HTTP/1.1</span><br></pre></td></tr></table></figure><h5 id="OPTIONS"><a href="#OPTIONS" class="headerlink" title="OPTIONS"></a>OPTIONS</h5><blockquote><p>查询支持的方法，、查询指定的 URL 能够支持的方法。会返回 Allow: GET, POST, HEAD, OPTIONS 这样的内容。</p></blockquote><h5 id="CONNECT"><a href="#CONNECT" class="headerlink" title="CONNECT"></a>CONNECT</h5><blockquote><p>要求在与代理服务器通信时建立隧道，使用 SSL（Secure Sockets Layer，安全套接层）和 TLS（Transport Layer Security，传输层安全）协议把通信内容加密后经网络隧道传输。</p></blockquote><h4 id="HTTP请求格式"><a href="#HTTP请求格式" class="headerlink" title="HTTP请求格式"></a>HTTP请求格式</h4><p>主要有四部分组成，分别是：请求行、请求头、空行、消息体，每部分内容占一行</p><p><img src="201907200008.png" alt="31314"></p><ol><li>请求行：由三部分组成，GET/POST请求方法、请求资源URL、HTTP版本号</li><li>请求头：和缓存相关的头（Cache-Control，If-Modified-Since），客户端身份信息（User-Agent）等等</li><li>消息体：客户端发给服务端的请求数据，这部分数据并不是每个请求必须的</li></ol><h4 id="HTTP响应格式"><a href="#HTTP响应格式" class="headerlink" title="HTTP响应格式"></a>HTTP响应格式</h4><p>包括：状态行、响应头、空行、消息体。每部分内容占一行</p><p><img src="201907200009.png" alt="431413"></p><ol><li>状态行：HTTP协议版本号，状态码和状态说明三部分构成</li><li>响应头：响应头是服务器传递给客户端用于说明服务器的一些信息（Content-Type，charset等），以及将来继续访问该资源时的策略。</li><li>响应体：返回给客户端的HTML文本内容，或者其他格式的数据，比如：视频流、图片或者音频数据。</li></ol><h4 id="TCP-UDP常用端口"><a href="#TCP-UDP常用端口" class="headerlink" title="TCP\UDP常用端口"></a>TCP\UDP常用端口</h4><p>端口号的范围是从1～65535。其中1～1024是被RFC 3232规定好了的，被称作“众所周知的端口”(Well Known Ports)；从1025～65535的端口被称为动态端口（Dynamic Ports），可用来建立与其它主机的会话，也可由用户自定义用途。</p><p>TCP 21端口：FTP 文件传输服务</p><p>TCP 23端口：TELNET 终端仿真服务，远程登录</p><p>TCP 25端口：SMTP 简单邮件传输服务，发送邮件</p><p>UDP 53端口：DNS 域名解析服务</p><p>TCP 80端口：HTTP 超文本传输服务</p><p>TCP 110端口：POP3 “邮局协议版本3”使用的端口，接收邮件</p><p>TCP 443端口：HTTPS 加密的超文本传输服务</p><h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><p><a href="https://github.com/ZXZxin/ZXBlog" target="_blank" rel="noopener">https://github.com/ZXZxin/ZXBlog</a></p><p><a href="https://www.zhihu.com/question/24853633" target="_blank" rel="noopener">https://www.zhihu.com/question/24853633</a></p><p><a href="https://blog.csdn.net/jankin6/article/details/79192095" target="_blank" rel="noopener">https://blog.csdn.net/jankin6/article/details/79192095</a></p><p><a href="https://www.jianshu.com/p/1183208dd5e3" target="_blank" rel="noopener">https://www.jianshu.com/p/1183208dd5e3</a></p><p><a href="https://www.cnblogs.com/zhangyinhua/p/7611420.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhangyinhua/p/7611420.html</a></p><p><a href="https://baijiahao.baidu.com/s?id=1593714120815701015&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">https://baijiahao.baidu.com/s?id=1593714120815701015&amp;wfr=spider&amp;for=pc</a></p><p><a href="https://coding.imooc.com/lesson/132.html#mid=8907" target="_blank" rel="noopener">https://coding.imooc.com/lesson/132.html#mid=8907</a></p><p><a href="https://blog.csdn.net/wenqian1991/article/details/40110703" target="_blank" rel="noopener">https://blog.csdn.net/wenqian1991/article/details/40110703</a></p><p><a href="https://www.cnblogs.com/huenchao/p/6266352.html" target="_blank" rel="noopener">https://www.cnblogs.com/huenchao/p/6266352.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;计算机网络基础&quot;&gt;&lt;a href=&quot;#计算机网络基础&quot; class=&quot;headerlink&quot; title=&quot;计算机网络基础&quot;&gt;&lt;/a&gt;计算机网络基础&lt;/h3&gt;&lt;h4 id=&quot;OSI七层模型&quot;&gt;&lt;a href=&quot;#OSI七层模型&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="计算机网络" scheme="http://ylovex.cn/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="网络" scheme="http://ylovex.cn/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>nowcoder-数位重排</title>
    <link href="http://ylovex.cn/2019/06/18/nowcoder-%E6%95%B0%E4%BD%8D%E9%87%8D%E6%8E%92/"/>
    <id>http://ylovex.cn/2019/06/18/nowcoder-数位重排/</id>
    <published>2019-06-18T12:32:06.000Z</published>
    <updated>2019-07-10T23:49:12.651Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目来源："><a href="#题目来源：" class="headerlink" title="题目来源："></a>题目来源：</h3><p><a href="https://www.nowcoder.com/practice/f970201e9f7e4040ab25a40918e27d15?tpId=90&amp;tqId=30847&amp;tPage=4&amp;rp=4&amp;ru=/ta/2018test&amp;qru=/ta/2018test/question-ranking" target="_blank" rel="noopener">https://www.nowcoder.com/practice/f970201e9f7e4040ab25a40918e27d15?tpId=90&amp;tqId=30847&amp;tPage=4&amp;rp=4&amp;ru=/ta/2018test&amp;qru=/ta/2018test/question-ranking</a></p><h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p>牛牛有一个正整数x,牛牛需要把数字x中的数位进行重排得到一个新数(不同于x的数),牛牛想知道这个新数是否可能是原x的倍数。请你来帮他解决这个问题。</p><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>题目要求将x中的数位重排得到的新数是否可能是原x的倍数；只需判断x的2到9的倍数中是否存在由x重排后得到的数。</p><h3 id="参考代码："><a href="#参考代码：" class="headerlink" title="参考代码："></a>参考代码：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">public class Now_71&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Scanner sc = new Scanner(System.in);</span><br><span class="line">        int n = sc.nextInt();</span><br><span class="line">        boolean[] booleans = new boolean[n];</span><br><span class="line">        for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">            booleans[i] = isCheck(sc.nextInt());</span><br><span class="line">        &#125;</span><br><span class="line">        for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">            if(booleans[i])&#123;</span><br><span class="line">                System.out.println(&quot;Possible&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                System.out.println(&quot;Impossible&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static boolean isCheck(int num) &#123;</span><br><span class="line">        for(int i=2;i&lt;=9;i++)&#123;</span><br><span class="line">            String s1 = String.valueOf(num*i);</span><br><span class="line">            String s2 = String.valueOf(num);</span><br><span class="line">            char[] c1 = s1.toCharArray();</span><br><span class="line">            char[] c2 = s2.toCharArray();</span><br><span class="line">            if(c1.length != c2.length) continue;</span><br><span class="line">            Arrays.sort(c1);</span><br><span class="line">            Arrays.sort(c2);</span><br><span class="line">            String s3 = String.valueOf(c1);</span><br><span class="line">            String s4 = String.valueOf(c2);</span><br><span class="line">            if(s3.equals(s4))&#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目来源：&quot;&gt;&lt;a href=&quot;#题目来源：&quot; class=&quot;headerlink&quot; title=&quot;题目来源：&quot;&gt;&lt;/a&gt;题目来源：&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/f970201e9f7e404
      
    
    </summary>
    
      <category term="nowcoder" scheme="http://ylovex.cn/categories/nowcoder/"/>
    
    
      <category term="code" scheme="http://ylovex.cn/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>数据库基础</title>
    <link href="http://ylovex.cn/2019/06/15/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/"/>
    <id>http://ylovex.cn/2019/06/15/数据库基础/</id>
    <published>2019-06-15T01:30:43.000Z</published>
    <updated>2019-07-11T00:26:37.630Z</updated>
    
    <content type="html"><![CDATA[<h4 id="数据库类别"><a href="#数据库类别" class="headerlink" title="数据库类别"></a>数据库类别</h4><h5 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h5><p>关系型数据库模型是把复杂的数据结构归结为简单的二元关系（即二维表格形式）。在关系型数据库中，对数据的操作几乎全部建立在一个或多个关系表格上，通过对这些关联的表格分类、合并、连接或选取等运算来实现数据库的管理。<br>包括：Mysql、Oracle、DB2、Sqlserver</p><h5 id="非关系型数据库"><a href="#非关系型数据库" class="headerlink" title="非关系型数据库"></a>非关系型数据库</h5><p>NoSQL是非关系型数据库的广义定义，如下小结：<br>NOSQL不是否定关系数据库，而是作为关系数据库的一个重要补充。<br>NOSQL为了高性能、高并发而生，忽略影响高性能、高并发的功能。<br>NOSQL典型产品memcached（纯内存），redis（持久化缓存），mongodb（面向文档）</p><h6 id="键值存储数据库（key-value）"><a href="#键值存储数据库（key-value）" class="headerlink" title="键值存储数据库（key-value）"></a>键值存储数据库（key-value）</h6><p> 键值数据库就类似传统语言中使用的哈希表。可以通过key来添加、查询或者删除数据库，因为使用key主键访问，所以会获得很高的性能及扩展性。<br>键值数据库主要使用一个哈希表，这个表中有一个特定的键和一个指针指向特定的数据。Key/value模型对于IT系统来说的优势在于简单、易部署、高并发。<br>典型产品：Memcached、Redis、MemcacheDB:</p><h6 id="列存储（Column-oriented）数据库"><a href="#列存储（Column-oriented）数据库" class="headerlink" title="列存储（Column-oriented）数据库:"></a>列存储（Column-oriented）数据库:</h6><p>列存储数据库将数据存储在列族中，一个列族存储经常被一起查询的相关数据，比如人类，我们经常会查询某个人的姓名和年龄，而不是薪资。这种情况下姓名和年龄会被放到一个列族中，薪资会被放到另一个列族中。<br>这种数据库通常用来应对分布式存储海量数据。<br>典型产品：Cassandra、HBase</p><h6 id="面向文档（Document-Oriented）数据库"><a href="#面向文档（Document-Oriented）数据库" class="headerlink" title="面向文档（Document-Oriented）数据库:"></a>面向文档（Document-Oriented）数据库:</h6><p>文档型数据库的灵感是来自于Lotus Notes办公软件，而且它同第一种键值数据库类似。该类型的数据模型是版本化的文档，半结构化的文档以特定的格式存储，比如JSON。文档型数据库可以 看作是键值数据库的升级版，允许之间嵌套键值。而且文档型数据库比键值数据库的查询效率更高。<br>面向文档数据库会将数据以文档形式存储。每个文档都是自包含的数据单元，是一系列数据项的集合。每个数据项都有一个名词与对应值，值既可以是简单的数据类型，如字符串、数字和日期等；也可以是复杂的类型，如有序列表和关联对象。数据存储的最小单位是文档，同一个表中存储的文档属性可以是不同的，数据可以使用XML、JSON或JSONB等多种形式存储。<br>典型产品：MongoDB、CouchDB</p><h6 id="图形数据库"><a href="#图形数据库" class="headerlink" title="图形数据库"></a>图形数据库</h6><p>图形数据库允许我们将数据以图的方式存储。实体会被作为顶点，而实体之间的关系则会被作为边。比如我们有三个实体，Steve Jobs、Apple和Next，则会有两个“Founded by”的边将Apple和Next连接到Steve Jobs。<br>典型产品：Neo4J、InforGrid</p><h4 id="关系型和非关系型数据库区别"><a href="#关系型和非关系型数据库区别" class="headerlink" title="关系型和非关系型数据库区别"></a>关系型和非关系型数据库区别</h4><p>关系型数据库最典型的数据结构是表，由二维表及其之间的联系所组成的一个数据组织。<br>优点：</p><ol><li>易于维护：都是使用表结构，格式一致；</li><li>使用方便：SQL语言通用，可用于复杂查询；</li><li>复杂操作：支持SQL，可用于一个表以及多个表之间非常复杂的查询。</li></ol><p>缺点：</p><ol><li>读写性能比较差，尤其是海量数据的高效率读写；</li><li>固定的表结构，灵活度稍欠；</li><li>不能满足高并发读写需求，传统关系型数据库来说，硬盘I/O是一个很大的瓶颈。</li></ol><p>非关系型数据库严格上不是一种数据库，应该是一种数据结构化存储方式的集合，可以是文档或者键值对等。</p><p>优点：</p><ol><li>格式灵活：存储数据的格式可以是key,value形式、文档形式、图片形式等等，使用灵活，应用场景广泛，而关系型数据库则只支持基础类型。</li><li>速度快：nosql可以使用硬盘或者随机存储器作为载体，而关系型数据库只能使用硬盘；</li><li>高扩展性；</li><li>成本低：nosql数据库部署简单，基本都是开源软件。</li></ol><p>缺点：</p><ol><li>不提供sql支持，学习和使用成本较高；</li><li>无事务处理； </li><li>数据结构相对复杂，复杂查询方面稍欠。</li></ol><h4 id="Innodb和MyIASM："><a href="#Innodb和MyIASM：" class="headerlink" title="Innodb和MyIASM："></a>Innodb和MyIASM：</h4><p>区别：</p><ol><li>MyIASM是非事务安全的，而InnoDB是事务安全的</li><li>MyIASM锁的粒度是表级的，而InnoDB支持行级锁</li><li>MyIASM不支持外键，InnoDB支持外键</li><li>MyIASM支持全文类型（FullText）索引，而InnoDB不支持全文类型索引</li><li>MyIASM保存了表的行数，InnDB没有保存表的行数</li><li>MyIASM相对简单，效率上要优于InnoDB，小型应用可以考虑使用MyIASM</li></ol><p>应用场景：</p><ol><li>InnoDB用于事务处理，具有ACID事务支持等特性，如果在应用中执行大量insert和update操作，应该选择InnoDB</li><li>MyIASM管理非事务表，提供高速存储和检索以及全文搜索能力，如果再应用中执行大量select操作，应该选择MyIASM</li><li>对于一般的Web应用来说，应该选择MyIASM，效率更高，特定场景再用InnoDB</li></ol><h4 id="数据库三大范式："><a href="#数据库三大范式：" class="headerlink" title="数据库三大范式："></a>数据库三大范式：</h4><h6 id="第一范式（1NF）"><a href="#第一范式（1NF）" class="headerlink" title="第一范式（1NF）"></a>第一范式（1NF）</h6><p>即表中的列的具有原子性，不可再分解，即列的信息，不能分解, 只要数据库是关系型数据库(MySQL/oracle/db2 /SQL server)，就自动的满足1NF。数据库表的每一列都是不可分割的原子数据项，而不能是集合，数组，记录等非原子数据项。如果实体中的某个属性有多个值时，必须拆分为不同的属性。通俗理解即一个字段只存储一项信息。</p><h6 id="第二范式（2NF）"><a href="#第二范式（2NF）" class="headerlink" title="第二范式（2NF）"></a>第二范式（2NF）</h6><p>第二范式（2NF）是在第一范式（1NF）的基础上建立起来的，即满足第二范式（2NF）必须先满足第一范式（1NF）。第二范式（2NF）要求数据库表中的每个实例或行必须可以被唯一地区分。为实现区分通常需要我们设计一个主键来实现。</p><h6 id="第三范式（3NF）"><a href="#第三范式（3NF）" class="headerlink" title="第三范式（3NF）"></a>第三范式（3NF）</h6><p>满足第三范式（3NF）必须先满足第二范式（2NF）。简而言之，第三范式（3NF）要求一个数据库表中不包含已在其它表中定义的非主键字段</p><h4 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h4><p>满足ACID条件：原子性、一致性、隔离性、持久性</p><p>原子性：一个事务中的所有操作，要么全部完成，要么全部不完成</p><p>一致性：在事务开始之前和结束后，数据库的完整性没有被破坏</p><p>隔离性：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。</p><p>持久性：事务结束之后，事务的结果是持久性的，即使断电结果也能保存下来</p><p>事务处理主要方法：</p><ol><li>用BEGIN、ROLLBACK、COMMIT实现，BEGIN开始一个事务、ROLLBACK事务回滚、COMMIT事务确认</li><li>直接用SET来改变MySQL的自动提交模式，SET AUTHCOMMIT=0禁止自动提交、SET AUTHCOMMIT=1开启自动提交</li></ol><h4 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h4><h5 id="Read-Uncommitted"><a href="#Read-Uncommitted" class="headerlink" title="Read Uncommitted"></a>Read Uncommitted</h5><p>读未提交就是其他事务做到一半还未提交的数值可以被读出来</p><p>脏读：事务可以读取未提交的数据</p><h5 id="Read-Committed"><a href="#Read-Committed" class="headerlink" title="Read Committed"></a>Read Committed</h5><p>读已提交就是读取其他事务提交后的数值，比如B事务修改了某数据后还没有提交的话，A事务看到的值仍然是修改之前的数值。</p><p>可避免脏读的发生</p><h5 id="Repeatable-Read"><a href="#Repeatable-Read" class="headerlink" title="Repeatable Read"></a>Repeatable Read</h5><p>可重复读就是在开始读取数据（A事务开启）时候，即使其他事务修改了数据，但A事务读到的数据不管读几次都是不变的</p><p>可避免脏读、不可重复读的发生：不可重复读是指在对于数据库中的某个数据，一个事务范围内多次查询却返回了不同的数据值，这是由于在查询间隔，被另一个事务修改并提交了</p><p>幻读：可重复读可能产生幻读，A事务开始准备插入一条记录id=6，B事务同时开始并成功插入一条记录id=6，此时A执行插入id=6操作，结果插入失败，因为id=6记录已经存在，这就是幻读。Innodb通过多版本并发控制(MVCC)解决了幻读问题。</p><h5 id="Serializable"><a href="#Serializable" class="headerlink" title="Serializable"></a>Serializable</h5><p>读加共享锁，写加排他锁</p><p>以上四种隔离级别最高的是Serializable级别，最低的是Read uncommitted级别，当然级别越高，执行效率就越低。像Serializable这样的级别，就是以锁表的方式（类似于Java多线程中的锁）使得其他的线程只能在锁外等待，所以平时选用何种隔离级别应该根据实际情况。在MySQL数据库中默认的隔离级别为Repeatable read（可重复读）。</p><h4 id="事务回滚机制"><a href="#事务回滚机制" class="headerlink" title="事务回滚机制"></a>事务回滚机制</h4><p>事务是用户定义的一个数据库操作序列，这些操作要么全做要么全不做，是一个不可分割的工作单位，事务回滚是指将该事务已经完成的对数据库的更新操作撤销。</p><p>要同时修改数据库中两个不同表时，如果它们不是一个事务的话，当第一个表修改完，可能第二个表修改过程中出现了异常而没能修改，此时就只有第二个表依旧是未修改之前的状态，而第一个表已经被修改完毕。而当你把它们设定为一个事务的时候，当第一个表修改完，第二表修改出现异常而没能修改，第一个表和第二个表都要回到未修改的状态，这就是所谓的事务回滚</p><h4 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h4><p>数据库是一个多用户使用的共享资源。当多个用户并发地存取数据时，在数据库中就会产生多个事务同时存取同一数据的情况。若对并发操作不加控制就可能会读取和存储不正确的数据，破坏数据库的一致性。</p><p>加锁是实现数据库并发控制的一个非常重要的技术。当事务在对某个数据对象进行操作前，先向系统发出请求，对其加锁。加锁后事务就对该数据对象有了一定的控制，在该事务释放锁之前，其他的事务不能对此数据对象进行更新操作。</p><p>锁分类：</p><ol><li>按操作划分：DML锁，DDL锁</li><li>按锁的粒度划分：表级锁、行级锁、页级锁</li><li>按锁级别划分：共享锁、排他锁</li><li>按加锁方式划分：自动锁、显示锁</li><li>按使用方式划分：乐观锁、悲观锁</li></ol><p>悲观锁：顾名思义，就是很悲观，每次去拿（取）数据的时候都认为别人会修改，所以每次在拿（取）数据的时候都会上锁，这样别人想拿这个数据就会block（阻塞）直到它拿到锁。传统的关系型数据库里边就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁。</p><p>悲观锁优缺点：悲观并发控制(悲观锁)采用”先取锁再分”的保守策略，为数据处理提供了安全的保证。但在效率方面，加锁机制会产生额外的开销，增加产生死锁的机会。</p><p>乐观锁：乐观锁的机制就是CAS，版本保护就是CAS中的期望值  CAS顾名思义，就是很乐观，每次去拿（取）数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号等机制。乐观锁适用于多读的应用类型，并发量不是很高的时候可以用，并发量高时，比如抢票，数据就存在Redis这类内存中了，就不存mysql了，mysql太慢了。</p><p>乐观锁优缺点：乐观锁认为事务直接竞争的概率是很小的，在提交的时候才锁定，所以不会产生死锁。但是如果两个事务同时写入数据库的某一行，这时，就会发现乐观锁的弊端。</p><p>行级锁：行级锁分为共享锁和排它锁。行级锁是Mysql中锁定粒度最细的锁。InnoDB引擎支持行级锁和表级锁，只有在通过索引条件检索数据的时候，才使用行级锁，否就使用表级锁。行级锁开销大，加锁慢，锁定粒度最小，发生锁冲突概率最低，并发度最高</p><p>表级锁：表级锁分为表共享锁和表独占锁。表级锁开销小，加锁快，锁定粒度大、发生锁冲突最高，并发度最低</p><p>页级锁：页级锁是MySQL中锁定粒度介于行级锁和表级锁中间的一种锁。表级锁速度快，但冲突多，行级冲突少，但速度慢。所以取了折衷的页级，一次锁定相邻的一组记录。BDB支持页级锁。开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般。</p><p>排它锁(exclusive locck)：排它锁又叫写锁，如果事务T对A加上排它锁，则其它事务都不能对A加任何类型的锁。获准排它锁的事务既能读数据，又能写数据。</p><p>共享锁(share lock)：共享锁又叫读锁，如果事务T对A加上共享锁，则其它事务只能对A再加共享锁，不能加其它锁。获准共享锁的事务只能读数据，不能写数据。</p><p>InnoDB：支持行级锁和表级锁，默认是行级锁</p><p>MyISAM &amp;Memory：这两个存储引擎都是采用表级锁</p><p>锁优化：</p><ol><li>读写分离</li><li>分段加锁</li><li>减少锁持有的时间</li><li>多个线程尽量以相同的顺序去获取资源</li></ol><h4 id="Innodb多版本并发控制（MVCC）"><a href="#Innodb多版本并发控制（MVCC）" class="headerlink" title="Innodb多版本并发控制（MVCC）"></a>Innodb多版本并发控制（MVCC）</h4><p>可以认为MVCC是行级锁的一个变种，但是它在很多情况下避免了加锁操作，因此开销更低。虽然实现机制所有不同，但大都实现了非阻塞的读操作，写操作也只锁定必要的行。</p><p> InnoDB的MVCC，是通过在每行纪录后面保存两个隐藏的列来实现的。这两个列，一个保存了行的创建时间，一个保存了行的过期时间，（存储的并不是实际的时间值，而是系统版本号）。每开始一个新的事务，系统版本号都会自动递增。事务开始时刻的系统版本号会作为事务的版本号，用来和查询到的每行纪录的版本号进行比较。 </p><h4 id="MYSQL索引类型"><a href="#MYSQL索引类型" class="headerlink" title="MYSQL索引类型"></a>MYSQL索引类型</h4><p>MySQL目前主要有以下几种索引类型：普通索引、唯一索引、主键索引、组合索引、全文索引。</p><ol><li>普通索引：仅加速查询</li><li>唯一索引：加速查询 + 列值唯一（可以有null）</li><li>主键索引：加速查询 + 列值唯一（不可以有null）+ 表中只有一个</li><li>组合索引：多列值组成一个索引，专门用于组合搜索，其效率大于索引合并</li><li>全文索引：对文本的内容进行分词，进行搜索</li></ol><p>普通索引-是最基本的索引，它没有任何限制。它有以下几种创建方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">直接创建索引</span><br><span class="line">CREATE INDEX index_name ON table(column(length))</span><br><span class="line">修改表结构的方式添加索引</span><br><span class="line">ALTER TABLE table_name ADD INDEX index_name ON (column(length))</span><br><span class="line">创建表的时候同时创建索引</span><br><span class="line">CREATE TABLE `table` (</span><br><span class="line">    `id` int(11) NOT NULL AUTO_INCREMENT ,</span><br><span class="line">    `title` char(255) CHARACTER NOT NULL ,</span><br><span class="line">    `content` text CHARACTER NULL ,</span><br><span class="line">    `time` int(10) NULL DEFAULT NULL ,</span><br><span class="line">    PRIMARY KEY (`id`),</span><br><span class="line">    INDEX index_name (title(length))</span><br><span class="line">)</span><br><span class="line">删除索引</span><br><span class="line">DROP INDEX index_name ON table</span><br></pre></td></tr></table></figure><p>唯一索引-与前面的普通索引类似，不同的就是：索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一。它有以下几种创建方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">创建唯一索引</span><br><span class="line">CREATE UNIQUE INDEX indexName ON table(column(length))</span><br><span class="line">修改表结构</span><br><span class="line">ALTER TABLE table_name ADD UNIQUE indexName ON (column(length))</span><br><span class="line">创建表的时候直接指定</span><br><span class="line">CREATE TABLE `table` (</span><br><span class="line">    `id` int(11) NOT NULL AUTO_INCREMENT ,</span><br><span class="line">    `title` char(255) CHARACTER NOT NULL ,</span><br><span class="line">    `content` text CHARACTER NULL ,</span><br><span class="line">    `time` int(10) NULL DEFAULT NULL ,</span><br><span class="line">    UNIQUE indexName (title(length))</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>主键索引-是一种特殊的唯一索引，一个表只能有一个主键，不允许有空值。一般是在建表的时候同时创建主键索引：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `table` (</span><br><span class="line">    `id` int(11) NOT NULL AUTO_INCREMENT ,</span><br><span class="line">    `title` char(255) NOT NULL ,</span><br><span class="line">    PRIMARY KEY (`id`)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>组合索引-指多个字段上创建的索引，只有在查询条件中使用了创建索引时的第一个字段，索引才会被使用。使用组合索引时遵循最左前缀集合。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE `table` ADD INDEX name_city_age (name,city,age);</span><br></pre></td></tr></table></figure><p>全文索引-主要用来查找文本中的关键字，而不是直接与索引中的值相比较。fulltext索引跟其它索引大不相同，它更像是一个搜索引擎，而不是简单的where语句的参数匹配。fulltext索引配合match against操作使用，而不是一般的where语句加like。它可以在create table，alter table ，create index使用，不过目前只有char、varchar，text 列上可以创建全文索引。值得一提的是，在数据量较大时候，现将数据放入一个没有全局索引的表中，然后再用CREATE index创建fulltext索引，要比先为一张表建立fulltext然后再将数据写入的速度快很多。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">创建表的适合添加全文索引</span><br><span class="line">CREATE TABLE `table` (</span><br><span class="line">    `id` int(11) NOT NULL AUTO_INCREMENT ,</span><br><span class="line">    `title` char(255) CHARACTER NOT NULL ,</span><br><span class="line">    `content` text CHARACTER NULL ,</span><br><span class="line">    `time` int(10) NULL DEFAULT NULL ,</span><br><span class="line">    PRIMARY KEY (`id`),</span><br><span class="line">    FULLTEXT (content)</span><br><span class="line">);</span><br><span class="line">修改表结构添加全文索引</span><br><span class="line">ALTER TABLE article ADD FULLTEXT index_content(content)</span><br><span class="line">直接创建索引</span><br><span class="line">CREATE FULLTEXT INDEX index_content ON article(content)</span><br></pre></td></tr></table></figure><h4 id="索引的作用和优缺点"><a href="#索引的作用和优缺点" class="headerlink" title="索引的作用和优缺点"></a>索引的作用和优缺点</h4><p>索引就一种特殊的查询表，数据库的搜索引擎可以利用它加速对数据的检索。它很类似与现实生活中书的目录，不需要查询整本书内容就可以找到想要的数据。索引可以是唯一的，创建索引允许指定单个列或者是多个列。缺点是它减慢了数据录入（插入、删除、更新表）的速度，同时也增加了数据库的尺寸大小。</p><p>优点：</p><ol><li>通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性。</li><li>可以大大加快数据的检索速度。</li><li>可以加速表和表之间的连接，特别是在实现数据的参考完整性方面特别有意义。</li><li>在使用分组和排序子句进行数据检索时，同样可以显著减少查询中分组和排序的时间。</li><li>通过使用索引，可以在查询的过程中，使用优化隐藏器，提高系统的性能。</li></ol><p>缺点：</p><ol><li>创建索引和维护索引要耗费时间，这种时间随着数据量的增加而增加。</li><li>索引需要占物理空间，除了数据表占物理空间之外，每一个索引还要占一定的物理空间，如果要建立聚簇索引，那么需要的空间就会更大。</li><li>虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。因为更新表时，MySQL不仅要保存数据，还要保存索引文件。</li><li>如果某个数据列包含许多重复的内容，为它建立索引就没有太大的实际效果。</li></ol><p>不建议使用索引情况：</p><ol><li>数据唯一性差的字段不要使用索引：比如性别，只有两种可能数据。意味着索引的二叉树级别少，多是平级。这样的二叉树查找无异于全表扫描。</li><li>频繁更新的字段不要使用索引：比如logincount登录次数，频繁变化导致索引也频繁变化，增大数据库工作量，降低效率。</li><li>字段不在where语句出现时不要添加索引：只有在where语句出现，mysql才会去使用索引</li><li>数据量少的表不要使用索引：使用了改善也不大</li><li>另外，如果mysql估计使用全表扫描要比使用索引快，则不会使用索引。</li></ol><h4 id="索引、主键索引、唯一索引、组合索引"><a href="#索引、主键索引、唯一索引、组合索引" class="headerlink" title="索引、主键索引、唯一索引、组合索引"></a>索引、主键索引、唯一索引、组合索引</h4><p>索引是一种特殊的文件(InnoDB数据表上的索引是表空间的一个组成部分)，它们包含着对数据表里所有记录的引用指针。</p><p>普通索引(由关键字KEY或INDEX定义的索引)的唯一任务是加快对数据的访问速度。</p><p>普通索引允许被索引的数据列包含重复的值。如果能确定某个数据列将只包含彼此各不相同的值，在为这个数据列创建索引的时候就应该用关键字UNIQUE把它定义为一个唯一索引。也就是说，唯一索引可以保证数据记录的唯一性。</p><p>主键，是一种特殊的唯一索引，在一张表中只能定义一个主键索引，主键用于唯一标识一条记录，不允许有空值，使用关键字 PRIMARY KEY 来创建。</p><p>索引可以覆盖多个数据列，如像INDEX(columnA, columnB)索引，这就是组合索引。</p><p>索引可以极大的提高数据的查询速度，但是会降低插入、删除、更新表的速度，因为在执行这些写操作时，还要操作索引文件。</p><h4 id="主键、外键、唯一索引"><a href="#主键、外键、唯一索引" class="headerlink" title="主键、外键、唯一索引"></a>主键、外键、唯一索引</h4><p>定义：</p><ol><li>主键–唯一标识一条记录，不能有重复的，不允许为空</li><li>外键–表的外键是另一表的主键, 外键可以有重复的, 可以是空值</li><li>唯一索引–该字段没有重复值，但可以有一个空值</li></ol><p>作用：</p><ol><li>主键–用来保证数据完整性</li><li>外键–用来和其他表建立联系用的</li><li>唯一索引–是提高查询排序的速度</li></ol><p>个数：</p><ol><li>主键–主键只能有一个</li><li>外键–一个表可以有多个外键</li><li>唯一索引–一个表可以有多个唯一索引</li></ol><h4 id="MySQL索引原理"><a href="#MySQL索引原理" class="headerlink" title="MySQL索引原理"></a>MySQL索引原理</h4><p>MySQL支持诸多存储引擎，而各种存储引擎对索引的支持也各不相同，因此MySQL数据库支持多种索引类型，如BTree索引，B+Tree索引，哈希索引，全文索引等等</p><h5 id="哈希索引"><a href="#哈希索引" class="headerlink" title="哈希索引"></a>哈希索引</h5><p>只有memory（内存）存储引擎支持哈希索引，哈希索引用索引列的值计算该值的hashCode，然后在hashCode相应的位置存执该值所在行数据的物理位置，因为使用散列算法，因此访问速度非常快，但是一个值只能对应一个hashCode，而且是散列的分布方式，因此哈希索引不支持范围查找和排序的功能。</p><h5 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h5><p>FULLTEXT（全文）索引，仅可用于MyISAM和InnoDB，针对较大的数据，生成全文索引非常的消耗时间和空间。对于文本的大对象，或者较大的CHAR类型的数据，如果使用普通索引，那么匹配文本前几个字符还是可行的，但是想要匹配文本中间的几个单词，那么就要使用LIKE %word%来匹配，这样需要很长的时间来处理，响应时间会大大增加，这种情况，就可使用时FULLTEXT索引了，在生成FULLTEXT索引时，会为文本生成一份单词的清单，在索引时及根据这个单词的清单来索引。FULLTEXT可以在创建表的时候创建，也可以在需要的时候用ALTER或者CREATE INDEX来添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//创建表的时候添加FULLTEXT索引</span><br><span class="line">CTREATE TABLE my_table(</span><br><span class="line">id INT(10) PRIMARY KEY,</span><br><span class="line">name VARCHAR(10) NOT NULL,</span><br><span class="line">my_text text CHARACTER SET utf8 COLLATE utf8_general_ci NULL,</span><br><span class="line">FULLTEXT(my_text));</span><br><span class="line">//创建表以后，在需要的时候添加FULLTEXT索引</span><br><span class="line">ALTER my_table ADD FULLTEXT ft_index(my_text);</span><br><span class="line">CREATE INDEX ft_index ON my_table(my_text);</span><br></pre></td></tr></table></figure><p>对于较大的数据集，把数据添加到一个没有FULLTEXT索引的表，然后添加FULLTEXT索引的速度比把数据添加到一个已经有FULLTEXT索引的表快。</p><p>MySQL自带的全文索引只能用于MyISAM存储引擎，如果是其它数据引擎，那么全文索引不会生效。</p><p>在MySQL中，全文索引支队英文有用，目前对中文还不支持。</p><p>在MySQL中，如果检索的字符串太短则无法检索得到预期的结果，检索的字符串长度至少为4字节，此外，如果检索的字符包括停止词，那么停止词会被忽略。</p><h5 id="BTree索引和B-Tree索引"><a href="#BTree索引和B-Tree索引" class="headerlink" title="BTree索引和B+Tree索引"></a>BTree索引和B+Tree索引</h5><h6 id="BTree索引"><a href="#BTree索引" class="headerlink" title="BTree索引"></a>BTree索引</h6><p>BTree是平衡搜索多叉树，设树的度为d（d&gt;1），高度为h，那么BTree要满足以一下条件：</p><ol><li>每个叶子结点的高度一样，等于h；</li><li>每个非叶子结点由n-1个key和n个指针point组成，其中d&lt;=n&lt;=2d,key和point相互间隔，结点两端一定是key；</li><li>叶子结点指针都为null；</li><li>非叶子结点的key都是[key,data]二元组，其中key表示作为索引的键，data为键值所在行的数据；</li></ol><p><img src="201907070713.png" alt="20070713"></p><p>在BTree的机构下，就可以使用二分查找的查找方式，查找复杂度为h*log(n)，一般来说树的高度是很小的，一般为3左右，因此BTree是一个非常高效的查找结构。</p><h6 id="B-Tree索引"><a href="#B-Tree索引" class="headerlink" title="B+Tree索引"></a>B+Tree索引</h6><p>B+Tree是BTree的一个变种，设d为树的度数，h为树的高度，B+Tree和BTree的不同主要在于：</p><ol><li>B+Tree中的非叶子结点不存储数据，只存储键值；</li><li>B+Tree的叶子结点没有指针，所有键值都会出现在叶子结点上，且key存储的键值对应的数据的物理地址；</li></ol><p><img src="201907070714.png" alt="270714"></p><p>一般来说B+Tree比BTree更适合实现外存的索引结构，因为存储引擎的设计专家巧妙的利用了外存（磁盘）的存储结构，即磁盘的一个扇区是整数倍的page（页），页是存储中的一个单位，通常默认为4K，因此索引结构的节点被设计为一个页的大小，然后利用外存的“预读取”原则，每次读取的时候，把整个节点的数据读取到内存中，然后在内存中查找，已知内存的读取速度是外存读取I/O速度的几百倍，那么提升查找速度的关键就在于尽可能少的磁盘I/O，那么可以知道，每个节点中的key个数越多，那么树的高度越小，需要I/O的次数越少，因此一般来说B+Tree比BTree更快，因为B+Tree的非叶节点中不存储data域，就可以存储更多的key。带顺序索引的B+TREE。很多存储引擎在B+Tree的基础上进行了优化，添加了指向相邻叶节点的指针，形成了带有顺序访问指针的B+Tree，这样做是为了提高区间查找的效率，只要找到第一个值那么就可以顺序的查找后面的值。</p><h4 id="SQL常见语句"><a href="#SQL常见语句" class="headerlink" title="SQL常见语句"></a>SQL常见语句</h4><p>数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 查看所有的数据库</span><br><span class="line">SHOW DATABASES ;</span><br><span class="line"># 创建一个数据库</span><br><span class="line">CREATE DATABASE name;</span><br><span class="line"># 删除一个数据库</span><br><span class="line">DROP DATABASE name;</span><br><span class="line"># 使用这个数据库</span><br><span class="line">USE name;</span><br></pre></td></tr></table></figure><p>表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># 查看所有的表</span><br><span class="line">SHOW TABLES ;</span><br><span class="line"># 创建一个表</span><br><span class="line">CREATE TABLE n(id INT, name VARCHAR(10));</span><br><span class="line">CREATE TABLE m(id INT, name VARCHAR(10), PRIMARY KEY (id), FOREIGN KEY (id) REFERENCES n(id), UNIQUE (name));</span><br><span class="line">CREATE TABLE m(id INT, name VARCHAR(10));</span><br><span class="line"># 直接将查询结果导入或复制到新创建的表</span><br><span class="line">CREATE TABLE n SELECT * FROM m;</span><br><span class="line"># 新创建的表与一个存在的表的数据结构类似</span><br><span class="line">CREATE TABLE m LIKE n;</span><br><span class="line"># 创建一个临时表</span><br><span class="line"># 临时表将在你连接MySQL期间存在。当断开连接时，MySQL将自动删除表并释放所用的空间。也可手动删除。</span><br><span class="line">CREATE TEMPORARY TABLE l(id INT, name VARCHAR(10));</span><br><span class="line"># 直接将查询结果导入或复制到新创建的临时表</span><br><span class="line">CREATE TEMPORARY TABLE tt SELECT * FROM n;</span><br><span class="line"># 删除一个存在表</span><br><span class="line">DROP TABLE IF EXISTS m;</span><br><span class="line"># 更改存在表的名称</span><br><span class="line">ALTER TABLE n RENAME m;</span><br><span class="line">RENAME TABLE n TO m;</span><br><span class="line"># 查看表的结构(以下五条语句效果相同）</span><br><span class="line">DESC n;   # 因为简单，所以建议使用（DESC表示descend降序，ASC表示ascend升序）</span><br><span class="line">DESCRIBE n;       #（discribe）</span><br><span class="line">SHOW COLUMNS IN n;</span><br><span class="line">SHOW COLUMNS FROM n;</span><br><span class="line">EXPLAIN n;</span><br><span class="line"># 查看表的创建语句</span><br><span class="line">SHOW CREATE TABLE n;</span><br></pre></td></tr></table></figure><p>表的结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 添加字段</span><br><span class="line">ALTER TABLE n ADD age VARCHAR(2) ;</span><br><span class="line"># 删除字段</span><br><span class="line">ALTER TABLE n DROP age;</span><br><span class="line"># 更改字段属性和属性</span><br><span class="line">ALTER TABLE n CHANGE age a INT;</span><br><span class="line"># 只更改字段属性</span><br><span class="line">ALTER TABLE n MODIFY age VARCHAR(7) ;</span><br></pre></td></tr></table></figure><p>表的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 增加数据</span><br><span class="line">INSERT INTO n VALUES (1, &apos;tom&apos;, &apos;23&apos;), (2, &apos;john&apos;, &apos;22&apos;);</span><br><span class="line">INSERT INTO n SELECT * FROM n;  # 把数据复制一遍重新插入</span><br><span class="line"># 删除数据</span><br><span class="line">DELETE FROM n WHERE id = 2;</span><br><span class="line"># 更改数据</span><br><span class="line">UPDATE n SET name = &apos;tom&apos; WHERE id = 2;</span><br><span class="line"># 数据查找</span><br><span class="line">SELECT * FROM n WHERE name LIKE &apos;%h%&apos;;</span><br><span class="line"># 数据排序(反序)</span><br><span class="line">SELECT * FROM n ORDER BY name, id DESC ;</span><br></pre></td></tr></table></figure><p>键</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># 添加主键</span><br><span class="line">ALTER TABLE n ADD PRIMARY KEY (id);</span><br><span class="line">ALTER TABLE n ADD CONSTRAINT pk_n PRIMARY KEY (id);   # 主键只有一个，所以定义键名似乎也没有什么用</span><br><span class="line"># 删除主键</span><br><span class="line">ALTER TABLE n DROP PRIMARY KEY ;</span><br><span class="line"># 添加外键</span><br><span class="line">ALTER TABLE m ADD FOREIGN KEY (id) REFERENCES n(id);    # 自动生成键名m_ibfk_1</span><br><span class="line">ALTER TABLE m ADD CONSTRAINT fk_id FOREIGN KEY (id) REFERENCES n(id);   # 使用定义的键名fk_id</span><br><span class="line"># 删除外键</span><br><span class="line">ALTER TABLE m DROP FOREIGN KEY `fk_id`;</span><br><span class="line"># 修改外键</span><br><span class="line">ALTER TABLE m DROP FOREIGN KEY `fk_id`, ADD CONSTRAINT fk_id2 FOREIGN KEY (id) REFERENCES n(id);    # 删除之后从新建</span><br><span class="line"># 添加唯一键</span><br><span class="line">ALTER TABLE n ADD UNIQUE (name);</span><br><span class="line">ALTER TABLE n ADD UNIQUE u_name (name);</span><br><span class="line">ALTER TABLE n ADD UNIQUE INDEX u_name (name);</span><br><span class="line">ALTER TABLE n ADD CONSTRAINT u_name UNIQUE (name);</span><br><span class="line">CREATE UNIQUE INDEX u_name ON n(name);</span><br><span class="line"># 添加索引</span><br><span class="line">ALTER TABLE n ADD INDEX (age);</span><br><span class="line">ALTER TABLE n ADD INDEX i_age (age);</span><br><span class="line">CREATE INDEX i_age ON n(age);</span><br><span class="line"># 删除索引或唯一键</span><br><span class="line">DROP INDEX u_name ON n;</span><br><span class="line">DROP INDEX i_age ON n;</span><br></pre></td></tr></table></figure><p>视图</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 创建视图</span><br><span class="line">CREATE VIEW v AS SELECT id, name FROM n;</span><br><span class="line">CREATE VIEW v(id, name) AS SELECT id, name FROM n;</span><br><span class="line"># 查看视图(与表操作类似)</span><br><span class="line">SELECT * FROM v;</span><br><span class="line">DESC v;</span><br><span class="line"># 查看创建视图语句</span><br><span class="line">SHOW CREATE VIEW v;</span><br><span class="line"># 更改视图</span><br><span class="line">CREATE OR REPLACE VIEW v AS SELECT name, age FROM n;</span><br><span class="line">ALTER VIEW v AS SELECT name FROM n ;</span><br><span class="line"># 删除视图</span><br><span class="line">DROP VIEW IF EXISTS v;</span><br></pre></td></tr></table></figure><p>链接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 内联接</span><br><span class="line">SELECT * FROM m INNER JOIN n ON m.id = n.id;</span><br><span class="line"># 左外联接</span><br><span class="line">SELECT * FROM m LEFT JOIN n ON m.id = n.id;</span><br><span class="line"># 右外联接</span><br><span class="line">SELECT * FROM m RIGHT JOIN n ON m.id = n.id;</span><br><span class="line"># 交叉联接</span><br><span class="line">SELECT * FROM m CROSS JOIN n;   # 标准写法</span><br><span class="line">SELECT * FROM m, n;</span><br><span class="line"># 类似全连接full join的联接用法</span><br><span class="line">SELECT id,name FROM m</span><br><span class="line">UNION</span><br><span class="line">SELECT id,name FROM n;</span><br></pre></td></tr></table></figure><p>函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"># 聚合函数</span><br><span class="line">SELECT count(id) AS total FROM n;   # 总数</span><br><span class="line">SELECT sum(age) AS all_age FROM n;   # 总和</span><br><span class="line">SELECT avg(age) AS all_age FROM n;   # 平均值</span><br><span class="line">SELECT max(age) AS all_age FROM n;   # 最大值</span><br><span class="line">SELECT min(age) AS all_age FROM n;   # 最小值</span><br><span class="line"># 数学函数</span><br><span class="line">SELECT abs(-5);   # 绝对值</span><br><span class="line">SELECT bin(15), oct(15), hex(15);   # 二进制，八进制，十六进制</span><br><span class="line">SELECT pi();   # 圆周率3.141593</span><br><span class="line">SELECT ceil(5.5);   # 大于x的最小整数值6</span><br><span class="line">SELECT floor(5.5);   # 小于x的最大整数值5</span><br><span class="line">SELECT greatest(3,1,4,1,5,9,2,6);   # 返回集合中最大的值9</span><br><span class="line">SELECT least(3,1,4,1,5,9,2,6);    # 返回集合中最小的值1</span><br><span class="line">SELECT mod(5,3);    # 余数2</span><br><span class="line">SELECT rand();    # 返回０到１内的随机值，每次不一样</span><br><span class="line">SELECT rand(5);   # 提供一个参数(种子)使RAND()随机数生成器生成一个指定的值。</span><br><span class="line">SELECT round(1415.1415);   # 四舍五入1415</span><br><span class="line">SELECT round(1415.1415, 3);   # 四舍五入三位数1415.142</span><br><span class="line">SELECT round(1415.1415, -1);    # 四舍五入整数位数1420</span><br><span class="line">SELECT truncate(1415.1415, 3);    # 截短为3位小数1415.141</span><br><span class="line">SELECT truncate(1415.1415, -1);   # 截短为-1位小数1410</span><br><span class="line">SELECT sign(-5);    # 符号的值负数-1</span><br><span class="line">SELECT sign(5);    # 符号的值正数1</span><br><span class="line">SELECT sqrt(9);   # 平方根3</span><br><span class="line">SELECT sqrt(9);   # 平方根3</span><br><span class="line"># 字符串函数</span><br><span class="line">SELECT concat(&apos;a&apos;, &apos;p&apos;, &apos;p&apos;, &apos;le&apos;);   # 连接字符串-apple</span><br><span class="line">SELECT concat_ws(&apos;,&apos;, &apos;a&apos;, &apos;p&apos;, &apos;p&apos;, &apos;le&apos;);   # 连接用&apos;,&apos;分割字符串-a,p,p,le</span><br><span class="line">SELECT insert(&apos;chinese&apos;, 3, 2, &apos;IN&apos;);    # 将字符串&apos;chinese&apos;从3位置开始的2个字符替换为&apos;IN&apos;-chINese</span><br><span class="line">SELECT left(&apos;chinese&apos;, 4);   # 返回字符串&apos;chinese&apos;左边的4个字符-chin</span><br><span class="line">SELECT right(&apos;chinese&apos;, 3);   # 返回字符串&apos;chinese&apos;右边的3个字符-ese</span><br><span class="line">SELECT substring(&apos;chinese&apos;, 3);   # 返回字符串&apos;chinese&apos;第三个字符之后的子字符串-inese</span><br><span class="line">SELECT substring(&apos;chinese&apos;, -3);   # 返回字符串&apos;chinese&apos;倒数第三个字符之后的子字符串-ese</span><br><span class="line">SELECT substring(&apos;chinese&apos;, 3, 2);   # 返回字符串&apos;chinese&apos;第三个字符之后的两个字符-in</span><br><span class="line">SELECT trim(&apos; chinese &apos;);    # 切割字符串&apos; chinese &apos;两边的空字符-&apos;chinese&apos;</span><br><span class="line">SELECT ltrim(&apos; chinese &apos;);    # 切割字符串&apos; chinese &apos;两边的空字符-&apos;chinese &apos;</span><br><span class="line">SELECT rtrim(&apos; chinese &apos;);    # 切割字符串&apos; chinese &apos;两边的空字符-&apos; chinese&apos;</span><br><span class="line">SELECT repeat(&apos;boy&apos;, 3);    # 重复字符&apos;boy&apos;三次-&apos;boyboyboy&apos;</span><br><span class="line">SELECT reverse(&apos;chinese&apos;);    # 反向排序-&apos;esenihc&apos;</span><br><span class="line">SELECT length(&apos;chinese&apos;);   # 返回字符串的长度-7</span><br><span class="line">SELECT upper(&apos;chINese&apos;), lower(&apos;chINese&apos;);    # 大写小写 CHINESE    chinese</span><br><span class="line">SELECT ucase(&apos;chINese&apos;), lcase(&apos;chINese&apos;);    # 大写小写 CHINESE    chinese</span><br><span class="line">SELECT position(&apos;i&apos; IN &apos;chinese&apos;);    # 返回&apos;i&apos;在&apos;chinese&apos;的第一个位置-3</span><br><span class="line">SELECT position(&apos;e&apos; IN &apos;chinese&apos;);    # 返回&apos;i&apos;在&apos;chinese&apos;的第一个位置-5</span><br><span class="line">SELECT strcmp(&apos;abc&apos;, &apos;abd&apos;);    # 比较字符串，第一个参数小于第二个返回负数- -1</span><br><span class="line">SELECT strcmp(&apos;abc&apos;, &apos;abb&apos;);    # 比较字符串，第一个参数大于第二个返回正数- 1</span><br><span class="line"># 时间函数</span><br><span class="line">SELECT current_date, current_time, now();    # 2018-01-13   12:33:43    2018-01-13 12:33:43</span><br><span class="line">SELECT hour(current_time), minute(current_time), second(current_time);    # 12  31   34</span><br><span class="line">SELECT year(current_date), month(current_date), week(current_date);   # 2018    1   1</span><br><span class="line">SELECT quarter(current_date);   # 1</span><br><span class="line">SELECT monthname(current_date), dayname(current_date);   # January  Saturday</span><br><span class="line">SELECT dayofweek(current_date), dayofmonth(current_date), dayofyear(current_date);    # 7   13  13</span><br><span class="line"># 控制流函数</span><br><span class="line">SELECT if(3&gt;2, &apos;t&apos;, &apos;f&apos;), if(3&lt;2, &apos;t&apos;, &apos;f&apos;);    # t f</span><br><span class="line">SELECT ifnull(NULL, &apos;t&apos;), ifnull(2, &apos;t&apos;);    # t 2</span><br><span class="line">SELECT isnull(1), isnull(1/0);    # 0 1 是null返回1，不是null返回0</span><br><span class="line">SELECT nullif(&apos;a&apos;, &apos;a&apos;), nullif(&apos;a&apos;, &apos;b&apos;);    # null a 参数相同或成立返回null，不同或不成立则返回第一个参数</span><br><span class="line">SELECT CASE 2</span><br><span class="line">       WHEN 1 THEN &apos;first&apos;</span><br><span class="line">       WHEN 2 THEN &apos;second&apos;</span><br><span class="line">       WHEN 3 THEN &apos;third&apos;</span><br><span class="line">       ELSE &apos;other&apos;</span><br><span class="line">       END ;     # second</span><br><span class="line"># 系统信息函数</span><br><span class="line">SELECT database();    # 当前数据库名-test</span><br><span class="line">SELECT connection_id();   # 当前用户id-306</span><br><span class="line">SELECT user();    # 当前用户-root@localhost</span><br><span class="line">SELECT version();   # 当前mysql版本</span><br><span class="line">SELECT found_rows();    # 返回上次查询的检索行数</span><br></pre></td></tr></table></figure><p>用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 增加用户</span><br><span class="line">CREATE USER &apos;test&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;test&apos;;</span><br><span class="line">INSERT INTO mysql.user(Host, User, Password) VALUES (&apos;localhost&apos;, &apos;test&apos;, Password(&apos;test&apos;));    # 在用户表中插入用户信息，直接操作User表不推荐</span><br><span class="line"># 删除用户</span><br><span class="line">DROP USER &apos;test&apos;@&apos;localhost&apos;;</span><br><span class="line">DELETE FROM mysql.user WHERE User=&apos;test&apos; AND Host=&apos;localhost&apos;;</span><br><span class="line">FLUSH PRIVILEGES ;</span><br><span class="line"># 更改用户密码</span><br><span class="line">SET PASSWORD FOR &apos;test&apos;@&apos;localhost&apos; = PASSWORD(&apos;test&apos;);</span><br><span class="line">UPDATE mysql.user SET Password=Password(&apos;t&apos;) WHERE User=&apos;test&apos; AND Host=&apos;localhost&apos;;</span><br><span class="line">FLUSH PRIVILEGES ;</span><br><span class="line"># 用户授权</span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO test@localhost IDENTIFIED BY &apos;test&apos;;</span><br><span class="line"># 授予用&apos;test&apos;密码登陆成功的test@localhost用户操作所有数据库的所有表的所有的权限</span><br><span class="line">FLUSH PRIVILEGES ;   # 刷新系统权限表,使授予权限生效</span><br><span class="line"># 撤销用户授权</span><br><span class="line">REVOKE DELETE ON *.* FROM &apos;test&apos;@&apos;localhost&apos;;   # 取消该用户的删除权限</span><br></pre></td></tr></table></figure><p>存储过程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"># 创建存储过程</span><br><span class="line">DELIMITER //    # 无参数</span><br><span class="line">CREATE PROCEDURE getDates()</span><br><span class="line">  BEGIN</span><br><span class="line">    SELECT * FROM test ;</span><br><span class="line">  END //</span><br><span class="line">CREATE PROCEDURE getDates_2(IN id INT)    # in参数</span><br><span class="line">  BEGIN</span><br><span class="line">    SELECT * FROM test WHERE a = id;</span><br><span class="line">  END //</span><br><span class="line">CREATE PROCEDURE getDates_3(OUT sum INT)    # out参数</span><br><span class="line">  BEGIN</span><br><span class="line">    SET sum = (SELECT count(*) FROM test);</span><br><span class="line">  END //</span><br><span class="line">CREATE PROCEDURE getDates_4(INOUT i INT)    # inout参数</span><br><span class="line">  BEGIN</span><br><span class="line">    SET i = i + 1;</span><br><span class="line">  END //</span><br><span class="line">DELIMITER ;</span><br><span class="line"># 删除存储过程</span><br><span class="line">DROP PROCEDURE IF EXISTS getDates;</span><br><span class="line"># 修改存储过程的特性</span><br><span class="line">ALTER PROCEDURE getDates MODIFIES SQL DATA ;</span><br><span class="line"># 修改存储过程语句（删除再重建）略</span><br><span class="line"># 查看存储过程</span><br><span class="line">SHOW PROCEDURE STATUS LIKE &apos;getDates&apos;;    # 状态</span><br><span class="line">SHOW CREATE PROCEDURE getDates_3;   # 语句</span><br><span class="line"># 调用存储过程</span><br><span class="line">CALL getDates();</span><br><span class="line">CALL getDates_2(1);</span><br><span class="line">CALL getDates_3(@s);</span><br><span class="line">SELECT @s;</span><br><span class="line">SET @i = 1;</span><br><span class="line">CALL getDates_4(@i);</span><br><span class="line">SELECT @i;    # @i = 2</span><br></pre></td></tr></table></figure><h5 id="SQL语句关键字"><a href="#SQL语句关键字" class="headerlink" title="SQL语句关键字"></a>SQL语句关键字</h5><p>SQL语言包括数据定义(DDL)、数据操纵(DML),数据控制(DCL)和数据查询（DQL）四个部分。</p><ol><li>数据定义：Create Table,Alter Table,Drop Table, Craete/Drop Index</li><li>数据操纵：select ,insert,update,delete</li><li>数据控制：revoke</li><li>数据查询：select</li></ol><h5 id="DROP、TRUNCATE、DELETE"><a href="#DROP、TRUNCATE、DELETE" class="headerlink" title="DROP、TRUNCATE、DELETE"></a>DROP、TRUNCATE、DELETE</h5><ol><li>DELETE语句执行删除的过程是每次从表中删除一行，并且同时将该行的删除操作作为事务记录在日志中保存以便进行回滚操作。</li><li>TRUNCATE TABLE一次性地从表中删除所有的数据，不能通过ROLLBACK回滚。并且在删除的过程中不会激活与表有关的删除触发器。执行速度快。</li><li>DROP是DDL，会隐式提交，所以不能回滚，不会触发触发器。</li><li>表和索引所占空间。当表被TRUNCATE 后，这个表和索引所占用的空间会恢复到初始大小，DELETE操作不会减少表或索引所占用的空间。DROP语句将表所占用的空间全释放掉。</li><li>应用范围：TRUNCATE只能对TABLE使用；DELETE可以是TABLE和VIEW；DROP可以删除表和数据库。</li><li>TRUNCATE和DELETE只删除数据，DROP则删除整个表（结构和数据）。TRUNCATE与不带WHERE的DELETE：只删除数据，而不删除表的结构（定义）；DROP语句将删除表的结构，被依赖的约束（constrain)，触发器（trigger)，索引（index）也会被删除；而依赖于该表的存储过程/函数将被保留，但其状态会变为：invalid。</li><li>对于外键（FOREIGN KEY）约束引用的表，不能使用 TRUNCATE TABLE，而应使用不带where 子句的 DELETE 语句。TRUNCATE TABLE不能用于参与了索引视图的表。</li></ol><h5 id="MySQL连接方式"><a href="#MySQL连接方式" class="headerlink" title="MySQL连接方式"></a>MySQL连接方式</h5><h6 id="内链接：（相交部分"><a href="#内链接：（相交部分" class="headerlink" title="内链接：（相交部分)"></a>内链接：（相交部分)</h6><p>关键字：inner join on</p><p>语句：select * from a_table a inner join b_table b on a.a_id = b.b_id;</p><p><img src="201907070720.png" alt="270720"></p><h6 id="左链接：（左边部分）"><a href="#左链接：（左边部分）" class="headerlink" title="左链接：（左边部分）"></a>左链接：（左边部分）</h6><p>关键字：left join on / left outer join on</p><p>语句：select * from a_table a left join b_table b on a.a_id = b.b_id;</p><p><img src="201907070721.png" alt="270721"></p><h6 id="右链接：（右边部分）"><a href="#右链接：（右边部分）" class="headerlink" title="右链接：（右边部分）"></a>右链接：（右边部分）</h6><p>关键字：right join on/right outer join on</p><p>语句：select * from a_table a right outer join b_table b on a.a_id = b.b_id;</p><p><img src="201907070722.png" alt="20070722"></p><h6 id="全链接：目前MySQL不支持"><a href="#全链接：目前MySQL不支持" class="headerlink" title="全链接：目前MySQL不支持"></a>全链接：目前MySQL不支持</h6><h4 id="MySQL查询过程"><a href="#MySQL查询过程" class="headerlink" title="MySQL查询过程"></a>MySQL查询过程</h4><ol><li>客户端先发送一条查询给服务器；</li><li>服务器先检查查询缓存，如果命中了缓存，则立刻返回给存储在缓存中的结果，否则进入下一个阶段；</li><li>服务器端进行SQL解析、预处理，再由优化器生成对应的执行计划；</li><li>MySQL根据优化器生成的执行计划，调用存储引擎的API来执行查询；</li><li>将结果返回客户端。</li></ol><h4 id="数据库高并发解决方法总结"><a href="#数据库高并发解决方法总结" class="headerlink" title="数据库高并发解决方法总结"></a>数据库高并发解决方法总结</h4><p>一个项目刚开始的时候是为了实现基本功能，随着版本和功能的迭代，大数据和高并发成了软件设计必须考虑的问题！本质很简单，一个是慢，一个是等。两者是相互关联的，因为慢，所以要等，因为等，所以慢，解决了慢，也就解决了等，解决了等，也就解决了慢。<br>关键是如何解决慢和等，核心一个是短，一个是少，一个是分流，最后一种是集群/横向扩张/读写分离/建立主从。</p><p>短是指路径要短：<br>典型的mvc结构是请求-&gt;controller-&gt;model-&gt;dao-&gt;view，然后把页面返回给用户。要想短的话，</p><ol><li>页面静态化-用户可以直接获取页面，不用走那么多流程，比较适用于页面不频繁更新。</li><li>使用缓存-第一次获取数据从数据库准提取，然后保存在缓存中，以后就可以直接从缓存提取数据。不过需要有机制维持缓存和数据库的一致性。</li><li>使用储存过程-那些处理一次请求需要多次访问数据库的操作，可以把操作整合到储存过程，这样只要一次数据库访问就可以了。</li><li>批量读取-高并发情况下，可以把多个请求的查询合并到一次进行，以减少数据库的访问次数</li><li>延迟修改-高并发情况下，可以把多次修改请求，先保存在缓存中，然后定时将缓存中的数据保存到数据库中，风险是可能会断电丢失缓存中的数据，</li><li>使用索引-索引可以看作是特殊的缓存，尽量使用索引就要求where字句中精确的给出索引列的值。</li></ol><p>少是指查询的数据要少</p><ol><li>分表-把本来同一张表的内容，可以按照地区，类别等分成多张表，很简单的一个思路，但是要尽量避免分出来的多表关联查询。</li><li>分离活跃数据-例如登录用户业务，注册用户很多，但是活跃的登录用户很少，可以把活跃用户专门保存一张表，查询是先查询活跃表，没有的话再查总表，这也类似与缓存啦。</li><li>分块-数据库层面的优化，对程序是透明的，查询大数据只用找到相应块就行。</li></ol><p>分流三种:</p><ol><li>集群-将并发请求分配到不同的服务器上，可以是业务服务器，也可以是数据库服务器。</li><li>分布式-分布式是把单次请求的多项业务逻辑分配到多个服务器上，这样可以同步处理很多逻辑，一般使用与特别复杂的业务请求。</li><li>CDN -在域名解析层面的分流，例如将华南地区的用户请求分配到华南的服务器，华中地区的用户请求分配到华中的服务器。</li></ol><h4 id="高并发数据库系统"><a href="#高并发数据库系统" class="headerlink" title="高并发数据库系统"></a>高并发数据库系统</h4><ol><li>数据库的优化，包括合理的事务隔离级别、SQL语句优化、索引的优化</li><li>使用缓存，尽量减少据库 IO</li><li>分布式数据库、分布式缓存</li><li>服务器的负载均衡</li></ol><h4 id="SQL优化"><a href="#SQL优化" class="headerlink" title="SQL优化"></a>SQL优化</h4><h6 id="选择正确的存储引擎"><a href="#选择正确的存储引擎" class="headerlink" title="选择正确的存储引擎"></a>选择正确的存储引擎</h6><p>以 MySQL为例，包括有两个存储引擎 MyISAM 和 InnoDB，每个引擎都有利有弊。</p><p>MyISAM 适合于一些需要大量查询的应用，但其对于有大量写操作并不是很好。甚至你只是需要update一个字段，整个表都会被锁起来，而别的进程，就算是读进程都无法操作直到读操作完成。另外，MyISAM 对于 SELECT COUNT(*) 这类的计算是超快无比的。</p><p>InnoDB 的趋势会是一个非常复杂的存储引擎，对于一些小的应用，它会比 MyISAM 还慢。但是它支持“行锁” ，于是在写操作比较多的时候，会更优秀。并且，他还支持更多的高级应用，比如：事务。</p><h6 id="优化字段的数据类型"><a href="#优化字段的数据类型" class="headerlink" title="优化字段的数据类型"></a>优化字段的数据类型</h6><p>记住一个原则，越小的列会越快。如果一个表只会有几列罢了（比如说字典表，配置表），那么，我们就没有理由使用 INT 来做主键，使用 MEDIUMINT, SMALLINT 或是更小的 TINYINT 会更经济一些。如果你不需要记录时间，使用 DATE 要比 DATETIME 好得多。当然，你也需要留够足够的扩展空间。</p><h6 id="为常用的搜索字段添加索引"><a href="#为常用的搜索字段添加索引" class="headerlink" title="为常用的搜索字段添加索引"></a>为常用的搜索字段添加索引</h6><p>索引并不一定就是给主键或是唯一的字段。如果在你的表中，有某个字段你总要会经常用来做搜索，那么最好是为其建立索引，除非你要搜索的字段是大的文本字段，那应该建立全文索引。</p><h6 id="避免使用Select"><a href="#避免使用Select" class="headerlink" title="避免使用Select *"></a>避免使用Select *</h6><p>从数据库里读出越多的数据，那么查询就会变得越慢。并且，如果你的数据库服务器和WEB服务器是两台独立的服务器的话，这还会增加网络传输的负载。即使你要查询数据表的所有字段，也尽量不要用*通配符，善用内置提供的字段排除定义也许能给带来更多的便利。</p><h6 id="使用-ENUM-而不是-VARCHAR"><a href="#使用-ENUM-而不是-VARCHAR" class="headerlink" title="使用 ENUM 而不是 VARCHAR"></a>使用 ENUM 而不是 VARCHAR</h6><p>ENUM 类型是非常快和紧凑的。在实际上，其保存的是 TINYINT，但其外表上显示为字符串。这样一来，用这个字段来做一些选项列表变得相当的完美。例如，性别、民族、部门和状态之类的这些字段的取值是有限而且固定的，那么，你应该使用 ENUM 而不是 VARCHAR。</p><h6 id="尽可能的使用-NOT-NULL"><a href="#尽可能的使用-NOT-NULL" class="headerlink" title="尽可能的使用 NOT NULL"></a>尽可能的使用 NOT NULL</h6><p>除非你有一个很特别的原因去使用 NULL 值，你应该总是让你的字段保持 NOT NULL。 NULL其实需要额外的空间，并且，在你进行比较的时候，你的程序会更复杂。 当然，这里并不是说你就不能使用NULL了，现实情况是很复杂的，依然会有些情况下，你需要使用NULL值。+</p><h6 id="固定长度的表会更快"><a href="#固定长度的表会更快" class="headerlink" title="固定长度的表会更快"></a>固定长度的表会更快</h6><p>如果表中的所有字段都是“固定长度”的，整个表会被认为是 “static” 或 “fixed-length”。 例如，表中没有如下类型的字段： VARCHAR，TEXT，BLOB。只要你包括了其中一个这些字段，那么这个表就不是“固定长度静态表”了，这样，MySQL 引擎会用另一种方法来处理。</p><p>固定长度的表会提高性能，因为MySQL搜寻得会更快一些，因为这些固定的长度是很容易计算下一个数据的偏移量的，所以读取的自然也会很快。而如果字段不是定长的，那么，每一次要找下一条的话，需要程序找到主键。</p><p>并且，固定长度的表也更容易被缓存和重建。不过，唯一的副作用是，固定长度的字段会浪费一些空间，因为定长的字段无论你用不用，他都是要分配那么多的空间。</p><h4 id="SQL语句优化方法"><a href="#SQL语句优化方法" class="headerlink" title="SQL语句优化方法"></a>SQL语句优化方法</h4><ol><li>where子句中：where表之间的连接必须写在其他Where条件之前，那些可以过滤掉最大数量记录的条件必须写在where子句的末尾.HAVING最后。</li><li>用EXISTS替代IN、用NOT EXISTS替代NOT IN。</li><li>避免在索引列上使用计算</li><li>避免在索引列上使用IS NULL和IS NOT NULL</li><li>对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。</li><li>应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描</li><li>应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描</li></ol><h4 id="实践中优化MySQL"><a href="#实践中优化MySQL" class="headerlink" title="实践中优化MySQL"></a>实践中优化MySQL</h4><p>从效果上第一条影响最大，后面越来越小。</p><ol><li>SQL语句及索引的优化</li><li>数据库表结构的优化</li><li>系统配置的优化</li><li>硬件的优化</li></ol><h4 id="优化数据库方法"><a href="#优化数据库方法" class="headerlink" title="优化数据库方法"></a>优化数据库方法</h4><ol><li>选取最适用的字段属性，尽可能减少定义字段宽度，尽量把字段设置NOTNULL，例如’省份’、’性别’最好适用ENUM</li><li>使用连接(JOIN)来代替子查询</li><li>适用联合(UNION)来代替手动创建的临时表</li><li>事务处理</li><li>锁定表、优化事务处理</li><li>适用外键，优化锁定表</li><li>建立索引</li><li>优化查询语句</li></ol><h4 id="NULL含义"><a href="#NULL含义" class="headerlink" title="NULL含义"></a>NULL含义</h4><p>NULL这个值表示UNKNOWN(未知)，它不表示“”(空字符串)。对NULL这个值的任何比较都会生产一个NULL值。您不能把任何值与一个 NULL值进行比较，并在逻辑上希望获得一个答案。</p><p>使用IS  NULL来进行NULL判断</p><h4 id="char和varchar"><a href="#char和varchar" class="headerlink" title="char和varchar"></a>char和varchar</h4><p>char是一种固定长度的类型，varchar则是一种可变长度的类型，它们的区别是：  </p><p>char(M)类型的数据列里，每个值都占用M个字节，如果某个长度小于M，MySQL就会在它的右边用空格字符补足。（在检索操作中那些填补出来的空格字符将被去掉）在varchar(M)类型的数据列里，每个值只占用刚好够用的字节再加上一个用来记录其长度的字节（即总长度为L+1字节）．  </p><p>varchar的适用场景:</p><ol><li>字符串列得最大长度比平均长度大很多。</li><li>字符串很少被更新，容易产生存储碎片 </li><li>使用多字节字符集存储字符串</li></ol><p>char的适用场景:</p><ol><li>存储具有近似得长度（md5值,身份证，手机号）,长度比较短小得字符串（因为varchar需要额外空间记录字符串长度），更适合经常更新得字符串，更新时不会出现页分裂得情况，避免出现存储碎片，获得更好的io性能。</li></ol><h4 id="SQL约束"><a href="#SQL约束" class="headerlink" title="SQL约束"></a>SQL约束</h4><h6 id="not-null：非空约束，强制列不接受空值。"><a href="#not-null：非空约束，强制列不接受空值。" class="headerlink" title="not null：非空约束，强制列不接受空值。"></a>not null：非空约束，强制列不接受空值。</h6><p>例：创建表时，name varchar(6) not null</p><h6 id="unique：唯一性约束"><a href="#unique：唯一性约束" class="headerlink" title="unique：唯一性约束"></a>unique：唯一性约束</h6><p>约束唯一标识数据库表中的每条记录 </p><p>unique和primary key都为数据提供了唯一性约束</p><p>primary key 拥有自动定义的unique约束</p><p>注意：每个表中只能有一个primary key约束，但是可以有多个Unique约束  </p><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.name int unique</span><br><span class="line">2.unique(column_name)</span><br><span class="line">3.CONSTRAINT uc_PersonID UNIQUE (Id_P, LastName)：添加多个约束  </span><br><span class="line">4.alter table table_name add unique(column_name)：增加表中的约束  </span><br><span class="line">5.ALTER TABLE table_name DROP CONSTRAINT 主键名：删除约束</span><br></pre></td></tr></table></figure><h6 id="Primary-Key约束"><a href="#Primary-Key约束" class="headerlink" title="Primary Key约束"></a>Primary Key约束</h6><p>约束唯一标识数据库表中的每条记录</p><p>主键必须包含唯一的值，主键列不能为空</p><p>每个表都应该有个主键，但只能有一个主键  </p><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">① StudentID int not null primary key   创建学生编号为主键</span><br><span class="line">② primary key(StudentID)            创建学生编号为主键</span><br><span class="line">③ primary key(StudentID, Email)      创建学生ID和Email为联合主键</span><br><span class="line">④ alter table table_name add primary key(column_name) 为已存在的列创建主键</span><br><span class="line">⑤ alter table table_name drop primary key  删除主键约束</span><br><span class="line">⑥ alter table table_name drop constraint 主键约束名  删除主键约束</span><br></pre></td></tr></table></figure><h6 id="foreign-key约束"><a href="#foreign-key约束" class="headerlink" title="foreign key约束"></a>foreign key约束</h6><p>一个表中的foreign key指向另一个表的primary key </p><p>foreign key约束用于预防破坏表之间连接的动作</p><p>foreign key约束也能防止非法数据插入外键列，因为它必须是指向的表中的主键值</p><p> 语法：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">foreign key (column_name) references 主表名（主键列名）创建column_name为主表名的外键  </span><br><span class="line">column_name int foreign key references 主表名（主键列名）创建column_name为主表名的外键  </span><br><span class="line">alter table table_name add foreign key (列名) references 主表名（主键列名）为已存在的列创建外键  </span><br><span class="line">alter table table_name drop foreign key 外键约束名 删除外键约束</span><br></pre></td></tr></table></figure><h6 id="check-约束"><a href="#check-约束" class="headerlink" title="check 约束"></a>check 约束</h6><p>check约束用于限制列中的值的范围</p><p>如果对个单个列做check约束，那么该列只可以输入特定数值</p><p>如果一个表定义check约束，那么此约束会在特定的列对值进行限制  </p><p>语法：    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">StudentID int not null check (StudentID&gt;0) 限制StudentID输入的值要大于0</span><br><span class="line">sex varchar(2) not null check(sex=&apos;男&apos; or sex=&apos;女&apos;) 限制sex的性别只能是男或者女  </span><br><span class="line">alter table table_name add check(列名&gt;0)   向已有的列加入check约束</span><br></pre></td></tr></table></figure><h6 id="default约束："><a href="#default约束：" class="headerlink" title="default约束："></a>default约束：</h6><p>用于向列中插入默认值，若没有规定其他值，那么会将默认值添加到所有的新记录中  </p><p>语法：name varchar(10) default ‘张三’  name默认插入张三的名字</p><h4 id="完整性约束"><a href="#完整性约束" class="headerlink" title="完整性约束"></a>完整性约束</h4><p>数据完整性(Data Integrity)是指数据的精确(Accuracy)和可靠性(Reliability)。</p><p>分为以下四类：</p><ol><li>实体完整性：规定表的每一行在表中是惟一的实体。</li><li>域完整性：是指表中的列必须满足某种特定的数据类型约束，其中约束又包括取值范围、精度等规定。</li><li>参照完整性：是指两个表的主关键字和外关键字的数据应一致，保证了表之间的数据的一致性，防止了数据丢失或无意义的数据在数据库中扩散。</li><li>用户定义的完整性：不同的关系数据库系统根据其应用环境的不同，往往还需要一些特殊的约束条件。用户定义的完整性即是针对某个特定关系数据库的约束条件，它反映某一具体应用必须满足的语义要求。</li></ol><p>与表有关的约束：包括列约束(NOT NULL（非空约束）)和表约束(PRIMARY KEY、foreign key、check、UNIQUE) 。</p><h4 id="基本表和视图"><a href="#基本表和视图" class="headerlink" title="基本表和视图"></a>基本表和视图</h4><p>基本表是本身独立存在的表，在 SQL 中一个关系就对应一个表。</p><p>视图是从一个或几个基本表导出的表。视图本身不独立存储在数据库中，是一个虚表。</p><h4 id="视图的优点"><a href="#视图的优点" class="headerlink" title="视图的优点"></a>视图的优点</h4><ol><li>视图能够简化用户的操作 </li><li>视图使用户能以多种角度看待同一数据；</li><li>视图为数据库提供了一定程度的逻辑独立性；</li><li>视图能够对机密数据提供安全保护。</li></ol><h4 id="MySQL运维优化"><a href="#MySQL运维优化" class="headerlink" title="MySQL运维优化"></a>MySQL运维优化</h4><ol><li>设计良好的数据库结构，允许部分数据冗余，尽量避免join查询，提高效率。</li><li>选择合适的表字段数据类型和存储引擎，适当的添加索引。</li><li>mysql库主从读写分离。</li><li>找规律分表，减少单表中的数据量提高查询速度。</li><li>添加缓存机制，比如memcached，apc等。</li><li>不经常改动的页面，生成静态页面。</li><li>书写高效率的SQL。比如 SELECT * FROM TABEL 改为 SELECT field_1, field_2, field_3 FROM TABLE.</li></ol><h4 id="大流量网站，解决各页面访问量统计问题"><a href="#大流量网站，解决各页面访问量统计问题" class="headerlink" title="大流量网站，解决各页面访问量统计问题"></a>大流量网站，解决各页面访问量统计问题</h4><ol><li>确认服务器是否能支撑当前访问量。</li><li>优化数据库访问。</li><li>禁止外部访问链接（盗链）, 比如图片盗链。</li><li>控制文件下载。</li><li>使用不同主机分流。</li><li>使用浏览统计软件，了解访问量，有针对性的进行优化</li></ol><h4 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h4><p>不用连接池的话，就要根据每个请求或者每个用户来建立连接。这样的缺点是显而易见的。</p><ol><li>这样需要建立很多连接，建立连接是要花很多时间的。</li><li>有的用户建立了连接，却没有使用，造成了资源浪费。</li></ol><p>因此需要用连接池，如下先建好5个连接（Tomcat默认的连接是10到100个，可修改），每次请求来了直接用，用完了还回去，如果请求太多，来不及处理，超时会报错（线程池请求太多会排队，不会超时报错）</p><p><img src="201907070814.png" alt="2010814"></p><h4 id="JDBC和ODBC"><a href="#JDBC和ODBC" class="headerlink" title="JDBC和ODBC"></a>JDBC和ODBC</h4><p>JDBC使用起来更方便，ODBC因为是C编写，性能更快一些。</p><p>JDBC：（Java Data Base Connectivity,java数据库连接）是一种用于执行SQL语句的Java API，它是Java十三个规范之一。可以为多种关系数据库提供统一访问，它由一组用Java语言编写的类和接口组成。 JDBC的最大特点是它独立于详细的关系数据库。</p><p>ODBC：是微软公司开放服务结构(WOSA，Windows Open Services Architecture)中有关数据库的一个组成部分。一个基于ODBC的应用程序对数据库的操作不依赖数据库类型，能以统一的方式处理全部的数据库。</p><h4 id="MySQL主从同步原理"><a href="#MySQL主从同步原理" class="headerlink" title="MySQL主从同步原理"></a>MySQL主从同步原理</h4><p><img src="201907070815.png" alt="2070815"></p><p>一句话解释：Slaver读取Master的binlog并顺序执行</p><p>概述：</p><ol><li>MySQL的主从复制是一个异步的复制过程（虽然一般情况下感觉是实时的），在Master与Slave之间实现整个主从复制的过程是由三个线程参与完成的。其中有两个线程（SQL线程和IO线程）在Slave端，另一个线程（I/O线程）在Master端。</li><li>要实现MySQL的主从复制，首先必须打开Master端的binlog记录功能，否则就无法实现。因为整个复制过程实际上就是Slave从Master端获取binlog日志，然后再在Slave上以相同顺序执行获取的binlog日志中的记录的各种SQL操作</li></ol><p>详细过程</p><ol><li>在Slave 服务器上执行sart slave命令开启主从复制开关，开始进行主从复制。</li><li>此时，Slave服务器的IO线程会通过在master上已经授权的复制用户权限请求连接master服务器，并请求从执行binlog日志文件的指定位置（日志文件名和位置就是在配置主从复制服务时执行change master命令指定的）之后开始发送binlog日志内容</li><li>Master服务器接收到来自Slave服务器的IO线程的请求后，其上负责复制的IO线程会根据Slave服务器的IO线程请求的信息分批读取指定binlog日志文件指定位置之后的binlog日志信息，然后返回给Slave端的IO线程。返回的信息中除了binlog日志内容外，还有在Master服务器端记录的IO线程。返回的信息中除了binlog中的下一个指定更新位置。</li><li>当Slave服务器的IO线程获取到Master服务器上IO线程发送的日志内容、日志文件及位置点后，会将binlog日志内容依次写到Slave端自身的Relay Log（即中继日志）文件（Mysql-relay-bin.xxx）的最末端，并将新的binlog文件名和位置记录到master-info文件中，以便下一次读取master端新binlog日志时能告诉Master服务器从新binlog日志的指定文件及位置开始读取新的binlog日志内容</li><li>Slave服务器端的SQL线程会实时检测本地Relay Log 中新增的日志内容，然后及时把Relay LOG 文件中的内容解析成sql语句，并在自身Slave服务器上按解析SQL语句的位置顺序执行应用这样sql语句，并在relay-log.info中记录当前应用中继日志的文件名和位置点</li></ol><p>知识点</p><ol><li>3个线程，主库IO，从库IO和SQL及作用</li><li>master.info（从库）作用</li><li>relay-log 作用</li><li>异步复制</li><li>binlog作用（如果需要级联需要开启Binlog）</li></ol><p>小结</p><ol><li>主从复制是异步的逻辑的SQL语句级的复制</li><li>复制时，主库有一个I/O线程，从库有两个线程，I/O和SQL线程</li><li>实现主从复制的必要条件是主库要开启记录binlog功能</li><li>作为复制的所有Mysql节点的server-id都不能相同</li><li>binlog文件只记录对数据库有更改的SQL语句（来自主库内容的变更），不记录任何查询（select，show）语句</li></ol><p>工作中常用主从模式</p><p><img src="201907070816.png" alt="20070816"></p><h4 id="数据库事务断电"><a href="#数据库事务断电" class="headerlink" title="数据库事务断电"></a>数据库事务断电</h4><p>本地事务数据库断电的这种情况，它是怎么保证数据一致性的呢？</p><p>我们使用SQL Server来举例，我们知道我们在使用 SQL Server 数据库是由两个文件组成的，一个数据库文件和一个日志文件，通常情况下，日志文件都要比数据库文件大很多。数据库进行任何写入操作的时候都是要先写日志的，同样的道理，我们在执行事务的时候数据库首先会记录下这个事务的redo操作日志，然后才开始真正操作数据库，在操作之前首先会把日志文件写入磁盘，那么当突然断电的时候，即使操作没有完成，在重新启动数据库时候，数据库会根据当前数据的情况进行undo回滚或者是redo前滚，这样就保证了数据的强一致性。</p><h4 id="两段锁协议"><a href="#两段锁协议" class="headerlink" title="两段锁协议"></a>两段锁协议</h4><p>数据库的两段锁协议是指所有事务必须分两个阶段对数据项进行加锁和解锁<br>1.扩展阶段<br>在对任何数据项的读、写之前，要申请并获得该数据项的封锁。</p><p>2.收缩阶段<br>每个事务中，所有的封锁请求必须先于解锁请求。<br>例如：事务T遵循两段锁协议，其封锁协议为：<br>BEGIN TRANSACTION;<br>LOCK（A）；READ A; A := A + 100; WRITE A; LOCK(B); UNLOCK(A); READ(B), UNLOCK(B),;<br>COMMIT;     </p><p>可以证明：若并发执行的所有事务均遵守两段锁协议，则对这些并行事务的任何并行调度策略都是可串行化</p><p>需要说明的是，并发执行的所有事务若均遵守两段锁协议，只是这些事务的并行调度策略能可串行化的充分条件，不是必要条件。</p><p>两段锁协议与防止死锁的一次封锁法的区别：一次封锁法要求事务必须一次对所有要使用到的数据项进行加锁，否则不能继续运行。</p><p>显然，一次封锁法符合两段锁协议，但是两段锁协议并不要求一次就要对所有需要用到的数据项进行加锁，因此遵守两段锁协议的事务有可能死锁</p><h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p>&lt;<a href="https://blog.csdn.net/aaronthon/article/details/81714528" target="_blank" rel="noopener">https://blog.csdn.net/aaronthon/article/details/81714528</a>&gt;</p><p>&lt;<a href="https://blog.csdn.net/c361604199/article/details/79479398" target="_blank" rel="noopener">https://blog.csdn.net/c361604199/article/details/79479398</a>&gt;</p><p>&lt;<a href="https://blog.csdn.net/plg17/article/details/78758593" target="_blank" rel="noopener">https://blog.csdn.net/plg17/article/details/78758593</a>&gt;</p><p>&lt;<a href="https://www.cnblogs.com/luyucheng/p/6289714.html" target="_blank" rel="noopener">https://www.cnblogs.com/luyucheng/p/6289714.html</a>&gt;</p><p>&lt;<a href="https://blog.csdn.net/tongdanping/article/details/79878302" target="_blank" rel="noopener">https://blog.csdn.net/tongdanping/article/details/79878302</a>&gt;</p><p>&lt;<a href="https://blog.csdn.net/yifansj/article/details/79233726" target="_blank" rel="noopener">https://blog.csdn.net/yifansj/article/details/79233726</a>&gt;</p><p>&lt;<a href="https://www.cnblogs.com/zxz1987/p/6538462.html" target="_blank" rel="noopener">https://www.cnblogs.com/zxz1987/p/6538462.html</a>&gt;</p><p>&lt;<a href="https://coding.imooc.com/lesson/132.html#mid=6561" target="_blank" rel="noopener">https://coding.imooc.com/lesson/132.html#mid=6561</a>&gt;</p><p>&lt;<a href="https://coding.imooc.com/lesson/132.html#mid=6562" target="_blank" rel="noopener">https://coding.imooc.com/lesson/132.html#mid=6562</a>&gt;</p><p>&lt;<a href="https://blog.csdn.net/qq_23923485/article/details/73456784" target="_blank" rel="noopener">https://blog.csdn.net/qq_23923485/article/details/73456784</a>&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;数据库类别&quot;&gt;&lt;a href=&quot;#数据库类别&quot; class=&quot;headerlink&quot; title=&quot;数据库类别&quot;&gt;&lt;/a&gt;数据库类别&lt;/h4&gt;&lt;h5 id=&quot;关系型数据库&quot;&gt;&lt;a href=&quot;#关系型数据库&quot; class=&quot;headerlink&quot; title=&quot;关
      
    
    </summary>
    
      <category term="MySQL" scheme="http://ylovex.cn/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://ylovex.cn/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>nowcoder-最小众倍数</title>
    <link href="http://ylovex.cn/2019/06/11/nowcoder-%E6%9C%80%E5%B0%8F%E4%BC%97%E5%80%8D%E6%95%B0/"/>
    <id>http://ylovex.cn/2019/06/11/nowcoder-最小众倍数/</id>
    <published>2019-06-11T04:52:39.000Z</published>
    <updated>2019-07-10T23:48:48.100Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目来源："><a href="#题目来源：" class="headerlink" title="题目来源："></a>题目来源：</h3><p><a href="https://www.nowcoder.com/practice/3e9d7d22b7dd4daab695b795d243315b?tpId=90&amp;tqId=30844&amp;tPage=4&amp;rp=4&amp;ru=/ta/2018test&amp;qru=/ta/2018test/question-ranking" target="_blank" rel="noopener">https://www.nowcoder.com/practice/3e9d7d22b7dd4daab695b795d243315b?tpId=90&amp;tqId=30844&amp;tPage=4&amp;rp=4&amp;ru=/ta/2018test&amp;qru=/ta/2018test/question-ranking</a></p><h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p>定5个正整数, 它们的最小的众倍数是指的能够被其中至少三个数整除的最小正整数。给定5个不同的正整数, 请计算输出它们的最小众倍数。</p><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>先遍历n从1开始，再遍历nums[i]，使用map记录n*nums[i]出现的次数，当该数的次数出现三次的时候即为最小众倍数。</p><h3 id="参考代码："><a href="#参考代码：" class="headerlink" title="参考代码："></a>参考代码：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">public class Now_68 &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Scanner sc = new Scanner(System.in);</span><br><span class="line">        int[] nums = new int[5];</span><br><span class="line">        for(int i=0;i&lt;5;i++)&#123;</span><br><span class="line">            nums[i]=sc.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        int res = getRes(nums);</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static int getRes(int[] nums) &#123;</span><br><span class="line">        Map&lt;Integer , Integer&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">        for(int n=1;n&lt;Integer.MAX_VALUE; n++)&#123;</span><br><span class="line">            for(int i=0;i&lt;5;i++)&#123;</span><br><span class="line">                if(map.containsKey(n*nums[i]))&#123;</span><br><span class="line">                    map.put(n*nums[i] , map.get(n*nums[i])+1);</span><br><span class="line">                    if(map.get(n*nums[i])==3)&#123;</span><br><span class="line">                        return n*nums[i];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                else &#123;</span><br><span class="line">                    map.put(n*nums[i] , 1);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static int getRes2(int[] nums)&#123;</span><br><span class="line">        for(int n=1;n&lt;Integer.MAX_VALUE;n++)&#123;</span><br><span class="line">            int count=0;</span><br><span class="line">            for(int i=0;i&lt;5;i++)&#123;</span><br><span class="line">                if(n%nums[i]==0)&#123;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">                if(count&gt;2)&#123;</span><br><span class="line">                    return n;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目来源：&quot;&gt;&lt;a href=&quot;#题目来源：&quot; class=&quot;headerlink&quot; title=&quot;题目来源：&quot;&gt;&lt;/a&gt;题目来源：&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/3e9d7d22b7dd4da
      
    
    </summary>
    
      <category term="nowcoder" scheme="http://ylovex.cn/categories/nowcoder/"/>
    
    
      <category term="code" scheme="http://ylovex.cn/tags/code/"/>
    
      <category term="遍历" scheme="http://ylovex.cn/tags/%E9%81%8D%E5%8E%86/"/>
    
  </entry>
  
</feed>
